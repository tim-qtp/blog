import{_ as i,W as r,X as c,$ as a,a1 as n,Z as t,a2 as s,C as o}from"./framework-48328e23.js";const l={},p=s('<h1 id="_5-docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-docker镜像仓库" aria-hidden="true">#</a> 5.Docker镜像仓库</h1><h2 id="_5-1-搭建私有镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-1-搭建私有镜像仓库" aria-hidden="true">#</a> 5.1.搭建私有镜像仓库</h2><h3 id="_5-1-1-docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-1-1-docker镜像仓库" aria-hidden="true">#</a> 5.1.1.Docker镜像仓库</h3><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p>',4),d={href:"https://hub.docker.com/_/registry",target:"_blank",rel:"noopener noreferrer"},u=s(`<h3 id="_5-1-2-简化版镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5-1-2-简化版镜像仓库" aria-hidden="true">#</a> 5.1.2.简化版镜像仓库</h3><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> registry	<span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> registry-data:/var/lib/registry <span class="token punctuation">\\</span>
    registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。</p>`,5),k={href:"http://YourIp:5000/v2/_catalog",target:"_blank",rel:"noopener noreferrer"},v=s(`<h3 id="_5-1-3-带有图形化界面版本" tabindex="-1"><a class="header-anchor" href="#_5-1-3-带有图形化界面版本" aria-hidden="true">#</a> 5.1.3.带有图形化界面版本</h3><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.0&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">registry</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> registry
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./registry<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/registry
  <span class="token key atrule">ui</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> joxit/docker<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>static
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">80</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> REGISTRY_TITLE=传智教育私有仓库
      <span class="token punctuation">-</span> REGISTRY_URL=http<span class="token punctuation">:</span>//registry<span class="token punctuation">:</span><span class="token number">5000</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-4-配置docker信任地址" tabindex="-1"><a class="header-anchor" href="#_5-1-4-配置docker信任地址" aria-hidden="true">#</a> 5.1.4.配置Docker信任地址</h3><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打开要修改的文件</span>
<span class="token function">vi</span> /etc/docker/daemon.json
<span class="token comment"># 添加内容：</span>
<span class="token string">&quot;insecure-registries&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;http://192.168.150.101:8080&quot;</span><span class="token punctuation">]</span>
<span class="token comment"># 重加载</span>
systemctl daemon-reload
<span class="token comment"># 重启docker</span>
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-2-推送、拉取镜像" tabindex="-1"><a class="header-anchor" href="#_5-2-推送、拉取镜像" aria-hidden="true">#</a> 5.2.推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：43.143.146.93:8080</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag nginx:latest <span class="token number">43.143</span>.146.93:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 推送镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token number">43.143</span>.146.93:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③ 拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token number">43.143</span>.146.93:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/c3077419afd57ae4225a7f2550377d40.png" alt="" loading="lazy"> 1、推送本地镜像到仓库前都必须重命名(docker tag)镜像，以镜像仓库地址为前缀 2、镜像仓库推送前需要把仓库地址配置到docker服务的daemon.json文件中，被docker信任 3、推送使用docker push命令 4、拉取使用docker pull命令</p>`,15);function m(h,b){const e=o("ExternalLinkIcon");return r(),c("div",null,[p,a("p",null,[n("官网地址："),a("a",d,[n("https://hub.docker.com/_/registry"),t(e)])]),u,a("p",null,[n("访问"),a("a",k,[n("http://YourIp:5000/v2/_catalog"),t(e)]),n(" 可以查看当前私有镜像服务中包含的镜像")]),v])}const _=i(l,[["render",m],["__file","Docker image repository.html.vue"]]);export{_ as default};
