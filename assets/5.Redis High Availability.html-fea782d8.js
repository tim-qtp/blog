import{_ as i,W as t,X as l,$ as a,Z as p,a1 as c,a0 as s,a2 as n,C as r}from"./framework-6a3aa88c.js";const o={},d=n(`<h2 id="单机redis存在的问题" tabindex="-1"><a class="header-anchor" href="#单机redis存在的问题" aria-hidden="true">#</a> 单机Redis存在的问题</h2><ul><li>内存→数据丢失</li><li>并发能力→搭建<span style="color:MediumPurple;">主从</span>集群，实现读写分离</li><li>存储能力→搭建<span style="color:MediumPurple;"></span>分片集群，利用插槽机制实现动态扩容</li><li>故障恢复→<span style="color:MediumPurple;">哨兵</span>，实现健康检测和自动恢复</li></ul><p><strong>主从复制</strong>：允许一个 Redis 服务器（主节点）将数据复制到一个或多个 Redis 服务器（从节点）。这种方式可以实现读写分离，适合读多写少的场景。</p><p><strong>哨兵模式</strong>：用于监控主节点和从节点的状态，实现自动故障转移。如果主节点发生故障，哨兵可以自动将一个从节点升级为新的主节点。</p><p><strong>集群模式</strong>：Redis 集群通过分片的方式存储数据，每个节点存储数据的一部分，用户请求可以并行处理。集群模式支持自动分区、故障转移，并且可以在不停机的情况下进行节点增加或删除。</p><h2 id="主从" tabindex="-1"><a class="header-anchor" href="#主从" aria-hidden="true">#</a> 主从</h2><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/2b7231b6aabb9a9a2e2390ab3a280b2d-20230309232920063.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们在服务器 B 上执行下面这条命令：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#服务器 B 执行这条命令</span>
replicaof <span class="token operator">&lt;</span>服务器 A 的 IP 地址<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>服务器A的 Redis 端口号<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器 B 就会变成服务器 A 的「从服务器」，然后与主服务器进行第一次同步。</p><p>然后可以通过<code>INFO replication</code>查看状态信息，发现是角色是master，连接的从节点数量是2个，状态是online</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250207141900461.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<code>7001</code>set后，在<code>7002</code>和<code>7003</code>都能拿的到</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250207142107090.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后现在在从节点set一下数据，发现报错，只能进行只读操作，说明天然就实现了读写分离，主写从读</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250207142230914.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,16),u=n(`<p><strong>数据同步原理：</strong></p><h3 id="全量同步" tabindex="-1"><a class="header-anchor" href="#全量同步" aria-hidden="true">#</a> <strong>全量同步</strong></h3><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250207145728409.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>都一次全量同步是比较消耗资源的</p><p>这里有一个问题，master如何得知salve是第一次来连接呢？？</p><p>有几个概念，可以作为判断依据：</p><ul><li><strong>Replication Id</strong>：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li><strong>offset</strong>：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。</li></ul><p>因此slave做数据同步，必须向master声明自己的replication id 和offset，master才可以判断到底需要同步哪些数据。</p><p>因为slave原本也是一个master，有自己的replid和offset，当第一次变成slave，与master建立连接时，发送的replid和offset是自己的replid和offset。</p><p>master判断发现slave发送来的replid与自己的不一致，说明这是一个全新的slave，就知道要做全量同步了。</p><p>master会将自己的replid和offset都发送给这个slave，slave保存这些信息。以后slave的replid就与master一致了。</p><p>因此，<strong>master判断一个节点是否是第一次同步的依据，就是看replid是否一致</strong>。</p><h3 id="增量同步" tabindex="-1"><a class="header-anchor" href="#增量同步" aria-hidden="true">#</a> <strong>增量同步</strong></h3><p>什么时候做增量同步呢？</p><p>当slave故障重启还是手动重启的slave同步，就叫增量同步。</p><h3 id="repl-backlog原理" tabindex="-1"><a class="header-anchor" href="#repl-backlog原理" aria-hidden="true">#</a> repl_backlog原理</h3><p>master怎么知道slave与自己的数据差异在哪里呢?</p><p>这就要说到全量同步时的repl_baklog文件了。</p><p>这个文件是一个固定大小的数组，只不过数组是环形，也就是说<strong>角标到达数组末尾后，会再次从0开始读写</strong>，这样数组头部的数据就会被覆盖。</p><p>repl_baklog中会记录Redis处理过的命令日志及offset，包括master当前的offset，和slave已经拷贝到的offset：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725153359022.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>slave与master的offset之间的差异，就是salve需要增量拷贝的数据了。</p><p>随着不断有数据写入，master的offset逐渐变大，slave也不断的拷贝，追赶master的offset：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725153524190.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>直到数组被填满：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725153715910.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到slave的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分。</p><p>但是，如果slave出现网络阻塞，导致master的offset远远超过了slave的offset：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725153937031.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果master继续写入新数据，其offset就会覆盖旧的数据，直到将slave现在的offset也覆盖：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725154048552.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>棕色框中的红色部分，就是尚未同步，但是却已经被覆盖的数据。此时如果slave恢复，需要同步，却发现自己的offset都没有了，无法完成增量同步了。只能做全量同步。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>repL_baklog大小有上限，写满后会覆盖最早的数据。如果slave断开时间过久，导 致尚未备份的数据被覆盖，则无法基于log做增量同步，只能再次全量同步。</p></div><h3 id="主从同步优化" tabindex="-1"><a class="header-anchor" href="#主从同步优化" aria-hidden="true">#</a> 主从同步优化</h3><p>主从同步可以保证主从数据的一致性，非常重要。</p><p>可以从以下几个方面来优化Redis主从就集群：</p><ul><li>在master中配置<code>repl-diskless-sync yes</code>启用无磁盘复制，避免全量同步时的磁盘IO（直接发给网络，避免一次IO）。</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO</li><li>适当提高<code>repl_baklog</code>的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力</li></ul><p>架构图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725154405899.png" alt="image-20210725154405899" tabindex="0" loading="lazy"><figcaption>image-20210725154405899</figcaption></figure><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。</li><li>增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave</li></ul><p>什么时候执行全量同步？</p><ul><li>slave节点第一次连接master节点时</li><li>slave节点断开时间太久，repl_baklog中的offset已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li>slave节点断开又恢复，并且在repl_baklog中能找到offset时</li></ul><h2 id="哨兵" tabindex="-1"><a class="header-anchor" href="#哨兵" aria-hidden="true">#</a> 哨兵</h2><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250207161315706.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="sentinel的三个作用是什么" tabindex="-1"><a class="header-anchor" href="#sentinel的三个作用是什么" aria-hidden="true">#</a> Sentinel的三个作用是什么？</h3><ul><li>监控</li><li>故障转移</li><li>通知</li></ul><h3 id="sentinel如何判断一个redis实例是否健康" tabindex="-1"><a class="header-anchor" href="#sentinel如何判断一个redis实例是否健康" aria-hidden="true">#</a> Sentinel如何判断一个redis实例是否健康？</h3><ul><li>每隔1秒发送一次ping命令，如果超过一定时间没有相向则认为是主观下线</li><li>如果大多数sentinel都认为实例主观下线，则判定服务下线</li></ul><h3 id="选哪个salve作为主节点" tabindex="-1"><a class="header-anchor" href="#选哪个salve作为主节点" aria-hidden="true">#</a> 选哪个salve作为主节点？</h3><ul><li>首先会判断slave节点与master节点断开时间长短</li><li>然后判断slave节点的slave-priority值，越小优先级越高</li><li>如果slave-prority一样，则判断slave节点的offset值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的运行id大小，越小优先级越高。</li></ul><h3 id="故障转移步骤有哪些" tabindex="-1"><a class="header-anchor" href="#故障转移步骤有哪些" aria-hidden="true">#</a> 故障转移步骤有哪些？</h3><ul><li>首先选定一个slave作为新的master，执行slaveof no one（不为任何人所奴役）</li><li>然后让所有节点都执行slaveof 新master</li><li>强制修改故障节点配置，添加slaveof 新master</li></ul><h3 id="搭建哨兵集群" tabindex="-1"><a class="header-anchor" href="#搭建哨兵集群" aria-hidden="true">#</a> 搭建哨兵集群</h3><h4 id="集群结构" tabindex="-1"><a class="header-anchor" href="#集群结构" aria-hidden="true">#</a> 集群结构</h4><p>这里搭建一个三节点形成的Sentinel集群，来监管之前的Redis主从集群。如图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210701215227018.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>三个sentinel实例信息如下：</p><table><thead><tr><th>节点</th><th style="text-align:center;">IP</th><th style="text-align:center;">PORT</th></tr></thead><tbody><tr><td>s1</td><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">27001</td></tr><tr><td>s2</td><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">27002</td></tr><tr><td>s3</td><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">27003</td></tr></tbody></table><h4 id="准备实例和配置" tabindex="-1"><a class="header-anchor" href="#准备实例和配置" aria-hidden="true">#</a> 准备实例和配置</h4><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>我们创建三个文件夹，名字分别叫s1、s2、s3：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp目录</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 创建目录</span>
<span class="token function">mkdir</span> s1 s2 s3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210701215534714.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后在s1目录创建一个sentinel.conf文件，添加下面的内容：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>port 27001
sentinel announce-ip 192.168.150.101
sentinel monitor mymaster 192.168.150.101 7001 2
sentinel down-after-milliseconds mymaster 5000
sentinel failover-timeout mymaster 60000
dir &quot;/tmp/s1&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解读：</p><ul><li><code>port 27001</code>：是当前sentinel实例的端口</li><li><code>sentinel monitor mymaster 192.168.150.101 7001 2</code>：指定主节点信息 <ul><li><code>mymaster</code>：主节点名称，自定义，任意写</li><li><code>192.168.150.101 7001</code>：主节点的ip和端口</li><li><code>2</code>：选举master时的quorum值</li></ul></li></ul><p>然后将s1/sentinel.conf文件拷贝到s2、s3两个目录中（在/tmp目录执行下列命令）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 方式一：逐个拷贝</span>
<span class="token function">cp</span> s1/sentinel.conf s2
<span class="token function">cp</span> s1/sentinel.conf s3
<span class="token comment"># 方式二：管道组合命令，一键拷贝</span>
<span class="token builtin class-name">echo</span> s2 s3 <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token function">cp</span> s1/sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/27001/27002/g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/s1/s2/g&#39;</span> s2/sentinel.conf
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/27001/27003/g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/s1/s3/g&#39;</span> s3/sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h4><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 第1个</span>
redis-sentinel s1/sentinel.conf
<span class="token comment"># 第2个</span>
redis-sentinel s2/sentinel.conf
<span class="token comment"># 第3个</span>
redis-sentinel s3/sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210701220714104.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>尝试让master节点7001宕机，查看sentinel日志：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210701222857997.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看7003的日志：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210701223025709.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看7002的日志：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210701223131264.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="redistemplate的哨兵模式" tabindex="-1"><a class="header-anchor" href="#redistemplate的哨兵模式" aria-hidden="true">#</a> RedisTemplate的哨兵模式</h3><p>在Sentinel集群监管下的Redis主从集群，其节点会因为自动故障转移而发生变化，Redis的客户端必须感知这种变化，及时更新连接信息。Spring的RedisTemplate底层利用lettuce实现了节点的感知和自动切换。</p><p>在项目的pom文件中引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在配置文件application.yml中指定redis的sentinel相关信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>spring<span class="token operator">:</span>
  redis<span class="token operator">:</span>
    sentinel<span class="token operator">:</span>
      master<span class="token operator">:</span> mymaster
      nodes<span class="token operator">:</span>
        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span><span class="token operator">:</span><span class="token number">27001</span>
        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span><span class="token operator">:</span><span class="token number">27002</span>
        <span class="token operator">-</span> <span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span><span class="token operator">:</span><span class="token number">27003</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置读写分离</strong></p><p>在项目的启动类中，添加一个新的bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">LettuceClientConfigurationBuilderCustomizer</span> <span class="token function">clientConfigurationBuilderCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> clientConfigurationBuilder <span class="token operator">-&gt;</span>      				clientConfigurationBuilder<span class="token punctuation">.</span><span class="token function">readFrom</span><span class="token punctuation">(</span><span class="token class-name">ReadFrom</span><span class="token punctuation">.</span><span class="token constant">REPLICA_PREFERRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个bean中配置的就是读写策略，包括四种：</p><ul><li>MASTER：从主节点读取</li><li>MASTER_PREFERRED：优先从master节点读取，master不可用才读取replica</li><li>REPLICA：从slave（replica）节点读取</li><li>REPLICA _PREFERRED：优先从slave（replica）节点读取，所有的slave都不可用才读取master</li></ul><h2 id="集群" tabindex="-1"><a class="header-anchor" href="#集群" aria-hidden="true">#</a> 集群</h2><h3 id="redis分片集群" tabindex="-1"><a class="header-anchor" href="#redis分片集群" aria-hidden="true">#</a> Redis分片集群</h3><ul><li>海量数据存储问题</li><li>高并发写的问题</li></ul><p>使用分片集群可以解决上述问题，如图:</p><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725155747294.png" alt="image-20210725155747294" style="zoom:50%;"><p>分片集群特征：</p><ul><li><p>集群中有多个master，每个master保存不同数据</p></li><li><p>每个master都可以有多个slave节点</p></li><li><p>master之间通过ping监测彼此健康状态</p></li><li><p>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p></li></ul><p>这里我们会在同一台虚拟机中开启6个redis实例，模拟分片集群，信息如下：</p><table><thead><tr><th style="text-align:center;">IP</th><th style="text-align:center;">PORT</th><th style="text-align:center;">角色</th></tr></thead><tbody><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7001</td><td style="text-align:center;">master</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7002</td><td style="text-align:center;">master</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7003</td><td style="text-align:center;">master</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">8001</td><td style="text-align:center;">slave</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">8002</td><td style="text-align:center;">slave</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">8003</td><td style="text-align:center;">slave</td></tr></tbody></table><h3 id="准备实例和配置-1" tabindex="-1"><a class="header-anchor" href="#准备实例和配置-1" aria-hidden="true">#</a> 准备实例和配置</h3><p>删除之前的7001、7002、7003这几个目录，重新创建出7001、7002、7003、8001、8002、8003目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp目录</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 删除旧的，避免配置干扰</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span>
<span class="token comment"># 创建目录</span>
<span class="token function">mkdir</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span> <span class="token number">8001</span> <span class="token number">8002</span> <span class="token number">8003</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在/tmp下准备一个新的redis.conf文件，内容如下：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>port 6379
<span class="token comment"># 开启集群功能</span>
cluster-enabled yes
<span class="token comment"># 集群的配置文件名称，不需要我们创建，由redis自己维护</span>
cluster-config-file /tmp/6379/nodes.conf
<span class="token comment"># 节点心跳失败的超时时间</span>
cluster-node-timeout 5000
<span class="token comment"># 持久化文件存放目录</span>
dir /tmp/6379
<span class="token comment"># 绑定地址</span>
bind 0.0.0.0
<span class="token comment"># 让redis后台运行</span>
daemonize yes
<span class="token comment"># 注册的实例ip</span>
replica-announce-ip 192.168.150.101
<span class="token comment"># 保护模式</span>
protected-mode no
<span class="token comment"># 数据库数量</span>
databases 1
<span class="token comment"># 日志</span>
logfile /tmp/6379/run.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将这个文件拷贝到每个目录下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp目录</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 执行拷贝</span>
<span class="token builtin class-name">echo</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span> <span class="token number">8001</span> <span class="token number">8002</span> <span class="token number">8003</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token function">cp</span> redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp目录</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 修改配置文件</span>
<span class="token builtin class-name">printf</span> <span class="token string">&#39;%s\\n&#39;</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span> <span class="token number">8001</span> <span class="token number">8002</span> <span class="token number">8003</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token parameter variable">-t</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/6379/{}/g&#39;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动-1" tabindex="-1"><a class="header-anchor" href="#启动-1" aria-hidden="true">#</a> 启动</h4><p>因为已经配置了后台启动模式，所以可以直接启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入/tmp目录</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 一键启动所有服务</span>
<span class="token builtin class-name">printf</span> <span class="token string">&#39;%s\\n&#39;</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span> <span class="token number">8001</span> <span class="token number">8002</span> <span class="token number">8003</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token parameter variable">-t</span> redis-server <span class="token punctuation">{</span><span class="token punctuation">}</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过ps查看状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发现服务都已经正常启动：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210702174255799.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果要关闭所有进程，可以执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> redis <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者（推荐这种方式）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">printf</span> <span class="token string">&#39;%s\\n&#39;</span> <span class="token number">7001</span> <span class="token number">7002</span> <span class="token number">7003</span> <span class="token number">8001</span> <span class="token number">8002</span> <span class="token number">8003</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token parameter variable">-t</span> redis-cli <span class="token parameter variable">-p</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建集群" tabindex="-1"><a class="header-anchor" href="#创建集群" aria-hidden="true">#</a> 创建集群</h4><p>虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联。</p><p>我们需要执行命令来创建集群，在Redis5.0之前创建集群比较麻烦，5.0之后集群管理命令都集成到了redis-cli中。</p><p>Redis5.0以后</p><p>集群管理以及集成到了redis-cli中，格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> create --cluster-replicas <span class="token number">1</span> <span class="token number">192.168</span>.150.101:7001 <span class="token number">192.168</span>.150.101:7002 <span class="token number">192.168</span>.150.101:7003 <span class="token number">192.168</span>.150.101:8001 <span class="token number">192.168</span>.150.101:8002 <span class="token number">192.168</span>.150.101:8003
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令说明：</p><ul><li><code>redis-cli --cluster</code>或者<code>./redis-trib.rb</code>：代表集群操作命令</li><li><code>create</code>：代表是创建集群</li><li><code>--replicas 1</code>或者<code>--cluster-replicas 1</code> ：指定集群中每个master的副本个数为1，此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master</li></ul><p>运行后的样子：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210702181101969.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里输入yes，则集群开始创建：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210702181215705.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过命令可以查看集群状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span> cluster nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210702181922809.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1" aria-hidden="true">#</a> 测试</h4><p>尝试连接7001节点，存储一个数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 连接</span>
redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span>
<span class="token comment"># 存储数据</span>
<span class="token builtin class-name">set</span> num <span class="token number">123</span>
<span class="token comment"># 读取数据</span>
get num
<span class="token comment"># 再次存储</span>
<span class="token builtin class-name">set</span> a <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果悲剧了：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210702182343979.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>集群操作时，需要给<code>redis-cli</code>加上<code>-c</code>参数才可以：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-c</span> <span class="token parameter variable">-p</span> <span class="token number">7001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这次可以了：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210702182602145.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="散列插槽" tabindex="-1"><a class="header-anchor" href="#散列插槽" aria-hidden="true">#</a> 散列插槽</h3><h4 id="插槽原理" tabindex="-1"><a class="header-anchor" href="#插槽原理" aria-hidden="true">#</a> 插槽原理</h4><p>Redis会把每一个master节点映射到0~16383共16384个插槽（hash slot）上，每个键根据其名字的 CRC16 值被映射到这些哈希槽上。然后，这些哈希槽会被均匀地分配到所有的 Redis 实例上。查看集群信息时就能看到：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725155820320.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>数据key不是与节点绑定，而是与插槽绑定。redis会根据key的有效部分计算插槽值，分两种情况：</p><ul><li>key中包含&quot;{}&quot;，且“{}”中至少包含1个字符，“{}”中的部分是有效部分</li><li>key中不包含“{}”，整个key都是有效部分</li></ul><p>例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算，得到一个hash值，然后对16384取余，得到的结果就是slot值。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725155850200.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图，在7001这个节点执行set a 1时，对a做hash运算，对16384取余，得到的结果是15495，因此要存储到103节点。</p><p>到了7003后，执行<code>get num</code>时，对num做hash运算，对16384取余，得到的结果是2765，因此需要切换到7001节点</p><h4 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h4><p>Redis如何判断某个key应该在哪个实例？</p><ul><li>将16384个插槽分配到不同的实例</li><li>根据key的有效部分计算哈希值，对16384取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p>如何将同一类数据固定的保存在同一个Redis实例？</p><ul><li>这一类数据使用相同的有效部分，例如key都以{typeId}为前缀</li></ul><h3 id="集群伸缩" tabindex="-1"><a class="header-anchor" href="#集群伸缩" aria-hidden="true">#</a> 集群伸缩</h3><p>redis-cli --cluster提供了很多操作集群的命令，可以通过下面方式查看：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725160138290.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如，添加节点的命令：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725160448139.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析" aria-hidden="true">#</a> 需求分析</h4><p>需求：向集群中添加一个新的master节点，并向其中存储 num = 10</p><ul><li>启动一个新的redis实例，端口为7004</li><li>添加7004到之前的集群，并作为一个master节点</li><li>给7004节点分配插槽，使得num这个key可以存储到7004实例</li></ul><p>这里需要两个新的功能：</p><ul><li>添加一个节点到集群中</li><li>将部分插槽分配到新插槽</li></ul><h4 id="创建新的redis实例" tabindex="-1"><a class="header-anchor" href="#创建新的redis实例" aria-hidden="true">#</a> 创建新的redis实例</h4><p>创建一个文件夹：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token number">7004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>拷贝配置文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> redis.conf /7004
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改配置文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> /s/6379/7004/g <span class="token number">7004</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server <span class="token number">7004</span>/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="添加新节点到redis" tabindex="-1"><a class="header-anchor" href="#添加新节点到redis" aria-hidden="true">#</a> 添加新节点到redis</h4><p>添加节点的语法如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725160448139.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> add-node  <span class="token number">192.168</span>.150.101:7004 <span class="token number">192.168</span>.150.101:7001 <span class="token comment">#并以 192.168.150.101:7001 作为集群的入口节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过命令查看集群状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-p</span> <span class="token number">7001</span> cluster nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如图，7004加入了集群，并且默认是一个master节点：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725161007099.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是，可以看到7004节点的插槽数量为0，因此没有任何数据可以存储到7004上</p><h4 id="转移插槽" tabindex="-1"><a class="header-anchor" href="#转移插槽" aria-hidden="true">#</a> 转移插槽</h4><p>现在将num存储到7004节点，因此需要先看看num的插槽是多少：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725161241793.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图所示，num的插槽为2765.</p><p>我们可以将0~3000的插槽从7001转移到7004，命令格式如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725161401925.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>具体命令如下：</p><p>建立连接：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725161506241.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>得到下面的反馈：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725161540841.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>询问要移动多少个插槽，计划是3000个：</p><p>新的问题来了：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725161637152.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那个node来接收这些插槽？？</p><p>显然是7004，那么7004节点的id是多少呢？</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725161731738.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>复制这个id，然后拷贝到刚才的控制台后：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725161817642.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里询问，你的插槽是从哪里移动过来的？</p><ul><li>all：代表全部，也就是三个节点各转移一部分</li><li>具体的id：目标节点的id</li><li>done：没有了</li></ul><p>这里我们要从7001获取，因此填写7001的id：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725162030478.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>填完后，点击done，这样插槽转移就准备好了：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725162101228.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>确认要转移吗？输入yes：</p><p>然后，通过命令查看结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725162145497.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725162224058.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>目的达成。</p><h3 id="故障转移" tabindex="-1"><a class="header-anchor" href="#故障转移" aria-hidden="true">#</a> 故障转移</h3><p>集群初识状态是这样的：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210727161152065.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中7001、7002、7003都是master，计划让7002宕机。</p><h4 id="自动故障转移" tabindex="-1"><a class="header-anchor" href="#自动故障转移" aria-hidden="true">#</a> 自动故障转移</h4><p>当集群中有一个master宕机会发生什么呢？</p><p>直接停止一个redis实例，例如7002：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-p</span> <span class="token number">7002</span> <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1）首先是该实例与其它实例失去连接</p><p>2）然后是疑似宕机：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725162319490.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3）最后是确定下线，自动提升一个slave为新的master：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725162408979.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>4）当7002再次启动，就会变为一个slave节点了：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210727160803386.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="手动故障转移" tabindex="-1"><a class="header-anchor" href="#手动故障转移" aria-hidden="true">#</a> 手动故障转移</h4><p>想让一个旧的master下线，让一个新的master上升为主节点。</p><p>在新的节点上利用cluster failover命令可以手动让集群中的某个master宕机，切换到执行cluster failover命令的这个slave节点，实现无感知的数据迁移。其流程如 下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210725162441407.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这种failover命令可以指定三种模式：</p><ul><li>缺省：默认的流程，如图1~6歩</li><li>force：省略了对offset的一致性校验</li><li>takeover：直接执行第5歩，忽略数据一致性、忽略master状态和其它master的意见</li></ul><p><strong>案例需求</strong>：在7002这个slave节点执行手动故障转移，重新夺回master地位</p><p>步骤如下：</p><p>1）利用redis-cli连接7002这个节点</p><p>2）执行cluster failover命令</p><p>如图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210727160037766.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>效果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210727161152065.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="redistemplate访问分片集群" tabindex="-1"><a class="header-anchor" href="#redistemplate访问分片集群" aria-hidden="true">#</a> RedisTemplate访问分片集群</h3><p>RedisTemplate底层同样基于lettuce实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：</p><p>1）引入redis的starter依赖</p><p>2）配置分片集群地址</p><p>3）配置读写分离</p><p>在哨兵模式中，配的是哨兵的地址，在分片集群中配的就是集群中每个节点的地址。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">cluster</span><span class="token punctuation">:</span>
      <span class="token key atrule">nodes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7001</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7002</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">7003</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8001</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8002</span>
        <span class="token punctuation">-</span> 192.168.150.101<span class="token punctuation">:</span><span class="token number">8003</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,263);function g(m,h){const e=r("font");return t(),l("div",null,[d,a("p",null,[a("strong",null,[p(e,{color:"red"},{default:c(()=>[s("注意")]),_:1})]),s("：在5.0以后新增命令replicaof，与salveof效果一致。")]),u])}const v=i(o,[["render",g],["__file","5.Redis High Availability.html.vue"]]);export{v as default};
