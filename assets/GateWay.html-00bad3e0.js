import{_ as l,W as i,X as u,$ as n,Z as s,a1 as o,a0 as a,a2 as e,C as c}from"./framework-6a3aa88c.js";const r={},d=e('<h1 id="gateway服务网关" tabindex="-1"><a class="header-anchor" href="#gateway服务网关" aria-hidden="true">#</a> Gateway服务网关</h1><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><h2 id="_3-1-为什么需要网关" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么需要网关" aria-hidden="true">#</a> 3.1.为什么需要网关</h2><blockquote><p><strong>前言：</strong></p><p>当微服务<mark>内部有相互调用</mark>关系时，我们就可以利用<mark>Feign</mark>这样一个组件去做了；</p><p>当外部有请求时，直接发请求到我们的微服务就行了==？？？==</p><p>不是所有的都是对外公开的，一些是内部使用的；</p><p>需要对用户的身份进行验证；</p></blockquote><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p>',6),k=e('<blockquote><p>小Tips：</p><p>Feign的负载均衡是解决微服务内之间调用，</p><p>然后gateway负载均衡是解决客户端访问服务端的调用</p></blockquote><p>架构图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/5db4df28837f7bb3168848fe545e3141.png" alt="image-20210714210131152" tabindex="0" loading="lazy"><figcaption>image-20210714210131152</figcaption></figure><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><h2 id="_3-2-gateway快速入门" tabindex="-1"><a class="header-anchor" href="#_3-2-gateway快速入门" aria-hidden="true">#</a> 3.2.gateway快速入门</h2><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p><ol><li>创建SpringBoot工程gateway，引入网关依赖</li><li>编写启动类</li><li>编写基础配置和路由规则</li><li>启动网关服务进行测试</li></ol><h3 id="_1-创建gateway服务-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-创建gateway服务-引入依赖" aria-hidden="true">#</a> 1）创建gateway服务，引入依赖</h3><p>创建服务：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/35dbc60a356f71c5b2a6d7a13f3b8a58.png" alt="image-20210714210919458" tabindex="0" loading="lazy"><figcaption>image-20210714210919458</figcaption></figure><p>引入依赖：</p>',16),m=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--网关--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--nacos服务发现依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-编写启动类" tabindex="-1"><a class="header-anchor" href="#_2-编写启动类" aria-hidden="true">#</a> 2）编写启动类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>gateway</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-编写基础配置和路由规则" tabindex="-1"><a class="header-anchor" href="#_3-编写基础配置和路由规则" aria-hidden="true">#</a> 3）编写基础配置和路由规则</h3><p>创建application.yml文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10010</span> <span class="token comment"># 网关端口</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway <span class="token comment"># 服务名称</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos地址</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment"># 网关路由配置</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service <span class="token comment"># 路由id，自定义，只要唯一即可</span>
          <span class="token comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice <span class="token comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span>
            <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span> <span class="token comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service
		  <span class="token comment">#uri: http://localhost:8080</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//orderservice
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
           <span class="token punctuation">-</span> Path=/order/<span class="token important">**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，<mark>lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</mark></p><h3 id="_4-重启测试" tabindex="-1"><a class="header-anchor" href="#_4-重启测试" aria-hidden="true">#</a> 4）重启测试</h3>`,9),g={href:"http://localhost:10010/user/1%E6%97%B6%EF%BC%8C%E7%AC%A6%E5%90%88%60/user/**%60%E8%A7%84%E5%88%99%EF%BC%8C%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B0uri%EF%BC%9Ahttp://userservice/user/1%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BA%86%E7%BB%93%E6%9E%9C%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},v=e('<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/9a0abd0474c75825780b99a7fb3b1857.png" alt="image-20210714211908341" tabindex="0" loading="lazy"><figcaption>image-20210714211908341</figcaption></figure><h3 id="_5-网关路由的流程图" tabindex="-1"><a class="header-anchor" href="#_5-网关路由的流程图" aria-hidden="true">#</a> 5）网关路由的流程图</h3><p>整个访问的流程如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/e79fa391abca2a8df8ea3915ff60f7b2.png" alt="image-20210714211742956" tabindex="0" loading="lazy"><figcaption>image-20210714211742956</figcaption></figure><p>总结：</p><p>网关搭建步骤：</p><ol><li><p>创建项目，引入nacos服务发现和gateway依赖</p></li><li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p></li></ol><p>路由配置包括：</p><ol><li><p>路由id：路由的唯一标示</p></li><li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p></li><li><p>路由断言（predicates）：判断路由的规则，</p></li><li><p>路由过滤器（filters）：对请求或响应做处理</p></li></ol><p>接下来，就重点来学习路由断言和路由过滤器的详细知识</p><h2 id="_3-3-断言工厂" tabindex="-1"><a class="header-anchor" href="#_3-3-断言工厂" aria-hidden="true">#</a> 3.3.断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path=/user/**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理的</p><p>不会写没有关系，贴一个官网文档地址：</p>',15),h={href:"https://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/request-predicates-factories.html",target:"_blank",rel:"noopener noreferrer"},b=e(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service
<span class="token comment">#        uri: http://localhost:8081</span>
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span>
          <span class="token punctuation">-</span> After=2025<span class="token punctuation">-</span>01<span class="token punctuation">-</span>20T17<span class="token punctuation">:</span>42<span class="token punctuation">:</span>47.789<span class="token punctuation">-</span>07<span class="token punctuation">:</span>00<span class="token punctuation">[</span>America/Denver<span class="token punctuation">]</span>
<span class="token comment"># 不在2025-01-20之后访问，这个路由请求就会跳过</span>
<span class="token comment"># 一个一个id往下走，判断符不符合，不符合就报404</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/ed2d94d52e2fd81d748c6dab979818a5.png" alt="image-20230610102944484" tabindex="0" loading="lazy"><figcaption>image-20230610102944484</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/03a64bf97086d445e2d45f14da0f6a28.png" alt="image-20230610103010625" tabindex="0" loading="lazy"><figcaption>image-20230610103010625</figcaption></figure><p>像这样的断言工厂在SpringCloudGateway还有十几个:</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \\d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>我们只需要掌握Path这种路由工程就可以了。</p><p>总结：</p><p>路由工厂的作用是什么？</p><p>读取用户配置的断言规则，而后把它解析成对应的条件，后面用户请求进来了做判断。</p><h2 id="_3-4-过滤器工厂" tabindex="-1"><a class="header-anchor" href="#_3-4-过滤器工厂" aria-hidden="true">#</a> 3.4.过滤器工厂</h2><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/8d8e6250f1f7f7e8c7336453676d0cde.png" alt="image-20210714212312871" tabindex="0" loading="lazy"><figcaption>image-20210714212312871</figcaption></figure><h3 id="_3-4-1-路由过滤器的种类" tabindex="-1"><a class="header-anchor" href="#_3-4-1-路由过滤器的种类" aria-hidden="true">#</a> 3.4.1.路由过滤器的种类</h3><p>Spring提供了31种不同的路由过滤器工厂。例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table>`,15),f={href:"https://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/gatewayfilter-factories.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<h3 id="_3-4-2-请求头过滤器" tabindex="-1"><a class="header-anchor" href="#_3-4-2-请求头过滤器" aria-hidden="true">#</a> 3.4.2.请求头过滤器</h3><p>下面我们以AddRequestHeader 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!</p></blockquote><p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service 
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice 
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span> 
        <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span> 
        <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token comment"># 过滤器</span>
        <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span> Github is freaking awesome<span class="token tag">!</span> <span class="token comment"># 添加请求头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p><blockquote><p>记得日志级别改为Header</p></blockquote><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/5993e94d678ebeadb8dcc07119382aaf.png" alt="image-20230610113754972" tabindex="0" loading="lazy"><figcaption>image-20230610113754972</figcaption></figure><p>日志打印了出来</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/6c69427f1b5901af9a1c81790a9dcd04.png" alt="image-20230610113814013" tabindex="0" loading="lazy"><figcaption>image-20230610113814013</figcaption></figure><h3 id="_3-4-3-默认过滤器" tabindex="-1"><a class="header-anchor" href="#_3-4-3-默认过滤器" aria-hidden="true">#</a> 3.4.3.默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service 
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice 
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span> 
        <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span>
      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span> <span class="token comment"># 默认过滤项</span>
      <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span> Itcast is freaking awesome<span class="token tag">!</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-4-总结" tabindex="-1"><a class="header-anchor" href="#_3-4-4-总结" aria-hidden="true">#</a> 3.4.4.总结</h3><p>过滤器的作用是什么？</p><p>① 对路由的请求或响应做加工处理，比如添加请求头</p><p>② 配置在路由下的过滤器只对当前路由的请求生效</p><p>defaultFilters的作用是什么？</p><p>① 对所有路由都生效的过滤器</p><h2 id="_3-5-全局过滤器" tabindex="-1"><a class="header-anchor" href="#_3-5-全局过滤器" aria-hidden="true">#</a> 3.5.全局过滤器</h2><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是<mark>固定</mark>的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p><h3 id="_3-5-1-全局过滤器作用" tabindex="-1"><a class="header-anchor" href="#_3-5-1-全局过滤器作用" aria-hidden="true">#</a> 3.5.1.全局过滤器作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而<mark>GlobalFilter</mark>的逻辑需要<mark>自己写代码</mark>实现。</p><p>定义方式是实现GlobalFilter接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     *  处理当前请求，有必要的话通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">}</span>将请求交给下一个过滤器处理
     *
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span> 请求上下文（从请求网关开始，一直到结束为止），整个过程中都可以共享exchage对象，里面可以获取Request、Response等信息
     * <span class="token keyword">@param</span> <span class="token parameter">chain</span> 用来把请求委托给下一个过滤器，主要作用是放行
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span></span></span><span class="token punctuation">}</span> 返回标示当前过滤器业务结束
     */</span>
    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在filter中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h3 id="_3-5-2-自定义全局过滤器" tabindex="-1"><a class="header-anchor" href="#_3-5-2-自定义全局过滤器" aria-hidden="true">#</a> 3.5.2.自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li><p>参数中是否有authorization，</p></li><li><p>authorization参数值是否为admin</p></li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：</p><p>在gateway中定义一个过滤器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filters</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GlobalFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizeFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.获取请求参数</span>
        <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.获取authorization参数</span>
        <span class="token class-name">String</span> auth <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.校验</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 放行</span>
            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.拦截</span>
        <span class="token comment">// 4.1.禁止访问，设置状态码</span>
        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.2.结束处理</span>
        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/74af4a3997c2b8333bdc3821556d6173.png" alt="image-20230610134430192" tabindex="0" loading="lazy"><figcaption>image-20230610134430192</figcaption></figure><p>果然是403</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/5e1565a765997729072bc340af147095.png" alt="image-20230610134512810" tabindex="0" loading="lazy"><figcaption>image-20230610134512810</figcaption></figure><p>小结：</p><blockquote><p>1、全局过滤器的作用是什么？</p><ul><li>对所有路由都生效的过滤器，并且可以自定义处理逻辑</li></ul><p>2、实现全局过滤器的步骤？实现GlobalFilter接口</p><ul><li>添加@Order注解或实现Ordered接口</li><li>编写处理逻辑</li></ul></blockquote><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/11095d5773bbe793bdb799b680e2d205.png" alt="image-20230610134902623" tabindex="0" loading="lazy"><figcaption>image-20230610134902623</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/bba03bfd3171d07c4900c16d9f3d3a51.png" alt="image-20230610135103617" tabindex="0" loading="lazy"><figcaption>image-20230610135103617</figcaption></figure><h3 id="_3-5-3-过滤器执行顺序" tabindex="-1"><a class="header-anchor" href="#_3-5-3-过滤器执行顺序" aria-hidden="true">#</a> 3.5.3.过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/7ea49c972768cfb164e85d769c5be2d9.png" alt="image-20210714214228409" tabindex="0" loading="lazy"><figcaption>image-20210714214228409</figcaption></figure><p>排序的规则是什么呢？</p><ul><li><p>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</p></li><li><p>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</p></li><li><p>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</p><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250101214439623.png" style="zoom:67%;"></li><li><p>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</p></li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><blockquote><p>适配器: 将一个类的接口转换成客户希望的另外一个接口</p></blockquote><figure><img src="https://i-blog.csdnimg.cn/blog_migrate/149a1212fd21e3f8b13cceeb266d2e3a.png" alt="image-20230610140613127" tabindex="0" loading="lazy"><figcaption>image-20230610140613127</figcaption></figure><p>也就是说，在网关中，所有的GlobalFilter都可以适配成GatewayFilter,所以都是GatewayFilter，都可以扔到GatewayFilter集合中去做排序；</p><h2 id="_3-6-跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-跨域问题" aria-hidden="true">#</a> 3.6.跨域问题</h2><h3 id="_3-6-1-什么是跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-1-什么是跨域问题" aria-hidden="true">#</a> 3.6.1.什么是跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p>`,56),w={href:"http://www.taobao.com",target:"_blank",rel:"noopener noreferrer"},_={href:"http://www.taobao.org",target:"_blank",rel:"noopener noreferrer"},x={href:"http://www.jd.com",target:"_blank",rel:"noopener noreferrer"},q={href:"http://miaosha.jd.com",target:"_blank",rel:"noopener noreferrer"},F=n("li",null,[n("p",null,"域名相同，端口不同：localhost:8080和localhost8081")],-1),E=n("p",null,[a("跨域问题："),n("mark",null,"浏览器禁止"),a("请求的发起者与服务端发生跨域"),n("mark",null,"ajax"),a("请求，请求被浏览器拦截的问题")],-1),A=n("p",null,"贴个阮一峰的网站地址：",-1),C={href:"https://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"},G=e(`<p>解决方案：CORS</p><p><mark>浏览器问一下服务端，你让不让这哥么跨域啊，如果让你告诉我一声。</mark></p><p>这就是所谓的options<mark>询问</mark>！</p><p>所以服务端配置一些信息，表明我让谁跨域，我允许你干什么事！</p><h3 id="_3-6-2-模拟跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-2-模拟跨域问题" aria-hidden="true">#</a> 3.6.2.模拟跨域问题</h3><p>将一个index.html文件放入tomcat或者nginx这样的web服务器中，启动并访问。</p><p>script中的发起了一次axios请求：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:10010/user/1?authorization=admin&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在浏览器控制台看到下面的错误：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/12d867dece3d60d7b5cd743115ba3938.png" alt="image-20210714215832675" tabindex="0" loading="lazy"><figcaption>image-20210714215832675</figcaption></figure><p>从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p><h3 id="_3-6-3-解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-3-解决跨域问题" aria-hidden="true">#</a> 3.6.3.解决跨域问题</h3><p>在gateway服务的application.yml文件中，添加下面的配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token comment"># 。。。</span>
      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span> <span class="token comment"># 全局的跨域处理</span>
        <span class="token key atrule">add-to-simple-url-handler-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 解决options请求被拦截问题，就是询问</span>
        <span class="token key atrule">corsConfigurations</span><span class="token punctuation">:</span>
          <span class="token key atrule">&#39;[/**]&#39;</span><span class="token punctuation">:</span>
            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token comment"># 允许哪些网站的跨域请求 </span>
              <span class="token punctuation">-</span> <span class="token string">&quot;http://localhost:8090&quot;</span>
            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 允许的跨域ajax的请求方式</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;GET&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;POST&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;DELETE&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;PUT&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;OPTIONS&quot;</span>
            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment"># 允许在请求中携带的头信息</span>
            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否允许携带cookie</span>
            <span class="token key atrule">maxAge</span><span class="token punctuation">:</span> <span class="token number">360000</span> <span class="token comment"># 这次跨域检测的有效期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次请求就正常了，也打印出了用户信息！</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250101220959905.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code> <span class="token key atrule">maxAge</span><span class="token punctuation">:</span> <span class="token number">360000</span> <span class="token comment"># 这次跨域检测的有效期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个有效期是因为，每次请求都会问一次，每次都问一次，对服务器的压力成双倍增加，因此跨域的CORS解决方案对性能有损耗。为了减少这种损耗，我们可以给跨域检测设置有效期。</p><p>有效期内，浏览器将不再发起询问，而是直接放行</p>`,19);function S(B,R){const p=c("font"),t=c("ExternalLinkIcon");return i(),u("div",null,[d,n("ul",null,[n("li",null,[s(p,{color:"Plum"},{default:o(()=>[a("请求路由")]),_:1})]),n("li",null,[s(p,{color:"MediumPurple"},{default:o(()=>[a("权限控制")]),_:1})]),n("li",null,[s(p,{color:"Purple"},{default:o(()=>[a("限流")]),_:1})])]),k,s(p,{color:"PaleVioletRed"},{default:o(()=>[a("starter依赖---也就是自动装配")]),_:1}),m,n("p",null,[a("重启网关，访问"),n("a",g,[a("http://localhost:10010/user/1时，符合`/user/**`规则，请求转发到uri：http://userservice/user/1，得到了结果："),s(t)])]),v,n("p",null,[n("a",h,[a("路由断言工厂"),s(t)])]),b,n("p",null,[n("a",f,[a("路由过滤器工厂"),s(t)])]),y,n("ul",null,[n("li",null,[n("p",null,[a("域名不同： "),n("a",w,[a("www.taobao.com"),s(t)]),a(" 和 "),n("a",_,[a("www.taobao.org"),s(t)]),a(" 和 "),n("a",x,[a("www.jd.com"),s(t)]),a(" 和 "),n("a",q,[a("miaosha.jd.com"),s(t)])])]),F]),E,A,n("p",null,[n("a",C,[a("https://www.ruanyifeng.com/blog/2016/04/cors.html"),s(t)])]),G])}const P=l(r,[["render",S],["__file","GateWay.html.vue"]]);export{P as default};
