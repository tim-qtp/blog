import{_ as t,W as o,X as n,a2 as i}from"./framework-6a3aa88c.js";const r={},s=i('<p>常见方法：</p><p><strong>单一生产者和单一消费者</strong>：</p><ul><li>使用单个生产者发送消息到<strong>单个队列</strong>，并由单个消费者处理消息。这样可以确保消息按照生产者的发送顺序消费。</li><li>这种方法简单但容易成为<strong>性能瓶颈</strong>，无法充分利用并发的优势。</li></ul><p><strong>分区与顺序键（Partition Key）</strong>：</p><ul><li>在支持<strong>分区（Partition）</strong> 的消息队列中（如 <mark>Kafka、RocketMQ</mark>），可以通过 <strong>Partition Key</strong> 将消息发送到特定的分区。每个分区内部是<strong>有序的</strong>，这样可以保证相同 Partition Key 的消息按顺序消费。</li><li>例如，在订单处理系统中，可以使用订单号作为 Partition Key，将同一个订单的所有消息路由到同一个分区，确保该订单的消息顺序。</li></ul><p><strong>顺序队列（Ordered Queue）</strong>：</p><ul><li>一些消息队列系统（如 RabbitMQ）支持顺序队列，消息在队列中的存储顺序与投递顺序一致。<strong>如果使用单个顺序队列</strong>，消息将按顺序被消费。</li><li>可以使用多个顺序队列来提高并发处理能力，并使用特定规则将消息分配到不同的顺序队列中。</li></ul><p><strong>还有一个概念叫全部消息和局部消息：</strong></p><p>如果要保证消息的<strong>全局有序</strong>，首先只能由一个生产者往 Topic 发送消息，并且一个 Topic 内部只能有一个队列（分区）。消费者也必须是单线程消费这个队列。这样的消息就是全局有序的！</p><p>不过一般情况下我们都不需要全局有序，即使是同步 MySQL Binlog 也只需要保证<strong>单表</strong>消息有序即可。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503091204593.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>绝大部分的有序需求是<strong>部分有序</strong>，部分有序我们就可以将 Topic 内部划分成我们需要的队列数，把消息通过特定的策略发往固定的队列中，然后每个队列对应一个<mark>单线程</mark>处理的消费者。</p><p>例如同一个订单或用户的消息按顺序消费，而不同订单或用户之间的顺序不做保证。</p><p>这样即完成了部分有序的需求，又可以通过队列数量的并发来提高消息处理效率。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503091204128.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',15),g=[s];function a(e,l){return o(),n("div",null,g)}const c=t(r,[["render",a],["__file","5.Sequential messages.html.vue"]]);export{c as default};
