const t=JSON.parse('{"key":"v-d1c6f052","path":"/Java/basic/20.Deep%20copy%20and%20shallow%20copy.html","title":"深拷贝和浅拷贝","lang":"zh-CN","frontmatter":{"order":20,"author":null,"title":"深拷贝和浅拷贝","category":["Java基础"],"description":"引用拷贝： 浅拷贝： 在Java中Object提供了一个clone方法，一看名字就知道他和对象拷贝有关，该方法的访问修饰符为protected，如果子类不重写该方法，并将其声明为public，那外部就调用不了对象的clone()， 子类在重写时直接调用Object的clone()即可，它是native方法，底层已经实现饿了拷贝对象的逻辑，注意的是，子类...","head":[["meta",{"property":"og:url","content":"https://tim-qtp.github.io/blog/blog/Java/basic/20.Deep%20copy%20and%20shallow%20copy.html"}],["meta",{"property":"og:site_name","content":"Qtp"}],["meta",{"property":"og:title","content":"深拷贝和浅拷贝"}],["meta",{"property":"og:description","content":"引用拷贝： 浅拷贝： 在Java中Object提供了一个clone方法，一看名字就知道他和对象拷贝有关，该方法的访问修饰符为protected，如果子类不重写该方法，并将其声明为public，那外部就调用不了对象的clone()， 子类在重写时直接调用Object的clone()即可，它是native方法，底层已经实现饿了拷贝对象的逻辑，注意的是，子类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-09T15:59:15.000Z"}],["meta",{"property":"article:author","content":"tim-qtp"}],["meta",{"property":"article:modified_time","content":"2025-02-09T15:59:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深拷贝和浅拷贝\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T15:59:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"tim-qtp\\",\\"url\\":\\"https://github.com/tim-qtp/\\"}]}"]]},"headers":[],"git":{"createdTime":1739116755000,"updatedTime":1739116755000,"contributors":[{"name":"tim-qtp","email":"2469100031@qq.com","commits":1}]},"readingTime":{"minutes":2.47,"words":740},"filePathRelative":"Java/basic/20.Deep copy and shallow copy.md","localizedDate":"2025年2月9日","autoDesc":true,"excerpt":""}');export{t as data};
