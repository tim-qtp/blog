import{_ as e,W as t,X as a,a2 as r}from"./framework-48328e23.js";const c={},i=r('<h4 id="按照数据流方向划分" tabindex="-1"><a class="header-anchor" href="#按照数据流方向划分" aria-hidden="true">#</a> 按照数据流方向划分：</h4><ul><li>输入流（Input Stream）：从源（如文件、网络等）读取数据到程序。</li><li>输出流（Output Stream）：将数据从程序写出到目的地（如文件、网络、控制台等）。</li></ul><h4 id="按处理数据单位划分" tabindex="-1"><a class="header-anchor" href="#按处理数据单位划分" aria-hidden="true">#</a> 按处理数据单位划分：</h4><ul><li><p>字节流（Byte Streams）：以字节为单位读写数据，主要用于处理二进制数据，如音频、视频、图像文件等。</p><p>例如：通常使用字节流（如 Java 中的<code>FileInputStream</code>、<code>FileOutputStream</code>）来读取或写入数据，并且会尽量使用缓冲流（如<code>BufferedInputStream</code>、<code>BufferedOutputStream</code>）来提高读写效率。</p></li><li><p>字符流（Character Streams）：以字符为单位读写数据，主要用于处理文本数据。例如在大文本文件中查找某个字符串。</p><p>例如：<code>FileReader</code>、<code>FileWriter</code>。</p></li></ul><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/shangtou-01.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',5),o=[i];function d(l,n){return t(),a("div",null,o)}const s=e(c,[["render",d],["__file","26.IO Stream.html.vue"]]);export{s as default};
