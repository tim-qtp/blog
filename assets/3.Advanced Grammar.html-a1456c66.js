import{_ as n,W as s,X as a,a2 as t}from"./framework-48328e23.js";const p={},e=t(`<h2 id="一、结构体" tabindex="-1"><a class="header-anchor" href="#一、结构体" aria-hidden="true">#</a> 一、结构体</h2><p>上一章介绍了Rust中的一些基本语法，本章继续深入学习Rust中的一些高级特性。</p><p>首先要介绍的就是结构体，它的作用与上一章介绍的元组类似，可以用来存放一系列有关联、不同类型的数据。</p><p>如果你了解C/C++，那基本与<code>C/C++</code>中的结构体一致，或者与<code>python</code>中的字典类似。</p><p>使用方法如下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Student</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token keyword">u32</span><span class="token punctuation">,</span>
    sex<span class="token punctuation">:</span><span class="token keyword">char</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s<span class="token operator">=</span><span class="token class-name">Student</span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;yushi-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>
        sex<span class="token punctuation">:</span><span class="token char">&#39;男&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} {} {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是声明一个结构体，需要用<code>struct</code>关键字，后面紧跟结构体的名称，这里我给它取名为<code>Student</code>，因为要用它来保存学生的信息。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Student</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token keyword">u32</span><span class="token punctuation">,</span>
    sex<span class="token punctuation">:</span><span class="token keyword">char</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而大括号中的内容就是我们这个结构体的各种属性。</p><p>比如这里我们想要保存一个学生的信息，就有姓名、年龄、性别等等，也就是这里的<code>name</code>、<code>age</code>、<code>sex</code>。</p><p>由于这种声明类型<code>rust</code>的编译器无法为我们自动推断各个属性的类型，所以需要在其后面手动添加类型注解。</p><p>比如上面的<code>:String</code>、<code>:u32</code>以及<code>:char</code>，分别代表<strong>字符串</strong>类型、<strong>无符号整数</strong>类型、以及<strong>字符类型</strong>。</p><p>而各个属性之间用<code>,</code>分隔，一般我们习惯于将各个属性<strong>分行</strong>写，更好看。</p><p>这里出现了一个字符串类型<code>String</code>，前面没有提到过。</p><p>之所以没有提到，一是因为它并不是rust中的基本类型，二是因为<code>Rust</code>中的字符串类型非常复杂与强大，需要后面专门花一章对它介绍才能将其讲清楚，所以这里就暂时先用着，只需要知道它是保存字符串的就行了。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>比如<code>&quot;hello world&quot;</code>这种，用双引号包裹起来的就是字符串，但在<code>Rust</code>中又有一点不一样，我们后面再讨论。</p></div><p>声明好了这个结构体后，我们就可以像普通的类型那样，用它来定义一个变量：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> s<span class="token operator">=</span><span class="token class-name">Student</span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;qinyi-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>
        sex<span class="token punctuation">:</span><span class="token char">&#39;男&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与声明这个结构体时的写法类似，只是去除了前面的<code>struct</code>关键字，然后把大括号中的各个属性值后面的类型注解，更换为你要给它们赋的值就好了！</p><p>执行完上面的代码后，<code>s</code>变量就是一个我们自己的<code>Student</code>类型的变量了。</p><p>注意<code>String</code>类型中<code>name</code>属性的赋值方式，需要调用<code>String</code>里面的<code>from</code>方法将一个字符串转换为<code>String</code>。</p><p>这就是<code>Rust</code>中比较独特的方式，虽然看起来比较繁琐，但到后面你明白了它的原理，应该就能理解它这样做的理由了。</p><p>如果要访问这个变量中的各个字段，也非常的简单，只需要用<code>.</code>即可。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} {} {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如这里我就用<code>.</code>的方式访问它内部的三个字段，并进行了输出。</p><p>当然了，它默认同样是不可修改的，如果你想要对它进行修改，请使用<code>let mut</code>。</p><p>上面内容是结构体中最常见的用法，但事实上结构体还有其它形式，在一些开源代码中可能会经常看到。</p><p>比如你完全可以声明一个空的结构体：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">S</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虽然此时它内部没有任何属性、看起来没什么用处。</p><p>但当你学习了本章后面的“方法”后，就会发现它在某些时候还是有点用处的。</p><p>比如某些工具函数，本身并不需要什么属性，但为了方便调用，就可以将其绑定到指定的空结构体上。</p><p>除此之外，如果你的结构体字段并不需要“名字”，那么其实你可以像写元组那样写结构体的，就像下面这样：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">S</span><span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> t<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其使用方法和前面提到的元组非常像。</p><p>这种用法在一些开源库中用的尤其多，比如在<code>windows</code>这个crate中，很多源码的结构体都是通过这种方式定义的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>其实和java的类也挺相似的，不进行赋值，只定义一个框架。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">// 属性（成员变量）</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="二、枚举基础" tabindex="-1"><a class="header-anchor" href="#二、枚举基础" aria-hidden="true">#</a> 二、枚举基础</h2><h3 id="_1-枚举的基础用法" tabindex="-1"><a class="header-anchor" href="#_1-枚举的基础用法" aria-hidden="true">#</a> 1. <strong>枚举的基础用法</strong></h3><p>枚举的主要作用是<strong>限制输入选项</strong>。比如 IP 地址只有两种类型：<code>IPv4</code> 和 <code>IPv6</code>，不可能有第三种类型。</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例：</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">IP</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ipv4</span><span class="token punctuation">,</span>
    <span class="token class-name">Ipv6</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> m<span class="token punctuation">:</span> <span class="token constant">IP</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个 IP 类型的变量</span>
    m <span class="token operator">=</span> <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv4</span><span class="token punctuation">;</span>  <span class="token comment">// 正确</span>
    m <span class="token operator">=</span> <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv6</span><span class="token punctuation">;</span>  <span class="token comment">// 正确</span>
    <span class="token comment">// m = 11;      // 错误，m 只能是 IP::Ipv4 或 IP::Ipv6</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>enum IP</code> 定义了一个枚举类型，包含两个变体：<code>Ipv4</code> 和 <code>Ipv6</code>。</li><li>变量 <code>m</code> 只能是 <code>IP::Ipv4</code> 或 <code>IP::Ipv6</code>，不能是其他值。</li></ul><hr><h3 id="_2-枚举的限制作用" tabindex="-1"><a class="header-anchor" href="#_2-枚举的限制作用" aria-hidden="true">#</a> 2. <strong>枚举的限制作用</strong></h3><p>枚举可以限制变量的取值范围。比如函数参数只能是枚举中定义的变体。</p><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例：</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">test_ip</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token constant">IP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> t <span class="token punctuation">{</span>
        <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv4</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;传入的是 IPv4 类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv6</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;传入的是 IPv6 类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">test_ip</span><span class="token punctuation">(</span><span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入的是 IPv4 类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数 <code>test_ip</code> 的参数 <code>t</code> 只能是 <code>IP::Ipv4</code> 或 <code>IP::Ipv6</code>。</li><li>使用 <code>match</code> 来匹配枚举的变体，并执行相应的逻辑。</li></ul><h2 id="三、枚举进阶" tabindex="-1"><a class="header-anchor" href="#三、枚举进阶" aria-hidden="true">#</a> 三、枚举进阶</h2><p>携带数据，Rust 的枚举可以携带数据，这使得枚举更加强大。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">IP</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ipv4</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// IPv4 携带 4 个 u8 类型的数字</span>
    <span class="token class-name">Ipv6</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">// IPv6 携带一个 String 类型的地址</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ipv4 <span class="token operator">=</span> <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv4</span><span class="token punctuation">(</span><span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IPv4 地址</span>
    <span class="token keyword">let</span> ipv6 <span class="token operator">=</span> <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv6</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;fdb8:27c5:221:5400:2c95:a7fc:5d57:a375&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IPv6 地址</span>

    <span class="token function">test_ip</span><span class="token punctuation">(</span>ipv4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">test_ip</span><span class="token punctuation">(</span>ipv6<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">test_ip</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token constant">IP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> t <span class="token punctuation">{</span>
        <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv4</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;传入的是 IPv4 类型: {}.{}.{}.{}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv6</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;传入的是 IPv6 类型: {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Ipv4</code> 变体携带 4 个 <code>u8</code> 类型的数字，表示 IPv4 地址。</li><li><code>Ipv6</code> 变体携带一个 <code>String</code> 类型的地址，表示 IPv6 地址。</li><li>使用 <code>match</code> 可以解构枚举变体并访问携带的数据。</li></ul><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503091715274.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同时由于前面声明枚举类型的时候，我们就已经写好了其携带的参数类型，所以这里填写变量名后无需写参数的类型注解，rust的编译器可以自行为我们推断出来它的类型。</p><p>但每次都写match还是有点过于繁琐了，比如很多时候我就只想知道它是否等于某个类型。</p><p>那么就可以使用语法糖<code>if let</code>了：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503091717914.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这和<code>match</code>其实是类似的，你可以这样理解它的工作流程：</p><p><code>if</code>就是“如果”，<code>let</code>就是“让”，结合起来的意思就是“如果让<code>IP::Ipv4(a,b,c,d)</code>等于了t”，那么就执行后面的语句。</p><p>通过在<code>if</code>后面添加<code>let</code>的方式，就能实现简化代码、同时也能取出枚举所携带的数据。</p><p>包括<code>else if</code>同样可以后面添加<code>let</code>的方式继续分支判断。</p><p>只不过大多数情况下，我们仅在需要判断枚举是否等于某个类型时才会使用<code>if let</code>语法。</p><p>所以如果你确实需要为枚举所有可能的分支进行处理，那么最好还是使用<code>match</code>。</p><p>至于分支太多的情况，你可以使用<code>_</code>进行默认处理：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503091718882.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="四、方法基础" tabindex="-1"><a class="header-anchor" href="#四、方法基础" aria-hidden="true">#</a> 四、方法基础</h2><p>C++、java、python等语言，它们里面都有类的概念，而<code>Rust</code>中并<mark>没有类</mark>的概念，但可以通过这里所说的方法，来实现其它语言中类的特性。</p><p>比如以本章第一小节介绍结构体所展示的代码：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Student</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token keyword">u32</span><span class="token punctuation">,</span>
    sex<span class="token punctuation">:</span><span class="token keyword">char</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我想要输出它，我就不得不每次都要像下面这样去挨个取值：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} {} {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>学习了前面的函数之后，我们自然就可以通过定义一个函数来简化这种行为：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> s<span class="token operator">=</span><span class="token class-name">Student</span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>
        sex<span class="token punctuation">:</span><span class="token char">&#39;男&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span><span class="token function">stu_to_str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">stu_to_str</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}-{}-{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里通过定义一个函数<code>stu_to_str</code>，将传入的值，转化为一个字符串，并返回。</p><p>前面我们已经用过了<code>println!</code>，只要后面带有<code>!</code>就代表这是一个宏，这里的<code>format!</code>同样也是一个宏，其使用方法与<code>println</code>一样。</p><p>只不过其作用是将内容格式化为一个字符串并返回，而前者是将格式化好的字符串打印到控制台上。</p><blockquote><p>后面讲到宏的时候，我们会再来探究它的实现原理。</p></blockquote><p>总之就是，通过这种方式，我们就实现了简化输出的步骤。</p><p>注意，对于同一个变量，不能调用两次这个函数，否则必然会报错：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503091745578.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从这里我们可以注意到，这个<code>stu_to_str</code>只有唯一一个参数，那就是<code>Student</code>类型，换句话来说就是，这个<mark>函数</mark>是和这个<mark>结构体</mark>绑定了的。</p><p>因为除却这个结构体外，你无法使用其它结构体来调用这个函数。</p><p>为了简化这一过程，rust就出现了<mark>方法</mark>这一个概念，其目的就是，既然这个方法只能用于这个结构体，那就直接显式的将其绑定起来好了！</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Student</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token keyword">u32</span><span class="token punctuation">,</span>
    sex<span class="token punctuation">:</span><span class="token keyword">char</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">to_str</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}-{}-{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要为某个结构体显式的绑定方法，需要用到<code>impl</code>（<code>implementation</code>，实现）关键字，后面紧跟你想要绑定的结构体，然后在后面的大括号里面，写上你想为它绑定的函数即可。</p><p>比如这里的<code>impl</code>后面的关键字就是<code>Student</code> ，意思就是为它绑定（实现）方法。</p><p>其内部的方法，与原本的函数几乎是完全一致的。唯一不同的就是将原本的参数<code>s:Student</code>改为了<code>self</code>。</p><p>这同样是<code>rust</code>中的关键字，其意思是“自己”，本质上是这种写法的简写：<code>self: Self</code>。</p><p>前面这个小写的<code>self</code>是参数变量名，而后面的<code>Self</code>才是它的类型，这里的大写<code>Self</code>，代指前面<code>impl</code>关键字后面的结构体，所以在这里它就等价于<code>Student</code>。</p><p>这样绑定了之后，这个<code>self</code>参数就指代了任何调用这个函数的变量本身，调用方法如下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> s<span class="token operator">=</span><span class="token class-name">Student</span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>
        sex<span class="token punctuation">:</span><span class="token char">&#39;男&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Student</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token keyword">u32</span><span class="token punctuation">,</span>
    sex<span class="token punctuation">:</span><span class="token keyword">char</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">to_str</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}-{}-{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503091844152.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>也就是通过<code>.</code>的方式，就可以调用绑定到它自己本身的方法了：<code>s.to_str()</code></p><p>但明明这个函数有一个参数啊，这里没有填入参数怎么还能调用呢？</p><p>因为这个<code>.</code>运算符号，会将前面的这个<code>s</code>变量，默认作为第一个参数传入，这样绑定之后，你就会发现，调用属于它自己的函数就变得非常方便了！</p><p>甚至<code>vscode</code>还能直接给我们做出提示信息：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503091845097.png" alt="=" tabindex="0" loading="lazy"><figcaption>=</figcaption></figure><p>但绑定的方法并非必须含有<code>self</code>参数，比如像下面这样：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token keyword">u32</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span> 
            name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> 
            age<span class="token punctuation">:</span> age<span class="token punctuation">,</span> 
            sex<span class="token punctuation">:</span> sex
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里写了一个<code>new</code>函数，参数就是三个数据，然后通过这三个数据返回一个<code>Student</code>类型，就没有包含<code>self</code>参数。</p><p>注意，如果你要包含<code>self</code>参数，那就必须是在第一个，其它参数都只能写在它之后。</p><p>它的作用就是构造一个<code>Student</code>类型的变量，一旦没有包含<code>self</code>，那么其使用方法就变得不一样了：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> s<span class="token operator">=</span><span class="token class-name">Student</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;yushi-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token char">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要使用这种不带<code>self</code>参数的函数，就必须用<code>::</code>符号进行调用。</p><p>看到这里，现在你是不是就有些理解<code>String</code>中的<code>from</code>函数了？其本质上作用与我们这里的<code>new</code>函数一样，就是用一些参数来构造本类型的。</p><p>这是最常见的用法，事实上<code>String</code>中也有一个<code>new</code>函数，用来构造一个空字符串，这个后面再提。</p><p>官方称它为<strong>关联函数</strong>（因为<strong>方法</strong>的第一参数必须是<code>self</code>，用于关联调用者本身）</p><p>这和C++中的静态函数类似，而方法，则可以类比为C++类中的成员函数。</p><p>事实上C++中的类，其成员函数实现方式也是用的这一套逻辑（有一个隐藏的参数作为第一个参数，我们称其为<code>this</code>指针），只不过<code>C++</code>没有像<code>rust</code>这样为我们暴露出来而已。</p><h2 id="五、方法与枚举" tabindex="-1"><a class="header-anchor" href="#五、方法与枚举" aria-hidden="true">#</a> 五、方法与枚举</h2><p>虽然方法大部分时候都是与结构体相互结合使用的，但实际上方法也可以与枚举一起结合使用，使用逻辑基本一致。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">IP</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ipv4</span><span class="token punctuation">,</span>
    <span class="token class-name">Ipv6</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token constant">IP</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv4</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;这是ipv4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv6</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;这是ipv6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时其内的函数参数<code>self</code>便是本身这个枚举，因此要对其做任何处理时，一般会用match语法对不同的类型做不同的处理逻辑。</p><p>使用方式如下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ip <span class="token operator">=</span> <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv4</span><span class="token punctuation">;</span>
    ip<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ip <span class="token operator">=</span> <span class="token constant">IP</span><span class="token punctuation">::</span><span class="token class-name">Ipv6</span><span class="token punctuation">;</span>
    ip<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,116),c=[e];function o(i,l){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","3.Advanced Grammar.html.vue"]]);export{d as default};
