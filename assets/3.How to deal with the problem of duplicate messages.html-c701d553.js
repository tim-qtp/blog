import{_ as e,W as s,X as a,a2 as n}from"./framework-48328e23.js";const t={},o=n(`<p>只有让消费者的处理逻辑具有<strong>幂等性</strong>，保证无论同一条消息被消费多少次，结果都是一样的，从而避免因重复消费带来的副作用。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>网络通信里存在两种行为可能会导致接口被重复调用</p><p>用户的重复提交或恶意攻击</p><p>分布式架构下，为了避免网络导致的数据丢失，设计超时重置机制</p></div><h3 id="什么是幂等性" tabindex="-1"><a class="header-anchor" href="#什么是幂等性" aria-hidden="true">#</a> 什么是幂等性</h3><p>幂等性是指一个操作无论执行多少次，产生的结果都是一样的。例如，HTTP 的 PUT 方法是幂等的，因为无论对同一资源执行多少次 PUT 操作，结果都是相同的。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> t1 <span class="token keyword">set</span> money <span class="token operator">=</span> <span class="token number">150</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> money <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行多少遍 money 都是 150，这就叫幂等。</p><h3 id="如何幂等处理重复消息" tabindex="-1"><a class="header-anchor" href="#如何幂等处理重复消息" aria-hidden="true">#</a> 如何幂等处理重复消息</h3><p>需要改造业务处理逻辑，使得在重复消息的情况下也不会影响最终的结果。</p><p>主要是<strong>利用唯一标识（ID）去重</strong>。</p><p>在消息中引入全局唯一 ID，例如 UUID、订单号等，利用 redis 等缓存，或者数据库来存储消息 ID，然后消费者在处理消息时可以检查该消息 ID 是否存在代表此消息是否已经处理过。</p><p><strong>去重缓存的使用</strong>：</p><ul><li>使用 Redis 的 <code>SETNX</code> 指令处理的消息 ID，以减少数据库的查询压力。</li><li>可以为 Redis 中的去重记录设置过期时间，例如 7 天，以便自动清理历史消息，减小存储压力。</li></ul><p><strong>去重表的设计</strong>：</p><ul><li>在数据库中创建一张去重表，用来存储已处理消息的 ID 及处理时间。在消费每条消息前，先查询该表。</li><li>对于高并发场景，可以结合数据库的唯一索引来避免多次插入同一个消息 ID（<code>insert into update on duplicate key...</code>），确保去重表中的记录唯一。</li></ul><p>此外，一些触发数据库修改操作的消息，可以像上述举例的 SQL 一样，做了个<strong>前置条件判断</strong>，即 money = 100 这样的条件直接修改，这样无论执行多少次都不影响。</p>`,15),p=[o];function r(l,i){return s(),a("div",null,p)}const c=e(t,[["render",r],["__file","3.How to deal with the problem of duplicate messages.html.vue"]]);export{c as default};
