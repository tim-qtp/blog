import{_ as n,W as s,X as a,a2 as e}from"./framework-6a3aa88c.js";const t={},p=e(`<p>工厂模式的核心思想是我不直接创建对象，而是让一个专门的‘工厂’帮我创建对象。”**这样做的好处是代码更加灵活，扩展性更强，而且可以隐藏对象的创建细节。</p><h3 id="工厂模式的核心概念" tabindex="-1"><a class="header-anchor" href="#工厂模式的核心概念" aria-hidden="true">#</a> 工厂模式的核心概念</h3><ol><li><strong>客户端（Client）</strong>：需要使用对象的地方。</li><li><strong>工厂（Factory）</strong>：负责创建对象的地方。</li><li><strong>产品（Product）</strong>：被创建的对象。</li></ol><h3 id="工厂模式的类型" tabindex="-1"><a class="header-anchor" href="#工厂模式的类型" aria-hidden="true">#</a> 工厂模式的类型</h3><p>工厂模式有几种变体，比如<strong>简单工厂模式</strong>、<strong>工厂方法模式</strong>和<strong>抽象工厂模式</strong>。我们先从最简单的开始讲起。</p><hr><h2 id="_1-简单工厂模式" tabindex="-1"><a class="header-anchor" href="#_1-简单工厂模式" aria-hidden="true">#</a> 1. 简单工厂模式</h2><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h3><p>假设你开了一家冰淇淋店，顾客可以点不同口味的冰淇淋。如果你直接在代码中写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>flavor<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;vanilla&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VanillaIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flavor<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;chocolate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChocolateIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样代码会很混乱，而且每次新增口味都要修改代码。这时候就可以用简单工厂模式。</p><h3 id="实现代码" tabindex="-1"><a class="header-anchor" href="#实现代码" aria-hidden="true">#</a> 实现代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 产品接口：冰淇淋</span>
<span class="token keyword">interface</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体产品：香草冰淇淋</span>
<span class="token keyword">class</span> <span class="token class-name">VanillaIceCream</span> <span class="token keyword">implements</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃了一碗香草冰淇淋！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体产品：巧克力冰淇淋</span>
<span class="token keyword">class</span> <span class="token class-name">ChocolateIceCream</span> <span class="token keyword">implements</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃了一碗巧克力冰淇淋！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 工厂类：冰淇淋工厂</span>
<span class="token keyword">class</span> <span class="token class-name">IceCreamFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IceCream</span> <span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token class-name">String</span> flavor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flavor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flavor<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;vanilla&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VanillaIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flavor<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;chocolate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChocolateIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端代码</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 客户端不需要直接创建对象，而是通过工厂获取</span>
        <span class="token class-name">IceCream</span> iceCream <span class="token operator">=</span> <span class="token class-name">IceCreamFactory</span><span class="token punctuation">.</span><span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token string">&quot;vanilla&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iceCream<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：吃了一碗香草冰淇淋！</span>

        <span class="token class-name">IceCream</span> anotherIceCream <span class="token operator">=</span> <span class="token class-name">IceCreamFactory</span><span class="token punctuation">.</span><span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token string">&quot;chocolate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        anotherIceCream<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：吃了一碗巧克力冰淇淋！</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="大白话解释" tabindex="-1"><a class="header-anchor" href="#大白话解释" aria-hidden="true">#</a> 大白话解释</h3><ul><li><strong>产品</strong>：冰淇淋，有香草味和巧克力味。</li><li><strong>工厂</strong>：冰淇淋工厂，负责根据顾客的需求（香草味或巧克力味）创建对应的冰淇淋。</li><li><strong>客户端</strong>：顾客，只需要告诉工厂要什么口味，工厂会帮你准备好。</li></ul><p><strong>好处</strong>：如果未来要增加草莓味冰淇淋，只需要在工厂里加一个分支：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flavor<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;strawberry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StrawberryIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不需要修改客户端代码。</p><hr><h2 id="_2-工厂方法模式" tabindex="-1"><a class="header-anchor" href="#_2-工厂方法模式" aria-hidden="true">#</a> 2. 工厂方法模式</h2><h3 id="场景-1" tabindex="-1"><a class="header-anchor" href="#场景-1" aria-hidden="true">#</a> 场景</h3><p>简单工厂模式看起来很好，但如果冰淇淋的种类越来越多，工厂类会变得很臃肿（很多 <code>if-else</code>）。工厂方法模式则把创建对象的逻辑分散到不同的子类中。</p><h3 id="实现代码-1" tabindex="-1"><a class="header-anchor" href="#实现代码-1" aria-hidden="true">#</a> 实现代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 产品接口：冰淇淋</span>
<span class="token keyword">interface</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体产品：香草冰淇淋</span>
<span class="token keyword">class</span> <span class="token class-name">VanillaIceCream</span> <span class="token keyword">implements</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃了一碗香草冰淇淋！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体产品：巧克力冰淇淋</span>
<span class="token keyword">class</span> <span class="token class-name">ChocolateIceCream</span> <span class="token keyword">implements</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃了一碗巧克力冰淇淋！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 工厂接口：冰淇淋工厂</span>
<span class="token keyword">interface</span> <span class="token class-name">IceCreamFactory</span> <span class="token punctuation">{</span>
    <span class="token class-name">IceCream</span> <span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体工厂：香草冰淇淋工厂</span>
<span class="token keyword">class</span> <span class="token class-name">VanillaIceCreamFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IceCreamFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IceCream</span> <span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VanillaIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体工厂：巧克力冰淇淋工厂</span>
<span class="token keyword">class</span> <span class="token class-name">ChocolateIceCreamFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IceCreamFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IceCream</span> <span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChocolateIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端代码</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 客户端通过具体的工厂来创建对象</span>
        <span class="token class-name">IceCreamFactory</span> vanillaFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VanillaIceCreamFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IceCream</span> vanillaIceCream <span class="token operator">=</span> vanillaFactory<span class="token punctuation">.</span><span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vanillaIceCream<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：吃了一碗香草冰淇淋！</span>

        <span class="token class-name">IceCreamFactory</span> chocolateFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChocolateIceCreamFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IceCream</span> chocolateIceCream <span class="token operator">=</span> chocolateFactory<span class="token punctuation">.</span><span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chocolateIceCream<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：吃了一碗巧克力冰淇淋！</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="大白话解释-1" tabindex="-1"><a class="header-anchor" href="#大白话解释-1" aria-hidden="true">#</a> 大白话解释</h3><ul><li><strong>工厂接口</strong>：冰淇淋工厂的通用接口，定义了“创建冰淇淋”的方法。</li><li><strong>具体工厂</strong>：每个口味的冰淇淋都有自己的工厂（香草工厂、巧克力工厂）。每个工厂只负责创建一种冰淇淋。</li><li><strong>客户端</strong>：顾客只需要选择一个工厂（比如香草工厂），工厂会自动帮你创建对应的冰淇淋。</li></ul><p><strong>好处</strong>：如果新增草莓冰淇淋，只需要新增一个 <code>StrawberryIceCream</code> 类和一个 <code>StrawberryIceCreamFactory</code> 类，不需要修改现有代码。这样代码的扩展性更好。</p><hr><h2 id="_3-抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#_3-抽象工厂模式" aria-hidden="true">#</a> 3. 抽象工厂模式</h2><h3 id="场景-2" tabindex="-1"><a class="header-anchor" href="#场景-2" aria-hidden="true">#</a> 场景</h3><p>假设你的冰淇淋店不仅卖冰淇淋，还卖冰沙。简单工厂和工厂方法模式只能创建同一种类型的产品（比如只创建冰淇淋）。抽象工厂模式则可以同时创建多种相关的产品（比如同时创建冰淇淋和冰沙）。</p><h3 id="实现代码-2" tabindex="-1"><a class="header-anchor" href="#实现代码-2" aria-hidden="true">#</a> 实现代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 冰淇淋接口</span>
<span class="token keyword">interface</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 香草冰淇淋</span>
<span class="token keyword">class</span> <span class="token class-name">VanillaIceCream</span> <span class="token keyword">implements</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃了一碗香草冰淇淋！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 巧克力冰淇淋</span>
<span class="token keyword">class</span> <span class="token class-name">ChocolateIceCream</span> <span class="token keyword">implements</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃了一碗巧克力冰淇淋！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 冰沙接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Slush</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 香草冰沙</span>
<span class="token keyword">class</span> <span class="token class-name">VanillaSlush</span> <span class="token keyword">implements</span> <span class="token class-name">Slush</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;喝了一杯香草冰沙！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 巧克力冰沙</span>
<span class="token keyword">class</span> <span class="token class-name">ChocolateSlush</span> <span class="token keyword">implements</span> <span class="token class-name">Slush</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;喝了一杯巧克力冰沙！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 抽象工厂接口</span>
<span class="token keyword">interface</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">{</span>
    <span class="token class-name">IceCream</span> <span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Slush</span> <span class="token function">createSlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 香草工厂</span>
<span class="token keyword">class</span> <span class="token class-name">VanillaFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IceCream</span> <span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VanillaIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Slush</span> <span class="token function">createSlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VanillaSlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 巧克力工厂</span>
<span class="token keyword">class</span> <span class="token class-name">ChocolateFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DessentFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IceCream</span> <span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChocolateIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Slush</span> <span class="token function">createSlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChocolateSlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 客户端代码</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 选择香草工厂</span>
        <span class="token class-name">DessertFactory</span> vanillaFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VanillaFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IceCream</span> vanillaIceCream <span class="token operator">=</span> vanillaFactory<span class="token punctuation">.</span><span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Slush</span> vanillaSlush <span class="token operator">=</span> vanillaFactory<span class="token punctuation">.</span><span class="token function">createSlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vanillaIceCream<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：吃了一碗香草冰淇淋！</span>
        vanillaSlush<span class="token punctuation">.</span><span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：喝了一杯香草冰沙！</span>

        <span class="token comment">// 选择巧克力工厂</span>
        <span class="token class-name">DessertFactory</span> chocolateFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChocolateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IceCream</span> chocolateIceCream <span class="token operator">=</span> chocolateFactory<span class="token punctuation">.</span><span class="token function">createIceCream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Slush</span> chocolateSlush <span class="token operator">=</span> chocolateFactory<span class="token punctuation">.</span><span class="token function">createSlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chocolateIceCream<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：吃了一碗巧克力冰淇淋！</span>
        chocolateSlush<span class="token punctuation">.</span><span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：喝了一杯巧克力冰沙！</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="大白话解释-2" tabindex="-1"><a class="header-anchor" href="#大白话解释-2" aria-hidden="true">#</a> 大白话解释</h3><ul><li><strong>产品族</strong>：冰淇淋和冰沙是一对相关的产品，香草工厂可以同时生产香草冰淇淋和香草冰沙，巧克力工厂可以同时生产巧克力冰淇淋和巧克力冰沙。</li><li><strong>抽象工厂接口</strong>：定义了“创建冰淇淋”和“创建冰沙”的方法。</li><li><strong>具体工厂</strong>：每个工厂（香草工厂、巧克力工厂）都可以创建一组相关的产品。</li><li><strong>客户端</strong>：顾客只需要选择一个工厂，就可以同时获得冰淇淋和冰沙。</li></ul><p><strong>好处</strong>：如果新增草莓口味，只需要新增一个草莓工厂，而不需要修改现有代码。同时，抽象工厂模式可以创建一组相关的产品，而不是单一的产品。</p><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li><strong>简单工厂模式</strong>：用一个工厂类来创建对象，但扩展性较差（太多 <code>if-else</code>）。</li><li><strong>工厂方法模式</strong>：用多个工厂类</li></ol><h2 id="_4-实际java开发中-有哪些常用的工厂模式呢" tabindex="-1"><a class="header-anchor" href="#_4-实际java开发中-有哪些常用的工厂模式呢" aria-hidden="true">#</a> 4. 实际java开发中，有哪些常用的工厂模式呢</h2><h3 id="_1-spring-框架" tabindex="-1"><a class="header-anchor" href="#_1-spring-框架" aria-hidden="true">#</a> 1. <strong>Spring 框架</strong></h3><ul><li><strong><code>BeanFactory</code> 和 <code>ApplicationContext</code></strong>：Spring 的核心功能之一，通过配置（注解或XML）动态创建和管理Bean。客户端代码通过工厂获取Bean实例，而无需关心具体的创建细节。</li></ul><hr><h3 id="_2-jdbc-的-drivermanager" tabindex="-1"><a class="header-anchor" href="#_2-jdbc-的-drivermanager" aria-hidden="true">#</a> 2. <strong>JDBC 的 <code>DriverManager</code></strong></h3><ul><li><strong>数据库连接工厂</strong>：<code>DriverManager</code> 根据数据库URL、用户名和密码，动态创建数据库连接（<code>Connection</code>）。客户端代码只需要调用 <code>DriverManager.getConnection()</code>，而无需直接管理连接的创建过程。</li></ul>`,45),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","3.Factory Pattern.html.vue"]]);export{r as default};
