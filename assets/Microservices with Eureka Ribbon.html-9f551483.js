import{_ as l,W as c,X as r,$ as n,a0 as a,Z as s,a1 as t,a2 as p,C as o}from"./framework-6a3aa88c.js";const u={},d=p('<h2 id="一、微服务导学" tabindex="-1"><a class="header-anchor" href="#一、微服务导学" aria-hidden="true">#</a> 一、微服务导学</h2><h3 id="_1、概览" tabindex="-1"><a class="header-anchor" href="#_1、概览" aria-hidden="true">#</a> 1、概览：</h3><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/9e03be9ace3df54ae76f9ff5592ba41e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个大型的互联网项目往往会包含数百上千的服务，最终形成一个集群，而一个业务往往会需要有多个服务来共同来完成。一个请求来了，它会调服务a，服务a又去调了服务b，而后又调了服务c，当业务越来越多、越来越复杂的时候，这些服务之间的调用关系就会越来越复杂，想靠人去记录和维护是不可能的。</p><h3 id="_2、注册中心" tabindex="-1"><a class="header-anchor" href="#_2、注册中心" aria-hidden="true">#</a> <strong>2、注册中心：</strong></h3><p>记录微服务中的每一个服务的ip端口，以及它能干什么事这些信息。当一个服务需要调用另一个服务的时候，它不需要自己去记录对方的ip，只需要去找注册中心就行，去那里拉取对应的服务信息。</p><h3 id="_3、配置文件" tabindex="-1"><a class="header-anchor" href="#_3、配置文件" aria-hidden="true">#</a> <strong>3、配置文件：</strong></h3><p>每个服务都有自己的配置文件，后面要修改配置文件，难道要逐一修改吗？不需要，统一管理。</p><blockquote><p>需要修改的时候，会通知相关的微服务实现<mark>配置的热更新</mark>。</p></blockquote><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/ff9e1bf14637fcd00ecd5c40c1386b50.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4、排查" tabindex="-1"><a class="header-anchor" href="#_4、排查" aria-hidden="true">#</a> 4、排查:</h3><p>在运行的过程中，如果出现了什么问题，不太好<strong>排查</strong>，所以我们还会引入两个新的组件来解决这种服务的异常定位。</p><ol><li>**分布式日志服务：**是指将分散在多个服务器上的日志进行统一的收集、存储、查询和分析。通过采集系统各个节点的日志数据，并将其按一定格式整合存储，开发人员可以轻松地追踪和排查系统问题，同时也可以利用日志数据监控系统运行状态和性能指标，实现对系统的实时监控和预警。</li><li>**系统链路追踪：**是一种分布式系统监控技术，通过记录系统中每个请求的处理流程和性能数据，来协助开发人员快速定位和解决问题，优化系统性能。它可以帮助我们提高系统可观测性、定位延迟问题、优化服务调用链、跟踪用户行为和异常等，是大型分布式系统中必不可少的技术手段。</li></ol><h3 id="_5、部署" tabindex="-1"><a class="header-anchor" href="#_5、部署" aria-hidden="true">#</a> 5、部署：</h3><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/2817efbf80c86b114fc5ede7fa08eee1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>Jenkins</strong>是一种持续集成工具，用于自动化构建、测试和部署软件。 <strong>Docker</strong>是一种容器化技术，将应用程序及其依赖项打包为容器，实现软件的跨平台部署。 <strong>Kubernetes</strong>是一个开源的容器编排平台，用于管理Docker容器集群。 <strong>Rancher</strong>是一个基于Kubernetes的容器管理平台，提供可视化的用户界面和自动化的部署。</p><p>它们之间的关系是：Jenkins用于自动化构建和测试代码，并将构建后的镜像推送到Docker仓库；Docker将应用程序及其依赖项打包为容器，并通过Kubernetes进行集群部署和管理；Rancher则提供了可视化的用户界面和自动化的部署来管理Kubernetes集群。总体来说，这些技术都致力于实现高效、可靠和可扩展的应用部署和管理。</p></blockquote><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/8089edced18021cd9467b6fc1a36bb44.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/10df806382af8daffef5283bdd4a5e86.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/18257c49cd68a41b8e839ebfba39ab57.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、架构演变-技术对比-springcloud" tabindex="-1"><a class="header-anchor" href="#二、架构演变-技术对比-springcloud" aria-hidden="true">#</a> 二、架构演变，技术对比，SpringCloud</h2><h3 id="_1、单体架构" tabindex="-1"><a class="header-anchor" href="#_1、单体架构" aria-hidden="true">#</a> <strong>1、单体架构：</strong></h3><p>将业务的所有功能集中在一个项目中开发，打成一个包部署。</p><p><strong>优点：</strong></p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点：</strong></p><ul><li>耦合度高：拼多多&amp;淘宝，服务可就不是两三个模块了，可能是几十上百个模块，代码不是几千行，而是数十万行，代码编译打包都得十几分钟。而且，模块太多，你中有我，我中有你，边界模糊，改一个地方的代码，可能要牵连很多地方，所以不敢乱动代码，耦合度太高。</li></ul><h3 id="_2、分布式架构" tabindex="-1"><a class="header-anchor" href="#_2、分布式架构" aria-hidden="true">#</a> <strong>2、分布式架构：</strong></h3><p>根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。 <strong>优点：</strong></p><ul><li>降低服务耦合</li><li>有利于服务升级拓展</li></ul><p>后面拆分好的机器还想保证高可用，又得做集群，</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/d57936d061ece21106518254c20d6080.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><mark>单体</mark>的时候，下单的时候需要商品信息，怎么办，你不是有一个service么，<mark>我直接调你就行了</mark>，因为在一个项目里，大家可以互相调</p></blockquote><p>分布式架构的要考虑的问题：</p><ul><li><mark>服务拆分粒度如何</mark>？哪几个服务单独作为模块开发，哪些业务在一起呢，这个粒度需要你去把握。</li><li>==服务集群地址如何维护？==100个(支付模块)ip地址，别人怎么调，万一上线变了，怎么办，改？地址必须是方便维护的。</li><li>==服务之间如何实现远程调用？==RPC跨服务的调用啊，我可没学过。</li><li>==服务健康状态如何感知？==我调你，怎么能知道你上百个服务是好的呢？万一你挂了我调你，结果阻塞了，导致级联失败。</li></ul><h3 id="_3、认识微服务" tabindex="-1"><a class="header-anchor" href="#_3、认识微服务" aria-hidden="true">#</a> <strong>3、认识微服务：</strong></h3><p>**微服务：**是一种经过<code>良好架构</code>设计的<code>分布式</code>架构方案，微服务架构特征：</p>',36),g=n("li",null,"面向服务：微服务对外暴露业务接口",-1),k=n("li",null,"隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题",-1),m=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STCAIYUN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是华文彩云<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><tr><td bgcolor="orange">背景色是：orange</td></tr></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>orange</span><span class="token punctuation">&gt;</span></span>背景色是：orange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/9f79daaa743f9ee59c9d19d26ca83fbc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/3fee3e7a65c4a2a056ef3f5c90ab067a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4、服务拆分注意事项" tabindex="-1"><a class="header-anchor" href="#_4、服务拆分注意事项" aria-hidden="true">#</a> <strong>4、服务拆分注意事项：</strong></h3><ol><li>单一职责：不同微服务，不要重复开发相同业务</li><li>数据独立：不要访问其它微服务的数据库</li><li>面向服务：将自己的业务暴露为接口，供其它微服务调用</li></ol><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/7a435c05b75729fb457fa128e525b2f0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5、springcloud版本" tabindex="-1"><a class="header-anchor" href="#_5、springcloud版本" aria-hidden="true">#</a> <strong>5、SpringCloud版本：</strong></h3><p>基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验，所以才能推广开来。<img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/7f0061094d5d7f226b41d94f5052ad1a.png" alt="" loading="lazy"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;spring-cloud&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token property">&quot;Hoxton.SR12&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.4.0.RELEASE&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;2020.0.6&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Spring Boot &gt;=2.4.0.RELEASE and &lt;2.6.0&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;2021.0.7&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Spring Boot &gt;=2.6.0 and &lt;3.0.0&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;2022.0.3&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Spring Boot &gt;=3.0.0 and &lt;3.2.0-M1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;mybatis&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token property">&quot;2.1.4&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.5.0-M1&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;2.2.2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Spring Boot &gt;=2.5.0-M1 and &lt;2.7.0-M1&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;2.3.1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Spring Boot &gt;=2.7.0-M1 and &lt;3.0.0-M1&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;3.0.2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Spring Boot &gt;=3.0.0-M1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。</p><p>可以自己点上方 View--Tool Windows--Services，弹出来后点那个加号点那个Type选springboot。</p><h3 id="_6、服务拆分及远程调用" tabindex="-1"><a class="header-anchor" href="#_6、服务拆分及远程调用" aria-hidden="true">#</a> <strong>6、服务拆分及远程调用：</strong></h3><table><tr><td bgcolor="orange">注意： mybatis: type-aliases-package:这个注解有什么作用?</td></tr></table><p><code>type-aliases-package</code>是MyBatis的一个配置项，用于指定类型别名所在的包路径。</p><p>​ 在Java代码中，我们经常需要使用全限定类名来引用某个类，但如果类名过长或者使用频繁，这样的代码可读性就比较差。为了让代码更加简洁易读，MyBatis引入了类型别名的概念。</p><p>类型别名就是为Java类取一个短小的名称，代替完整的类名。通常情况下，类型别名与类名同名。例如，我们有一个名为<code>cn.itcast.user.pojo.User</code>的JavaBean类，可以在MyBatis配置文件中使用如下方式指定该类的类型别名：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;typeAliases&gt;
  &lt;typeAlias type=&quot;cn.itcast.user.pojo.User&quot; alias=&quot;User&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这样，我们在写MyBatis映射文件时，就可以使用<code>&lt;resultMap&gt;</code>等标签直接使用<code>User</code>作为返回结果集的类型了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;resultMap type=&quot;User&quot; id=&quot;userMap&quot;&gt;
  &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
  &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
  &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;
&lt;/resultMap&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 但是如果有很多JavaBean需要在MyBatis配置文件中作为返回结果集的类型，就需要逐个为它们设置类型别名，非常繁琐。因此，MyBatis提供了<code>type-aliases-package</code>配置项，可以一次性将一个包中所有的JavaBean类设置为类型别名：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;typeAliases&gt;
  &lt;package name=&quot;cn.itcast.user.pojo&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这样，MyBatis就会自动将<code>cn.itcast.user.pojo</code>包下的所有JavaBean类都设置为类型别名了。在编写Mapper映射文件时，只需要直接使用JavaBean名称即可，不再需要使用完整的类名。这样可以大大提高代码的可读性和可维护性。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/2f79031b19db59c8f10df58b5f7277a0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/cf7136e66cc0bd69e7a53f25652e2d4f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>微服务远程调用：</strong></p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/2a1b9a858c3db7eec78737e9a0ffcfc9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,28),b=p(`<p>步骤一：在order-service的OrderApplication中注册RestTemplate</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 创建RestTemplate并注入Spring容器
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤二：修改order-service中的OrderService的queryOrderById方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">queryOrderById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.查询订单</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.利用RestTemplate发起http请求，查询用户</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8081/user/&quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.封装user和order</span>
        order<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.返回</span>
        <span class="token keyword">return</span> order<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/5cf77ca9e9037e9e585cd0e12a007691.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、eureka" tabindex="-1"><a class="header-anchor" href="#三、eureka" aria-hidden="true">#</a> 三、Eureka</h2><h3 id="_1、提供者与消费者" tabindex="-1"><a class="header-anchor" href="#_1、提供者与消费者" aria-hidden="true">#</a> <strong>1、提供者与消费者:</strong></h3><ul><li>服务提供者：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</li><li>服务消费者：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</li></ul><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/7acd93ef5bdd032baa335731bc5d6721.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>服务调用关系</p><ul><li>服务提供者：暴露接口给其它微服务调用</li><li>服务消费者：调用其它微服务提供的接口</li><li>提供者与消费者角色其实是相对的</li><li>一个服务可以同时是服务提供者和服务消费者</li></ul><h3 id="_2、eureka注册中心" tabindex="-1"><a class="header-anchor" href="#_2、eureka注册中心" aria-hidden="true">#</a> 2、Eureka注册中心</h3><p>假如我们的服务提供者user-service部署了多个实例，如图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/df312d076fb114033ca5b389f15763f2.png" alt="image-20230606171808683" tabindex="0" loading="lazy"><figcaption>image-20230606171808683</figcaption></figure><p>大家思考几个问题：</p><ul><li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？ <ul><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者根据服务名称向eureka拉取提供者信息</li></ul></li><li>有多个user-service实例地址，order-service调用时该如何选择？ <ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul></li><li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？ <ul><li>服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态</li><li>eureka会更新记录服务列表信息，心跳不正常会被剔除</li><li>消费者就可以拉取到最新的信息</li></ul></li></ul><h3 id="_3、eureka作用" tabindex="-1"><a class="header-anchor" href="#_3、eureka作用" aria-hidden="true">#</a> 3、Eureka作用：</h3><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/ae67febe8982dc283dd7970115d8d31d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4、搭建eureka-server" tabindex="-1"><a class="header-anchor" href="#_4、搭建eureka-server" aria-hidden="true">#</a> 4、搭建eureka-server：</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>父pom
<span class="token comment">&lt;!-- springCloud --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里不需要写eureka的版本信息是因为，父pom中加载了spring-cloud的依赖，里面大量的springcloud的组件及版本信息已经定义好了。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/7947310e7e7cdbaa1f0642b204eec1b6.png" alt="image-20230606174039793" tabindex="0" loading="lazy"><figcaption>image-20230606174039793</figcaption></figure><h3 id="_5、创建eureka-server服务" tabindex="-1"><a class="header-anchor" href="#_5、创建eureka-server服务" aria-hidden="true">#</a> 5、创建eureka-server服务</h3><h4 id="_5-1、引入eureka依赖" tabindex="-1"><a class="header-anchor" href="#_5-1、引入eureka依赖" aria-hidden="true">#</a> 5.1、引入eureka依赖</h4><p>引入SpringCloud为eureka提供的starter依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2、编写启动类" tabindex="-1"><a class="header-anchor" href="#_5-2、编写启动类" aria-hidden="true">#</a> 5.2、编写启动类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3、编写配置文件" tabindex="-1"><a class="header-anchor" href="#_5-3、编写配置文件" aria-hidden="true">#</a> 5.3、编写配置文件</h4><p>application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10086</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server <span class="token comment">#eureka的服务名称</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
	  <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#既不注册，也不获取</span>
	  <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> <span class="token comment">#eureka集群的地址信息</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
      <span class="token comment"># eureka本身也是一个微服务，因为后面也要做集群； eureka在启动的时候，会将自己注册到eureka上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、服务注册" tabindex="-1"><a class="header-anchor" href="#_6、服务注册" aria-hidden="true">#</a> 6、服务注册</h3><h4 id="_6-1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_6-1、引入依赖" aria-hidden="true">#</a> 6.1、引入依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2、配置文件" tabindex="-1"><a class="header-anchor" href="#_6-2、配置文件" aria-hidden="true">#</a> 6.2、配置文件</h4><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> userservice
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/cloud_user<span class="token punctuation">?</span>useSSL=false
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> 123.com
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    
<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> cn.itcast.user.pojo
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">cn.itcast</span><span class="token punctuation">:</span> debug
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、启动多个user-service实例" tabindex="-1"><a class="header-anchor" href="#_7、启动多个user-service实例" aria-hidden="true">#</a> 7、启动多个user-service实例：</h3><p>为了演示一个服务有多个实例的场景，复制原来的user-service启动配置，再启动一个user-service。</p><p>右键Copy Configuration，VM options：-Dserver.port=8082</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/b9629ad7025188b5d4b58fbc82bc74a1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/14ec6e69b4d8bb2bc42787e57dde8257.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡.</p><p>注意如果不加 @LoadBalanced ，将无法通过服务名请求访问</p></blockquote><p>切换两个实例查看，发现确实实现了负载均衡**（这个课太棒了！）**</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/dd73fa8d01870373109563fcfe0f0f34.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/6ed991bdf9845406bd563ec7bcf6502d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_8、注册中心总结" tabindex="-1"><a class="header-anchor" href="#_8、注册中心总结" aria-hidden="true">#</a> 8、注册中心总结：</h3><h4 id="_8-1、搭建eurekaserver" tabindex="-1"><a class="header-anchor" href="#_8-1、搭建eurekaserver" aria-hidden="true">#</a> 8.1、搭建EurekaServer</h4><ul><li>引入eureka-server依赖</li><li>添加@EnableEurekaServer注解</li><li>在application.yml中配置eureka地址</li></ul><h4 id="_8-2、服务注册" tabindex="-1"><a class="header-anchor" href="#_8-2、服务注册" aria-hidden="true">#</a> 8.2、服务注册</h4><ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li></ul><h4 id="_8-3、服务发现" tabindex="-1"><a class="header-anchor" href="#_8-3、服务发现" aria-hidden="true">#</a> 8.3、服务发现</h4><ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li><li>给RestTemplate添加@LoadBalanced注解</li><li>用服务提供者的服务名称远程调用</li></ul><h2 id="四、ribbon负载均衡" tabindex="-1"><a class="header-anchor" href="#四、ribbon负载均衡" aria-hidden="true">#</a> 四、Ribbon负载均衡</h2><p>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p><h3 id="_4-1-负载均衡原理" tabindex="-1"><a class="header-anchor" href="#_4-1-负载均衡原理" aria-hidden="true">#</a> 4.1.负载均衡原理：</h3><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/02ca0de5a040bd3ffb7dc6a6681fa4d9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,59),h={href:"http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},v=p('<h3 id="_4-2-源码跟踪" tabindex="-1"><a class="header-anchor" href="#_4-2-源码跟踪" aria-hidden="true">#</a> 4.2.源码跟踪：</h3><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><p><strong>1）LoadBalancerIntercepor</strong></p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/5387cd2d473a8292759818a56952f2c3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p>',7),f=n("code",null,"request.getURI()",-1),y={href:"http://user-service/user/8",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,[n("code",null,"originalUri.getHost()"),a("：获取uri路径的主机名，其实就是服务id，"),n("code",null,"user-service")],-1),_=n("li",null,[n("code",null,"this.loadBalancer.execute()"),a("：处理服务id，和用户请求。")],-1),x=p('<p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><p><strong>2）LoadBalancerClient</strong></p><p>继续跟入execute方法：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/8a8b93b21130f2eb63357320de48b77d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/b38fdd89ec0a1e631b1ac28089f25770.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>果然实现了负载均衡。</p><p><strong>3）负载均衡策略IRule</strong></p><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/b38fdd89ec0a1e631b1ac28089f25770.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们继续跟入：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/a6675c34e11a186cbc0a57bda461c364.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/b696a05f4f6a57719ea0b88c29046f89.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们看看这个rule是谁：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/89d04a3d19e0ff546512206aa20d5629.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/a83e5752457212505a16dd77fc5fb11e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><p><strong>4）总结</strong></p><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/c5b66357207c152011c0fd3d92ed0178.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基本流程如下：</p>',26),R={href:"http://userservice/user/1",target:"_blank",rel:"noopener noreferrer"},z=n("li",null,"RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service",-1),E=n("li",null,"DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表",-1),B=n("li",null,"eureka返回列表，localhost:8081、localhost:8082",-1),N=n("li",null,"IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081",-1),S={href:"http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82",target:"_blank",rel:"noopener noreferrer"},I=p(`<h3 id="_4-3-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-3-负载均衡策略" aria-hidden="true">#</a> 4.3.负载均衡策略</h3><h4 id="_4-3-1-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-3-1-负载均衡策略" aria-hidden="true">#</a> 4.3.1.负载均衡策略</h4><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/127631c585d061a94d1222f6a44595d3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<code>clientName\`\`clientConfigNameSpace\`\`ActiveConnectionsLimit</code>属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/9c4097dfddbff1593d294a21578a1dd5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/337a05a7d5ba0e8821075143bc3a26a9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-3-2-自定义负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_4-3-2-自定义负载均衡策略" aria-hidden="true">#</a> 4.3.2.自定义负载均衡策略</h4><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/0428f260972dcc6e4f71916c6650037a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/36bb98c1f4eafe937eac0ddb2afe607d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-4-饥饿加载" tabindex="-1"><a class="header-anchor" href="#_4-4-饥饿加载" aria-hidden="true">#</a> 4.4.饥饿加载：</h3><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/12a988e8d4cd6b2ecf49c459428b9862.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/91e80758b7b85fa37d3edc4a6205e396.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">clients</span><span class="token punctuation">:</span> userservice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/6ace5daba447a0c72b5684fa1b7622d4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>直接缩短了一般时间</p><blockquote><p>为什么时间还是这么长？那是因为还做了其他配置SpringMVC容器（DispatcherServlet）的初始化</p></blockquote><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/268fc3ba8b51d1db7ce6f6866c75e144.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-5-饥饿加载" tabindex="-1"><a class="header-anchor" href="#_4-5-饥饿加载" aria-hidden="true">#</a> 4.5.饥饿加载：</h3><p>1、Ribbon负载均衡规则</p><ul><li>规则接口是IRule</li><li>默认实现是ZoneAvoidanceRule，根据zone选择服务列表，然后轮询</li></ul><p>2、负载均衡自定义方式</p><ul><li>代码方式：配置灵活，但修改时需要重新打包发布</li><li>配置方式：直观，方便，无需重新打包发布，但是无法做全局配置</li></ul><p>3、饥饿加载</p><ul><li>开启饥饿加载</li><li>指定饥饿加载的微服务名称</li></ul><h2 id="五、nacos注册中心" tabindex="-1"><a class="header-anchor" href="#五、nacos注册中心" aria-hidden="true">#</a> 五、Nacos注册中心</h2><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h3 id="_5-1-认识和安装nacos" tabindex="-1"><a class="header-anchor" href="#_5-1-认识和安装nacos" aria-hidden="true">#</a> 5.1.认识和安装Nacos</h3>`,38),A={href:"https://nacos.io/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/Netflix/eureka",target:"_blank",rel:"noopener noreferrer"},L=n("figure",null,[n("img",{src:"https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/8627877a03c1d35d0132e99d09cdc6fe.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),j={href:"http://xn--Nacos-w47hp30co9nr93f.md",target:"_blank",rel:"noopener noreferrer"},T=p(`<p>启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>startup.cmd <span class="token parameter variable">-m</span> standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#_5-2-服务注册到nacos" aria-hidden="true">#</a> 5.2.服务注册到nacos</h3><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h5 id="_1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖" aria-hidden="true">#</a> 1）引入依赖</h5><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><h5 id="_2-配置nacos地址" tabindex="-1"><a class="header-anchor" href="#_2-配置nacos地址" aria-hidden="true">#</a> 2）配置nacos地址</h5><p>在user-service和order-service的application.yml中添加nacos地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><h5 id="_3-重启" tabindex="-1"><a class="header-anchor" href="#_3-重启" aria-hidden="true">#</a> 3）重启</h5><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><h3 id="_5-3-服务分级存储模型" tabindex="-1"><a class="header-anchor" href="#_5-3-服务分级存储模型" aria-hidden="true">#</a> 5.3.服务分级存储模型</h3><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/f6564401044a0f1674031d2d5b9d4406.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1c37ab0d9c7b3ce310064efc3ba214f3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h4 id="_5-3-1-给user-service配置集群" tabindex="-1"><a class="header-anchor" href="#_5-3-1-给user-service配置集群" aria-hidden="true">#</a> 5.3.1.给user-service配置集群</h4><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1b020ab8fda94a4337c568a9309755d5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>默认集群名为DEFAULT</p><p>修改user-service的application.yml文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1e6c32c3ec15291ba183997ff3446677.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/3335d59e99a12c37674e3a7631f89c2e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/3b0aaf1bae12be169fd8c36b5f4fa939.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-3-2-nacos小结" tabindex="-1"><a class="header-anchor" href="#_5-3-2-nacos小结" aria-hidden="true">#</a> 5.3.2.Nacos小结：</h4><p>1、Nacos服务分级存储模型</p><ul><li>一级是服务，例如userservice</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了userservice的服务器</li></ul><p>2、如何设置实例的集群属性</p><ul><li>修改application.yml文件，添加spring.cloud.nacos.discovery.cluster-name属性即可</li></ul><h4 id="_5-3-3-同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#_5-3-3-同集群优先的负载均衡" aria-hidden="true">#</a> 5.3.3.同集群优先的负载均衡</h4><p>orderservice和userservice的8081和8082都在一个集群中了，我们希望的是orderservice，那此时呢我们希望的是other service发起远程调用时，优先选择8081和8082</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/bc2d8995777666c8df94ccd7ceb610a0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p><em><strong>1）给order-service配置集群信息</strong></em></p><p>修改order-service的application.yml文件，添加集群配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>spring:
  cloud:
    nacos:
      server-addr: localhost:8848
      discovery:
        cluster-name: HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>2）修改负载均衡规则</strong></em></p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则 ,NacosRule---优先选择本地集群</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-4-如果配置了优先访问本地集群-那本地的多个集群都崩了会发生什么" tabindex="-1"><a class="header-anchor" href="#_5-3-4-如果配置了优先访问本地集群-那本地的多个集群都崩了会发生什么" aria-hidden="true">#</a> 5.3.4.如果配置了优先访问本地集群，那本地的多个集群都崩了会发生什么?</h4><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/e626c7d4350f4ee02ab4a1b624ed59fd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>只留一个试试。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>一次跨集群访问发生了，谁呢<span class="token operator">?</span>   userservice
想访问的是杭州，但实际是上海
<span class="token class-name">A</span> cross<span class="token operator">-</span>cluster call occurs，name <span class="token operator">=</span> userservice<span class="token punctuation">,</span> clusterName <span class="token operator">=</span> <span class="token constant">HZ</span><span class="token punctuation">,</span> instance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Instance</span><span class="token punctuation">{</span>instanceId<span class="token operator">=</span>&#39;<span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.172</span>#<span class="token number">8083</span>#<span class="token constant">SH</span>#<span class="token constant">DEFAULT_GROUP</span>@<span class="token annotation punctuation">@userservice</span><span class="token char">&#39;, ip=&#39;</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.172</span>&#39;<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8083</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> healthy<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> enabled<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> ephemeral<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> clusterName<span class="token operator">=</span><span class="token char">&#39;SH&#39;</span><span class="token punctuation">,</span> serviceName<span class="token operator">=</span>&#39;<span class="token constant">DEFAULT_GROUP</span>@<span class="token annotation punctuation">@userservice</span>&#39;<span class="token punctuation">,</span> metadata<span class="token operator">=</span><span class="token punctuation">{</span>preserved<span class="token punctuation">.</span>register<span class="token punctuation">.</span>source<span class="token operator">=</span><span class="token constant">SPRING_CLOUD</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运维人员看见警告就会处理。</p><h4 id="_5-3-5-总结" tabindex="-1"><a class="header-anchor" href="#_5-3-5-总结" aria-hidden="true">#</a> 5.3.5.总结</h4><p>NacosRule负载均衡策略</p><ul><li>优先选择同集群服务实例列表</li><li>本地集群找不到提供者，才去其它集群寻找，并且会报警告</li><li>确定了可用实例列表后，再采用随机负载均衡挑选实例</li></ul><h3 id="_5-4-权重配置" tabindex="-1"><a class="header-anchor" href="#_5-4-权重配置" aria-hidden="true">#</a> 5.4.权重配置</h3><p>实际部署中会出现这样的场景：</p><ul><li>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</li></ul><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/4192d335f35eff4c6d4cf09be162eb5b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在弹出的编辑窗口，修改权重：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/b211a65fc38d0425e6ab69792f771c99.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/df3df2f5a92e80ad89d1ae060c15a04c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/8e5807c9f7b537bd94df1af95e43ff17.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote>`,73),M=p(`<p><strong>总结：</strong></p><blockquote><p>实例的权重控制</p><ul><li>Nacos控制台可以设置实例的权重值，0~1之间</li><li>同集群内的多个实例，权重越高被访问的频率越高</li><li>权重设置为0则完全不会被访问</li></ul></blockquote><h3 id="_5-5-环境隔离" tabindex="-1"><a class="header-anchor" href="#_5-5-环境隔离" aria-hidden="true">#</a> 5.5.环境隔离</h3><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p>开发/测试/生产 三种环境需要隔离 服务和配置的</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/459a09af4f9ddbb94be4ac51b6f8afcb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-5-1-创建namespace" tabindex="-1"><a class="header-anchor" href="#_5-5-1-创建namespace" aria-hidden="true">#</a> 5.5.1.创建namespace</h4><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/c7ade712e06eb0395ce562c70ea8a757.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以点击页面新增按钮，添加一个namespace：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/e193a37f988088684e36bc15548a6de4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后，填写表单：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/3a9563601ac8cbc3c1e4ad8cff2ce9c2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>就能在页面看到一个新的namespace：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/5f6ab6500651acf4c67b1a6347b0b7be.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-5-2-给微服务配置namespace" tabindex="-1"><a class="header-anchor" href="#_5-5-2-给微服务配置namespace" aria-hidden="true">#</a> 5.5.2.给微服务配置namespace</h4><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 492a7d5d<span class="token punctuation">-</span>237b<span class="token punctuation">-</span>46a1<span class="token punctuation">-</span>a99a<span class="token punctuation">-</span>fa8e98e4b0f9 <span class="token comment"># 命名空间，填ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启order-service后，访问控制台，可以看到下面的结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/684be5121966110be67f2accb3defc1e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/484caab3fa8b96f6673848b407a88c1a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p>`,24),U=p('<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/ba9db871150ba398c31c3b6d97989455.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Nacos环境隔离</p><ul><li>每个namespace都有唯一id</li><li>服务设置namespace时要写id而不是名称</li><li>不同namespace下的服务互相不可见</li></ul></blockquote><h4 id="_5-6-nacos与eureka的区别" tabindex="-1"><a class="header-anchor" href="#_5-6-nacos与eureka的区别" aria-hidden="true">#</a> 5.6.Nacos与Eureka的区别</h4><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/b5d44ae7be32f5dbe38d610c79225db1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到目前为止，Nacos和Eurela没什么区别，</p><p>Nacos的服务实例分为两种l类型：</p><ul><li>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</li></ul>',7),F=p(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/cb62baf822e56533b3e6d2975702a481.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</li></ul><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/6b5e436a224ca33cee40593f252b87a5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置为非临时实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/cebec10ce329a95801de61f390cb98b8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p><strong>Nacos与eureka的共同点</strong></p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p><strong>Nacos与Eureka的区别</strong></p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除（<strong>只是把你标记为不健康</strong>）</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul><p><strong>总结一下</strong>，nacos与eureka的几点区别：</p><p>1、功能作用不同，nacos是一个服务注册与服务发现，而且还是一个配置中心，euraka仅仅只是一个注册中心；</p><p>2、心跳机制不同，nacos可以是主动询问微服务，也可以是微服务主动询问nacos，非临时实例与临时实例</p><p>消费者默认每隔30秒会向注册中心拉取信息，但是服务30内挂了怎么办？这时注册中心已经监听到了不健康的服务，那消费者直接去消费就会出问题。 所以Eureka服务列表更新的频率也就比较差。</p><p>有回应有主动 比渣男好多了！哈哈哈哈哈！！！</p><p><strong>记忆：临时是Nacos的舔狗，Nacos是非临时的舔狗。</strong></p></li></ul><blockquote><p><strong>为什么nacos临时实例采用心跳模式，非临时实例采用主动检测模式，为什么要区别对待？</strong></p><p>Nacos采用心跳模式来监测临时实例的健康状况，而采用主动检测模式来监测非临时实例的健康状况，原因如下：</p><ol><li>对于临时实例，由于这些实例通常是一些短暂存在于服务列表中的实例，它们的声明周期较短，因此采用心跳模式更加适合。心跳模式是通过服务提供者定期发送心跳信息告诉注册中心自己还存活着，如果一段时间内没有收到心跳信息，则认为该实例已经下线，将其从服务列表中移除。这种方式可以及时发现实例的下线，避免了误判，并且减少了对网络带宽和系统资源的占用。</li></ol></blockquote><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p>[外链图片转存中...(img-ilk7BFmk-1686851870407)]</p><ul><li><p><strong>Nacos与eureka的共同点</strong></p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p><strong>Nacos与Eureka的区别</strong></p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除（<strong>只是把你标记为不健康</strong>）</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul><p><strong>总结一下</strong>，nacos与eureka的几点区别：</p><p>1、功能作用不同，nacos是一个服务注册与服务发现，而且还是一个配置中心，euraka仅仅只是一个注册中心；</p><p>2、心跳机制不同，nacos可以是主动询问微服务，也可以是微服务主动询问nacos，非临时实例与临时实例</p><p>消费者默认每隔30秒会向注册中心拉取信息，但是服务30内挂了怎么办？这时注册中心已经监听到了不健康的服务，那消费者直接去消费就会出问题。 所以Eureka服务列表更新的频率也就比较差。</p><p>有回应有主动 比渣男好多了！哈哈哈哈哈！！！</p><p><strong>记忆：临时是Nacos的舔狗，Nacos是非临时的舔狗。</strong></p></li></ul><blockquote><p><strong>为什么nacos临时实例采用心跳模式，非临时实例采用主动检测模式，为什么要区别对待？</strong></p><p>Nacos采用心跳模式来监测临时实例的健康状况，而采用主动检测模式来监测非临时实例的健康状况，原因如下：</p><ol><li><p>对于临时实例，由于这些实例通常是一些短暂存在于服务列表中的实例，它们的声明周期较短，因此采用心跳模式更加适合。心跳模式是通过服务提供者定期发送心跳信息告诉注册中心自己还存活着，如果一段时间内没有收到心跳信息，则认为该实例已经下线，将其从服务列表中移除。这种方式可以及时发现实例的下线，避免了误判，并且减少了对网络带宽和系统资源的占用。</p></li><li><p>对于非临时实例，这些实例通常存在比较长的生命周期，而采用心跳模式无法保证及时发现实例的下线，因此采用主动检测模式更加适合。主动检测模式是注册中心通过发送HTTP请求或者TCP请求等方式来主动探测服务提供者的状态，以此来保证服务的可用性。这种方式可以更加精确地判断实例的状态，但是也会带来一些额外的负担，因为需要耗费更多的资源和网络带宽。</p></li></ol></blockquote>`,13);function Z(D,O){const e=o("font"),i=o("ExternalLinkIcon");return c(),r("div",null,[d,n("ul",null,[n("li",null,[a("单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发。"),s(e,{face:"STCAIYUN"},{default:t(()=>[a("会员服务")]),_:1}),a(),s(e,{face:"STCAIYUN"},{default:t(()=>[a("用户服务")]),_:1}),a(),s(e,{face:"STCAIYUN"},{default:t(()=>[a("积分服务")]),_:1})]),g,n("li",null,[a("自治：团队独立、技术独立、数据独立、部署独立（"),s(e,{color:"red"},{default:t(()=>[a("简单点 说话的方式简单点")]),_:1}),a("）"),s(e,{color:"green"},{default:t(()=>[a("符合敏捷开发的思想")]),_:1}),a("。所以你可以用你擅长的技术，Go，Java，C++都可以。")]),k]),s(e,{face:"STCAIYUN"},{default:t(()=>[a("我是华文彩云")]),_:1}),a(),m,s(e,{color:"red"},{default:t(()=>[a("我们都知道@bean的注入必须写在配置类中，但是@SpringBootApplication启动类其实也是一个配置类。")]),_:1}),b,n("p",null,[a("那么我们发出的请求明明是"),n("a",h,[a("http://userservice/user/1，怎么变成了http://localhost:8081的呢？"),s(i)])]),v,n("ul",null,[n("li",null,[f,a("：获取请求uri，本例中就是 "),n("a",y,[a("http://user-service/user/8"),s(i)])]),q,_]),x,n("ul",null,[n("li",null,[a("拦截我们的RestTemplate请求"),n("a",R,[a("http://userservice/user/1"),s(i)])]),z,E,B,N,n("li",null,[a("RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到"),n("a",S,[a("http://localhost:8081/user/1，发起真实请求"),s(i)])])]),I,n("p",null,[n("a",A,[a("Nacos"),s(i)]),a("是阿里巴巴的产品，现在是"),n("a",C,[a("SpringCloud"),s(i)]),a("中的一个组件。相比"),n("a",w,[a("Eureka"),s(i)]),a("功能更加丰富，在国内受欢迎程度较高。")]),L,n("p",null,[a("安装方式可以参考课前资料《"),n("a",j,[a("Nacos安装指南.md"),s(i)]),a("》")]),T,s(e,{color:"green"},{default:t(()=>[a("如果一个服务想要做一个版本的升级，怎么办？ 重启！王者荣耀不停服更新---部分分批更新（设权重） ")]),_:1}),M,s(e,{color:"green"},{default:t(()=>[a("是两个世界的人了！ ")]),_:1}),U,s(e,{color:"red"},{default:t(()=>[a(" 不写，ephemeral: false，停掉，就会等待一会儿后，nacos监测台就会爆红")]),_:1}),F])}const H=l(u,[["render",Z],["__file","Microservices with Eureka Ribbon.html.vue"]]);export{H as default};
