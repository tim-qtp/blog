import{_ as p,W as o,X as c,$ as n,a0 as s,Z as t,a2 as e,C as i}from"./framework-6a3aa88c.js";const l={},u=n("h2",{id:"一、-spring-security快速入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、-spring-security快速入门","aria-hidden":"true"},"#"),s(" 一、 Spring Security快速入门")],-1),r=n("p",null,[n("strong",null,"官方文档：")],-1),d={href:"https://docs.spring.io/spring-security/reference/index.html",target:"_blank",rel:"noopener noreferrer"},k=e('<p><strong>功能：</strong></p><ol><li><p>身份认证</p></li><li><p>授权</p></li><li><p>防御常见攻击</p><ul><li>CSRF</li><li>HTTP Headers</li><li>HTTP Requests</li></ul></li></ol><h3 id="_1、身份认证-authentication" tabindex="-1"><a class="header-anchor" href="#_1、身份认证-authentication" aria-hidden="true">#</a> 1、身份认证（authentication）</h3>',3),v=n("strong",null,"官方代码示例：",-1),g={href:"https://github.com/spring-projects/spring-security-samples/tree/main",target:"_blank",rel:"noopener noreferrer"},m=e(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503102202675.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-1、创建spring-boot项目" tabindex="-1"><a class="header-anchor" href="#_1-1、创建spring-boot项目" aria-hidden="true">#</a> 1.1、创建Spring Boot项目</h4><p>项目名：security-demo</p><p>JDK：17</p><p>SpringBoot：3.2.0（依赖了Spring Security 6.2.0）</p><p>Dependencies：Spring Web、Spring Security、Thymeleaf</p><h4 id="_1-2、创建indexcontroller" tabindex="-1"><a class="header-anchor" href="#_1-2、创建indexcontroller" aria-hidden="true">#</a> 1.2、创建IndexController</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3、创建index-html" tabindex="-1"><a class="header-anchor" href="#_1-3、创建index-html" aria-hidden="true">#</a> 1.3、创建index.html</h4><p>在路径resources/templates中创建index.html</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.thymeleaf.org<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello Security!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello Security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--通过使用@{/logout}，Thymeleaf将自动处理生成正确的URL，以适应当前的上下文路径。
这样，无论应用程序部署在哪个上下文路径下，生成的URL都能正确地指向注销功能。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/logout}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Log Out 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/logout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Log Out 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4、启动项目测试controller" tabindex="-1"><a class="header-anchor" href="#_1-4、启动项目测试controller" aria-hidden="true">#</a> 1.4、启动项目测试Controller</h4>`,12),h={href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"},b={href:"http://localhost:8080/login",target:"_blank",rel:"noopener noreferrer"},y=e(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503102217295.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>输入用户名：user</p><p>输入密码：在控制台的启动日志中查找初始的默认密码</p><p>点击&quot;Sign in&quot;进行登录，浏览器就跳转到了index页面</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503102218852.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-5、注意事项" tabindex="-1"><a class="header-anchor" href="#_1-5、注意事项" aria-hidden="true">#</a> 1.5、注意事项</h4><h5 id="_1-5-1、-logout-的作用" tabindex="-1"><a class="header-anchor" href="#_1-5-1、-logout-的作用" aria-hidden="true">#</a> 1.5.1、@{/logout}的作用</h5><p>通过使用@{/logout}，Thymeleaf将自动处理生成正确的URL，以适应当前的上下文路径。这样，无论应用程序部署在哪个上下文路径下，生成的URL都能正确地指向注销功能。</p><p>例如：如果我们在配置文件中添加如下内容</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>server.servlet.context<span class="token punctuation">-</span>path=/demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么@{/logout}可以自动处理url为正确的相对路径</p><p>但是如果是普通的/logout，路径就会不正确</p><h4 id="_1-6、spring-security默认做了什么" tabindex="-1"><a class="header-anchor" href="#_1-6、spring-security默认做了什么" aria-hidden="true">#</a> 1.6、Spring Security默认做了什么</h4><ul><li>保护应用程序URL，要求对应用程序的任何交互进行身份验证。</li><li>程序启动时生成一个默认用户“user”。</li><li>生成一个默认的随机密码，并将此密码记录在控制台上。</li><li>生成默认的登录表单和注销页面。</li><li>提供基于表单的登录和注销流程。</li><li>对于Web请求，重定向到登录页面；</li><li>对于服务请求，返回401未经授权。</li><li>处理跨站请求伪造（CSRF）攻击。</li><li>处理会话劫持攻击。</li><li>写入Strict-Transport-Security以确保HTTPS。</li><li>写入X-Content-Type-Options以处理嗅探攻击。</li><li>写入Cache Control头来保护经过身份验证的资源。</li><li>写入X-Frame-Options以处理点击劫持攻击。</li></ul><h3 id="_2、spring-security-的底层原理" tabindex="-1"><a class="header-anchor" href="#_2、spring-security-的底层原理" aria-hidden="true">#</a> 2、Spring Security 的底层原理</h3>`,15),f=n("strong",null,"官方文档：",-1),w={href:"https://docs.spring.io/spring-security/reference/servlet/architecture.html",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>Spring Security之所以默认帮助我们做了那么多事情，它的底层原理是传统的<code>Servlet过滤器</code></p><h4 id="_2-1、filter" tabindex="-1"><a class="header-anchor" href="#_2-1、filter" aria-hidden="true">#</a> 2.1、Filter</h4><p>下图展示了处理一个Http请求时，过滤器和Servlet的工作流程：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110006436.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此我们可以在过滤器中对请求进行修改或增强。</p><p>你可以把过滤器想象成一个“检查站”，每个HTTP请求在到达你的应用之前，都会经过这些检查站。</p><blockquote><h4 id="过滤器链-filterchain" tabindex="-1"><a class="header-anchor" href="#过滤器链-filterchain" aria-hidden="true">#</a> <strong>过滤器链（FilterChain）</strong></h4><ul><li>当客户端发送一个请求到你的应用时，服务器会创建一个<strong>过滤器链（FilterChain）</strong>。</li><li>这个链包含了一系列的过滤器（Filter），每个过滤器负责处理一些特定的任务，比如验证用户身份、检查权限等。</li><li>最后，请求会到达一个<strong>Servlet</strong>（比如Spring MVC中的<code>DispatcherServlet</code>），由它来处理实际的业务逻辑。</li></ul></blockquote><h4 id="_2-2、delegatingfilterproxy-委托过滤器代理" tabindex="-1"><a class="header-anchor" href="#_2-2、delegatingfilterproxy-委托过滤器代理" aria-hidden="true">#</a> 2.2、DelegatingFilterProxy（委托过滤器代理）</h4><p>DelegatingFilterProxy 是 Spring Security 提供的一个 Filter 实现，可以在 Servlet 容器和 Spring 容器之间建立桥梁。通过使用 DelegatingFilterProxy，这样就可以将Servlet容器中的 Filter 实例打包放在 Spring 容器中管理。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110008661.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-3、filterchainproxy" tabindex="-1"><a class="header-anchor" href="#_2-3、filterchainproxy" aria-hidden="true">#</a> 2.3、FilterChainProxy</h4><p>复杂的业务中不可能只有一个过滤器。因此FilterChainProxy是Spring Security提供的一个特殊的Filter，它允许通过SecurityFilterChain将过滤器的工作委托给多个Bean Filter实例。</p><blockquote><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> <strong>例子</strong></h4><ul><li><strong>检查流程管理器（FilterChainProxy）</strong>：它负责根据包裹的目的地和类型，选择合适的检查流程。</li><li><strong>检查流程（SecurityFilterChain）</strong>：每个检查流程是一系列检查点的组合，比如： <ul><li><strong>流程1</strong>：检查电子产品是否符合安全标准 → 检查是否有损坏 → 打包。</li><li><strong>流程2</strong>：检查食品是否过期 → 检查包装是否密封 → 打包。</li></ul></li></ul></blockquote><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110011417.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-4、securityfilterchain" tabindex="-1"><a class="header-anchor" href="#_2-4、securityfilterchain" aria-hidden="true">#</a> 2.4、SecurityFilterChain</h4><p>SecurityFilterChain 被 FilterChainProxy 使用，负责查找当前的请求需要执行的Security Filter列表。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110012066.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-5、multiple-securityfilterchain" tabindex="-1"><a class="header-anchor" href="#_2-5、multiple-securityfilterchain" aria-hidden="true">#</a> 2.5、Multiple SecurityFilterChain</h4><p>可以有多个SecurityFilterChain的配置，FilterChainProxy决定使用哪个SecurityFilterChain。如果请求的URL是/api/messages/，它首先匹配SecurityFilterChain0的模式/api/**，因此只调用SecurityFilterChain 0。假设没有其他SecurityFilterChain实例匹配，那么将调用SecurityFilterChain n。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110014617.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其实很好理解，就是这些概念有点复杂，官网图画的也有点复杂了。</p><h3 id="_3、程序的启动和运行" tabindex="-1"><a class="header-anchor" href="#_3、程序的启动和运行" aria-hidden="true">#</a> 3、程序的启动和运行</h3><h4 id="_3-1、defaultsecurityfilterchain" tabindex="-1"><a class="header-anchor" href="#_3-1、defaultsecurityfilterchain" aria-hidden="true">#</a> 3.1、DefaultSecurityFilterChain</h4><p>SecurityFilterChain接口的实现，加载了默认的16个Filter（所以是个集合）</p><p>打个断点就可以知道这16个过滤器。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110031455.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-2、securityproperties" tabindex="-1"><a class="header-anchor" href="#_3-2、securityproperties" aria-hidden="true">#</a> 3.2、SecurityProperties</h4><p>默认情况下Spring Security将初始的用户名和密码存在了SecurityProperties类中。这个类中有一个静态内部类User，配置了默认的用户名（name = &quot;user&quot;）和密码（password = uuid）</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110039348.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们也可以将用户名、密码配置在SpringBoot的配置文件中：在application.properties中配置自定义用户名和密码</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.security.user.name</span><span class="token punctuation">=</span><span class="token value attr-value">user</span>
<span class="token key attr-name">spring.security.user.password</span><span class="token punctuation">=</span><span class="token value attr-value">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、-spring-security自定义配置" tabindex="-1"><a class="header-anchor" href="#二、-spring-security自定义配置" aria-hidden="true">#</a> 二、 Spring Security自定义配置</h2><h3 id="_1、基于内存的用户认证" tabindex="-1"><a class="header-anchor" href="#_1、基于内存的用户认证" aria-hidden="true">#</a> 1、基于内存的用户认证</h3><h4 id="_1-1、创建自定义配置" tabindex="-1"><a class="header-anchor" href="#_1-1、创建自定义配置" aria-hidden="true">#</a> 1.1、创建自定义配置</h4><p>实际开发的过程中，我们需要应用程序更加灵活，可以在SpringSecurity中创建自定义配置文件</p>`,35),q=n("strong",null,"官方文档：",-1),x={href:"https://docs.spring.io/spring-security/reference/servlet/configuration/java.html",target:"_blank",rel:"noopener noreferrer"},S=e(`<p><strong>UserDetailsService</strong>用来管理用户信息，<strong>InMemoryUserDetailsManager</strong>是UserDetailsService的一个实现，用来管理基于内存的用户信息。</p><p>创建一个WebSecurityConfig文件：</p><p>定义一个@Bean，类型是UserDetailsService，实现是InMemoryUserDetailsManager</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>securitydemo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSecurity</span><span class="token comment">//Spring项目总需要添加此注解，SpringBoot项目中不需要</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建基于内存的用户信息管理器</span>
        <span class="token class-name">InMemoryUserDetailsManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用nanager管理UserDeta1Ls对象</span>
        manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span> <span class="token comment">//此行设置断点可以查看创建的user对象</span>
            <span class="token comment">//创建UserDeta1Ls对象，用于管理用户名、用户密码、用户角色：用户仅限等内容</span>
            <span class="token class-name">User</span>
            <span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">&quot;qin&quot;</span><span class="token punctuation">)</span> <span class="token comment">//自定义用户名</span>
            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;123.com&quot;</span><span class="token punctuation">)</span> <span class="token comment">//自定义密码</span>
            <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span> <span class="token comment">//自定义角色</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**测试：**使用用户名huan，密码password登录</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110905773.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基于springboot项目的所有第三方配置都会在这个autoconfigure中预先定义好，打开就会发现整合了非常多的预定义配置，然后打开<code>security</code>这个文件夹</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110906801.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后发现有这么一行注解</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110908444.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>意思是，只要<code>EnableWebSecurity.class</code>这个类被加载到了应用上下文中，那么@EnableWebSecurity这个注解就会生效；那这个类什么时候被加载呢：只要pom.xml中导入了security依赖，就会加载这个类。所以springboot项目中@EnableWebSecurity这个就不需要添加了。</p><p>还有，创建的<code>UserDetailsService</code>并不是一个类，而是一个接口，他底下有很多实现类；</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503110913377.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在对第二个做一个测试，它的意思是，把用户信息管理在springsecurity应用程序的内存当中，</p><h4 id="_1-2、基于内存的用户认证流程" tabindex="-1"><a class="header-anchor" href="#_1-2、基于内存的用户认证流程" aria-hidden="true">#</a> 1.2、基于内存的用户认证流程</h4><ul><li>程序启动时： <ul><li>创建<code>InMemoryUserDetailsManager</code>对象</li><li>创建<code>User</code>对象，封装用户名密码</li><li>使用InMemoryUserDetailsManager<code>将User存入内存</code></li></ul></li><li>校验用户时： <ul><li>SpringSecurity自动使用<code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法从<code>内存中</code>获取User对象</li><li>在<code>UsernamePasswordAuthenticationFilter</code>过滤器中的<code>attemptAuthentication</code>方法中将用户输入的用户名密码和从内存中获取到的用户信息进行比较，进行用户认证</li></ul></li></ul><h3 id="_2、基于数据库的数据源" tabindex="-1"><a class="header-anchor" href="#_2、基于数据库的数据源" aria-hidden="true">#</a> 2、基于数据库的数据源</h3><h4 id="_2-1、sql" tabindex="-1"><a class="header-anchor" href="#_2-1、sql" aria-hidden="true">#</a> 2.1、SQL</h4><p>创建三个数据库表并插入测试数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">\`</span>security-demo<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">USE</span> <span class="token identifier"><span class="token punctuation">\`</span>security-demo<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">-- 创建用户表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>
	<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>username<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>password<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>enabled<span class="token punctuation">\`</span></span> <span class="token keyword">BOOLEAN</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 唯一索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>user_username_uindex<span class="token punctuation">\`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>username<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">-- 插入用户数据(密码是 &quot;abc&quot; )</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>username<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>password<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>enabled<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#39;</span><span class="token punctuation">,</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">&#39;Helen&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#39;</span><span class="token punctuation">,</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#39;</span><span class="token punctuation">,</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2、引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-2、引入依赖" aria-hidden="true">#</a> 2.2、引入依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3、配置数据源" tabindex="-1"><a class="header-anchor" href="#_2-3、配置数据源" aria-hidden="true">#</a> 2.3、配置数据源</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#MySQL数据源</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/security-demo</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token comment">#SQL日志</span>
<span class="token key attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4、实体类" tabindex="-1"><a class="header-anchor" href="#_2-4、实体类" aria-hidden="true">#</a> 2.4、实体类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>securitydemo<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enabled<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5、mapper" tabindex="-1"><a class="header-anchor" href="#_2-5、mapper" aria-hidden="true">#</a> 2.5、Mapper</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>securitydemo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>resources/mapper/UserMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.atguigu.securitydemo.mapper.UserMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-6、service" tabindex="-1"><a class="header-anchor" href="#_2-6、service" aria-hidden="true">#</a> 2.6、Service</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>securitydemo<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>securitydemo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-7、controller" tabindex="-1"><a class="header-anchor" href="#_2-7、controller" aria-hidden="true">#</a> 2.7、Controller</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>securitydemo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">public</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),U=n("strong",null,"测试：",-1),D={href:"http://localhost:8080/demo/user/list",target:"_blank",rel:"noopener noreferrer"},C=e(`<h3 id="_3、基于数据库的用户认证" tabindex="-1"><a class="header-anchor" href="#_3、基于数据库的用户认证" aria-hidden="true">#</a> 3、基于数据库的用户认证</h3><h4 id="_3-1、基于数据库的用户认证流程" tabindex="-1"><a class="header-anchor" href="#_3-1、基于数据库的用户认证流程" aria-hidden="true">#</a> 3.1、基于数据库的用户认证流程</h4><ul><li>程序启动时： <ul><li>创建<code>DBUserDetailsManager</code>类，实现接口 UserDetailsManager, UserDetailsPasswordService</li><li>在应用程序中初始化这个类的对象</li></ul></li><li>校验用户时： <ul><li>SpringSecurity自动使用<code>DBUserDetailsManager</code>的<code>loadUserByUsername</code>方法从<code>数据库中</code>获取User对象</li><li>在<code>UsernamePasswordAuthenticationFilter</code>过滤器中的<code>attemptAuthentication</code>方法中将用户输入的用户名密码和从数据库中获取到的用户信息进行比较，进行用户认证</li></ul></li></ul><h4 id="_3-2、定义dbuserdetailsmanager" tabindex="-1"><a class="header-anchor" href="#_3-2、定义dbuserdetailsmanager" aria-hidden="true">#</a> 3.2、定义DBUserDetailsManager</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>securitydemo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBUserDetailsManager</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsManager</span><span class="token punctuation">,</span> <span class="token class-name">UserDetailsPasswordService</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>

        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span>User</span><span class="token punctuation">(</span>
                    user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    user<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//用户账号是否未过期</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//用户凭证是否未过期</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//用户是否未被锁定</span>
                    authorities<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//权限列表</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">updatePassword</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> newPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changePassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> oldPassword<span class="token punctuation">,</span> <span class="token class-name">String</span> newPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">userExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3、初始化userdetailsservice" tabindex="-1"><a class="header-anchor" href="#_3-3、初始化userdetailsservice" aria-hidden="true">#</a> 3.3、初始化UserDetailsService</h4><p>修改WebSecurityConfig中的userDetailsService方法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DBUserDetailsManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DBUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> manager<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>或者直接在DBUserDetailsManager类上添加@Component注解</strong></p><p>**测试：**使用数据库中配置的用户名和密码进行登录</p><h3 id="_4、springsecurity的默认配置" tabindex="-1"><a class="header-anchor" href="#_4、springsecurity的默认配置" aria-hidden="true">#</a> 4、SpringSecurity的默认配置</h3><p>在WebSecurityConfig中添加如下配置（它是默认的行为，加与不加都行）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">//authorizeRequests()：开启授权保护</span>
    <span class="token comment">//anyRequest()：对所有请求开启授权保护</span>
    <span class="token comment">//authenticated()：已认证（登录了的 ）请求会自动被授权</span>
    http
        <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span>authorize <span class="token operator">-&gt;</span> authorize<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//默认登录表单授权方式</span>
        <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用基本授权方式</span>

    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、添加用户功能" tabindex="-1"><a class="header-anchor" href="#_5、添加用户功能" aria-hidden="true">#</a> 5、添加用户功能</h3><h4 id="_5-1、controller" tabindex="-1"><a class="header-anchor" href="#_5-1、controller" aria-hidden="true">#</a> 5.1、Controller</h4><p>UserController中添加方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
    userService<span class="token punctuation">.</span><span class="token function">saveUserDetails</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2、service" tabindex="-1"><a class="header-anchor" href="#_5-2、service" aria-hidden="true">#</a> 5.2、Service</h4><p>UserService接口中添加方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveUserDetails</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>UserServiceImpl实现中添加方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">DBUserDetailsManager</span> dbUserDetailsManager<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUserDetails</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span>User</span>
            <span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//自定义用户名</span>
            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//自定义密码</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dbUserDetailsManager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3、修改配置" tabindex="-1"><a class="header-anchor" href="#_5-3、修改配置" aria-hidden="true">#</a> 5.3、修改配置</h4><p>DBUserDetailsManager中添加方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-4、使用swagger测试" tabindex="-1"><a class="header-anchor" href="#_5-4、使用swagger测试" aria-hidden="true">#</a> 5.4、使用Swagger测试</h4><p>pom中添加配置用于测试</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--swagger测试--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-openapi3-jakarta-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),j={href:"http://localhost:8080/demo/doc.html",target:"_blank",rel:"noopener noreferrer"},M=e(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503111110199.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-5、关闭csrf攻击防御" tabindex="-1"><a class="header-anchor" href="#_5-5、关闭csrf攻击防御" aria-hidden="true">#</a> 5.5、关闭csrf攻击防御</h4><p>默认情况下SpringSecurity开启了csrf攻击防御的功能，这要求请求参数中必须有一个隐藏的**_csrf**字段，如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503111109434.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在filterChain方法中添加如下代码，关闭csrf攻击防御</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//关闭csrf攻击防御</span>
http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>csrf<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    csrf<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、密码加密算法" tabindex="-1"><a class="header-anchor" href="#_6、密码加密算法" aria-hidden="true">#</a> 6、密码加密算法</h3>`,7),L=n("strong",null,"参考文档：",-1),P={href:"https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html",target:"_blank",rel:"noopener noreferrer"},E=e(`<h4 id="_6-1、密码加密方式" tabindex="-1"><a class="header-anchor" href="#_6-1、密码加密方式" aria-hidden="true">#</a> 6.1、密码加密方式</h4><p><strong>明文密码：</strong></p><p>最初，密码以明文形式存储在数据库中。但是恶意用户可能会通过SQL注入等手段获取到明文密码，或者程序员将数据库数据泄露的情况也可能发生。</p><p><strong>Hash算法：</strong></p><p>Spring Security的<code>PasswordEncoder</code>接口用于对密码进行<code>单向转换</code>，从而将密码安全地存储。对密码单向转换需要用到<code>哈希算法</code>，例如MD5、SHA-256、SHA-512等，哈希算法是单向的，<code>只能加密，不能解密</code>。</p><p>因此，<code>数据库中存储的是单向转换后的密码</code>，Spring Security在进行用户身份验证时需要将用户输入的密码进行单向转换，然后与数据库的密码进行比较。</p><p>因此，如果发生数据泄露，只有密码的单向哈希会被暴露。由于哈希是单向的，并且在给定哈希的情况下只能通过<code>暴力破解的方式猜测密码</code>。</p><p><strong>彩虹表：</strong></p><p>恶意用户创建称为<code>彩虹表</code>的查找表。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>彩虹表就是一个庞大的、针对各种可能的字母组合预先生成的哈希值集合，有了它可以快速破解各类密码。越是复杂的密码，需要的彩虹表就越大，主流的彩虹表都是100G以上，目前主要的算法有LM, NTLM, MD5, SHA1, MYSQLSHA1, HALFLMCHALL, NTLMCHALL, ORACLE-SYSTEM, MD5-HALF。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>加盐密码：</strong></p><p>为了减轻彩虹表的效果，开发人员开始使用加盐密码。不再只使用密码作为哈希函数的输入，而是为每个用户的密码生成随机字节（称为盐）。盐和用户的密码将一起经过哈希函数运算，生成一个唯一的哈希。盐将以明文形式与用户的密码一起存储。然后，当用户尝试进行身份验证时，盐和用户输入的密码一起经过哈希函数运算，再与存储的密码进行比较。唯一的盐意味着彩虹表不再有效，因为对于每个盐和密码的组合，哈希都是不同的。</p><p><strong>自适应单向函数：</strong></p><p>随着硬件的不断发展，加盐哈希也不再安全。原因是，计算机可以每秒执行数十亿次哈希计算。这意味着我们可以轻松地破解每个密码。</p><p>现在，开发人员开始使用自适应单向函数来存储密码。使用自适应单向函数验证密码时，<code>故意占用资源（故意使用大量的CPU、内存或其他资源）</code>。自适应单向函数允许配置一个<code>“工作因子”</code>，随着硬件的改进而增加。我们建议将“工作因子”调整到系统中验证密码需要约一秒钟的时间。这种权衡是为了<code>让攻击者难以破解密码</code>。</p><p>自适应单向函数包括<code>bcrypt、PBKDF2、scrypt和argon2</code>。</p><h4 id="_6-2、passwordencoder" tabindex="-1"><a class="header-anchor" href="#_6-2、passwordencoder" aria-hidden="true">#</a> 6.2、PasswordEncoder</h4><p><strong>BCryptPasswordEncoder</strong></p><p>使用广泛支持的bcrypt算法来对密码进行哈希。为了增加对密码破解的抵抗力，bcrypt故意设计得较慢。和其他自适应单向函数一样，应该调整其参数，使其在您的系统上验证一个密码大约需要1秒的时间。BCryptPasswordEncoder的默认实现使用强度10。建议您在自己的系统上调整和测试强度参数，以便验证密码时大约需要1秒的时间。</p><p><strong>Argon2PasswordEncoder</strong></p><p>使用Argon2算法对密码进行哈希处理。Argon2是密码哈希比赛的获胜者。为了防止在自定义硬件上进行密码破解，Argon2是一种故意缓慢的算法，需要大量内存。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。当前的Argon2PasswordEncoder实现需要使用BouncyCastle库。</p><p><strong>Pbkdf2PasswordEncoder</strong></p><p>使用PBKDF2算法对密码进行哈希处理。为了防止密码破解，PBKDF2是一种故意缓慢的算法。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。当需要FIPS认证时，这种算法是一个很好的选择。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503111110482.png" alt="image-20230421184645177" tabindex="0" loading="lazy"><figcaption>image-20230421184645177</figcaption></figure><p><strong>SCryptPasswordEncoder</strong></p><p>使用scrypt算法对密码进行哈希处理。为了防止在自定义硬件上进行密码破解，scrypt是一种故意缓慢的算法，需要大量内存。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。</p><h4 id="_6-3、密码加密测试" tabindex="-1"><a class="header-anchor" href="#_6-3、密码加密测试" aria-hidden="true">#</a> 6.3、密码加密测试</h4><p>在测试类中编写一个测试方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 工作因子，默认值是10，最小值是4，最大值是31，值越大运算速度越慢</span>
    <span class="token class-name">PasswordEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//明文：&quot;password&quot;</span>
    <span class="token comment">//密文：result，即使明文密码相同，每次生成的密文也不一致</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//密码校验</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;密码不一致&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4、delegatingpasswordencoder" tabindex="-1"><a class="header-anchor" href="#_6-4、delegatingpasswordencoder" aria-hidden="true">#</a> 6.4、DelegatingPasswordEncoder</h4>`,30),F=n("ul",null,[n("li",null,[s("表中存储的密码形式："),n("code",null,"{bcrypt}"),s("$2a"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"10")]),n("annotation",{encoding:"application/x-tex"},"10")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"10")])])]),s("GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW")]),n("li",null,[s("通过如下源码可以知道：可以通过"),n("code",null,"{bcrypt}"),s("前缀动态获取和密码的形式类型一致的PasswordEncoder对象")]),n("li",null,"目的：方便随时做密码策略的升级，兼容数据库中的老版本密码策略生成的密码")],-1),I=e(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503111110489.png" alt="image-20231209011827867" tabindex="0" loading="lazy"><figcaption>image-20231209011827867</figcaption></figure><h3 id="_7、自定义登录页面" tabindex="-1"><a class="header-anchor" href="#_7、自定义登录页面" aria-hidden="true">#</a> 7、自定义登录页面</h3><h4 id="_7-1、创建登录controller" tabindex="-1"><a class="header-anchor" href="#_7-1、创建登录controller" aria-hidden="true">#</a> 7.1、创建登录Controller</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>securitydemo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2、创建登录页面" tabindex="-1"><a class="header-anchor" href="#_7-2、创建登录页面" aria-hidden="true">#</a> 7.2、创建登录页面</h4><p>resources/templates/login.html</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.thymeleaf.org<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${param.error}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    错误的用户名和密码.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--method必须为&quot;post&quot;--&gt;</span>
<span class="token comment">&lt;!--th:action=&quot;@{/login}&quot; ，
使用动态参数，表单中会自动生成_csrf隐藏字段，用于防止csrf攻击
login: 和登录页面保持一致即可，SpringSecurity自动进行登录认证--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/login}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--name必须为&quot;username&quot;--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>用户名<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--name必须为&quot;password&quot;--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>密码<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>登录<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3、配置securityfilterchain" tabindex="-1"><a class="header-anchor" href="#_7-3、配置securityfilterchain" aria-hidden="true">#</a> 7.3、配置SecurityFilterChain</h4><p>SecurityConfiguration：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span> form <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    form
        <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//登录页面无需授权即可访问</span>
        <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token comment">//自定义表单用户名参数，默认是username</span>
        <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span> <span class="token comment">//自定义表单密码参数，默认是password</span>
        <span class="token punctuation">.</span><span class="token function">failureUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login?error&quot;</span><span class="token punctuation">)</span> <span class="token comment">//登录失败的返回地址</span>
        <span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用表单授权方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function T(B,A){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[n("a",d,[s("https://docs.spring.io/spring-security/reference/index.html"),t(a)])]),k,n("p",null,[v,n("a",g,[s("GitHub - spring-projects/spring-security-samples"),t(a)])]),m,n("p",null,[s("浏览器中访问："),n("a",h,[s("http://localhost:8080/"),t(a)])]),n("p",null,[s("**浏览器自动跳转到登录页面：**"),n("a",b,[s("http://localhost:8080/login"),t(a)])]),y,n("p",null,[f,n("a",w,[s("Spring Security的底层原理"),t(a)])]),_,n("p",null,[q,n("a",x,[s("Java自定义配置"),t(a)])]),S,n("p",null,[U,n("a",D,[s("localhost:8080/demo/user/list"),t(a)])]),C,n("p",null,[s("**Swagger测试地址：**"),n("a",j,[s("http://localhost:8080/demo/doc.html"),t(a)])]),M,n("p",null,[L,n("a",P,[s("Password Storage :: Spring Security"),t(a)])]),E,F,I])}const N=p(l,[["render",T],["__file","10.SpringSecurity.html.vue"]]);export{N as default};
