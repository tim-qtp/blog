import{_ as p,W as c,X as i,Z as s,a1 as e,a2 as a,C as o,a0 as t}from"./framework-6a3aa88c.js";const l={},r=a(`<h2 id="_1-服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#_1-服务注册到nacos" aria-hidden="true">#</a> 1.服务注册到nacos</h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="_1-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-1-引入依赖" aria-hidden="true">#</a> 1.1.引入依赖</h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><h3 id="_1-2-配置nacos地址" tabindex="-1"><a class="header-anchor" href="#_1-2-配置nacos地址" aria-hidden="true">#</a> 1.2.配置nacos地址</h3><p>在user-service和order-service的application.yml中添加nacos地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><h3 id="_1-3-重启" tabindex="-1"><a class="header-anchor" href="#_1-3-重启" aria-hidden="true">#</a> 1.3.重启</h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><h2 id="_2-服务分级存储模型" tabindex="-1"><a class="header-anchor" href="#_2-服务分级存储模型" aria-hidden="true">#</a> 2.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/f6564401044a0f1674031d2d5b9d4406.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1c37ab0d9c7b3ce310064efc3ba214f3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="_2-1-给user-service配置集群" tabindex="-1"><a class="header-anchor" href="#_2-1-给user-service配置集群" aria-hidden="true">#</a> 2.1.给user-service配置集群</h3><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1b020ab8fda94a4337c568a9309755d5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>默认集群名为DEFAULT</p><p>修改user-service的application.yml文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1e6c32c3ec15291ba183997ff3446677.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/3335d59e99a12c37674e3a7631f89c2e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/3b0aaf1bae12be169fd8c36b5f4fa939.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-nacos小结" tabindex="-1"><a class="header-anchor" href="#_2-2-nacos小结" aria-hidden="true">#</a> 2.2.Nacos小结：</h3><p>1、Nacos服务分级存储模型</p><ul><li>一级是服务，例如userservice</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了userservice的服务器</li></ul><p>2、如何设置实例的集群属性</p><ul><li>修改application.yml文件，添加spring.cloud.nacos.discovery.cluster-name属性即可</li></ul><h2 id="_3-同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#_3-同集群优先的负载均衡" aria-hidden="true">#</a> 3.同集群优先的负载均衡</h2><p>orderservice和userservice的8081和8082都在一个集群中了，我们希望的是orderservice，那此时呢我们希望的是order service发起远程调用时，优先选择8081和8082</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/bc2d8995777666c8df94ccd7ceb610a0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><mark>但是</mark>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><h3 id="_3-1-给order-service配置集群信息" tabindex="-1"><a class="header-anchor" href="#_3-1-给order-service配置集群信息" aria-hidden="true">#</a> <em><strong>3.1.给order-service配置集群信息</strong></em></h3><p>修改order-service的application.yml文件，添加集群配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>spring:
  cloud:
    nacos:
      server-addr: localhost:8848
      discovery:
        cluster-name: HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-修改负载均衡规则" tabindex="-1"><a class="header-anchor" href="#_3-2-修改负载均衡规则" aria-hidden="true">#</a> <em><strong>3.2.修改负载均衡规则</strong></em></h3><p>修改order-service的application.yml文件，修改负载均衡规则：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则 ,NacosRule---优先选择本地集群</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-如果配置了优先访问本地集群-那本地的多个集群都崩了会发生什么" tabindex="-1"><a class="header-anchor" href="#_3-3-如果配置了优先访问本地集群-那本地的多个集群都崩了会发生什么" aria-hidden="true">#</a> 3.3.如果配置了优先访问本地集群，那本地的多个集群都崩了会发生什么?</h3><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/e626c7d4350f4ee02ab4a1b624ed59fd.png" alt="image-20230607235047898" tabindex="0" loading="lazy"><figcaption>image-20230607235047898</figcaption></figure><p>只留一个试试。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>一次跨集群访问发生了，谁呢<span class="token operator">?</span>   userservice
想访问的是杭州，但实际是上海
<span class="token class-name">A</span> cross<span class="token operator">-</span>cluster call occurs，name <span class="token operator">=</span> userservice<span class="token punctuation">,</span> clusterName <span class="token operator">=</span> <span class="token constant">HZ</span><span class="token punctuation">,</span> instance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Instance</span><span class="token punctuation">{</span>instanceId<span class="token operator">=</span>&#39;<span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.172</span>#<span class="token number">8083</span>#<span class="token constant">SH</span>#<span class="token constant">DEFAULT_GROUP</span>@<span class="token annotation punctuation">@userservice</span><span class="token char">&#39;, ip=&#39;</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.172</span>&#39;<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8083</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> healthy<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> enabled<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> ephemeral<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> clusterName<span class="token operator">=</span><span class="token char">&#39;SH&#39;</span><span class="token punctuation">,</span> serviceName<span class="token operator">=</span>&#39;<span class="token constant">DEFAULT_GROUP</span>@<span class="token annotation punctuation">@userservice</span>&#39;<span class="token punctuation">,</span> metadata<span class="token operator">=</span><span class="token punctuation">{</span>preserved<span class="token punctuation">.</span>register<span class="token punctuation">.</span>source<span class="token operator">=</span><span class="token constant">SPRING_CLOUD</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运维人员看见警告就会处理。</p><h3 id="_3-4-总结" tabindex="-1"><a class="header-anchor" href="#_3-4-总结" aria-hidden="true">#</a> 3.4.总结</h3><p>NacosRule负载均衡策略</p><ul><li>优先选择同集群服务实例列表</li><li>本地集群找不到提供者，才去其它集群寻找，并且会报警告</li><li>确定了可用实例列表后，再采用随机负载均衡挑选实例</li></ul><h2 id="_4-权重配置" tabindex="-1"><a class="header-anchor" href="#_4-权重配置" aria-hidden="true">#</a> 4.权重配置</h2><p>实际部署中会出现这样的场景：</p><ul><li>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</li></ul><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/4192d335f35eff4c6d4cf09be162eb5b.png" alt="image-20210713235133225" tabindex="0" loading="lazy"><figcaption>image-20210713235133225</figcaption></figure><p>在弹出的编辑窗口，修改权重：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/b211a65fc38d0425e6ab69792f771c99.png" alt="image-20210713235235219" tabindex="0" loading="lazy"><figcaption>image-20210713235235219</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/df3df2f5a92e80ad89d1ae060c15a04c.png" alt="image-20230608222430037" tabindex="0" loading="lazy"><figcaption>image-20230608222430037</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/8e5807c9f7b537bd94df1af95e43ff17.png" alt="image-20230608222647143" tabindex="0" loading="lazy"><figcaption>image-20230608222647143</figcaption></figure><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote>`,71),u=a(`<h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h4><blockquote><p>实例的权重控制</p><ul><li>Nacos控制台可以设置实例的权重值，0~1之间</li><li>同集群内的多个实例，权重越高被访问的频率越高</li><li>权重设置为0则完全不会被访问</li></ul></blockquote><h2 id="_5-环境隔离" tabindex="-1"><a class="header-anchor" href="#_5-环境隔离" aria-hidden="true">#</a> 5.环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p>开发/测试/生产 三种环境需要隔离 服务和配置的</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/459a09af4f9ddbb94be4ac51b6f8afcb.png" alt="image-20210714000101516" tabindex="0" loading="lazy"><figcaption>image-20210714000101516</figcaption></figure><h3 id="_5-1-创建namespace" tabindex="-1"><a class="header-anchor" href="#_5-1-创建namespace" aria-hidden="true">#</a> 5.1.创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/c7ade712e06eb0395ce562c70ea8a757.png" alt="image-20210714000414781" tabindex="0" loading="lazy"><figcaption>image-20210714000414781</figcaption></figure><p>我们可以点击页面新增按钮，添加一个namespace：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/e193a37f988088684e36bc15548a6de4.png" alt="image-20210714000440143" tabindex="0" loading="lazy"><figcaption>image-20210714000440143</figcaption></figure><p>然后，填写表单：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/3a9563601ac8cbc3c1e4ad8cff2ce9c2.png" alt="image-20210714000505928" tabindex="0" loading="lazy"><figcaption>image-20210714000505928</figcaption></figure><p>就能在页面看到一个新的namespace：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/5f6ab6500651acf4c67b1a6347b0b7be.png" alt="image-20210714000522913" tabindex="0" loading="lazy"><figcaption>image-20210714000522913</figcaption></figure><h3 id="_5-2-给微服务配置namespace" tabindex="-1"><a class="header-anchor" href="#_5-2-给微服务配置namespace" aria-hidden="true">#</a> 5.2.给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 492a7d5d<span class="token punctuation">-</span>237b<span class="token punctuation">-</span>46a1<span class="token punctuation">-</span>a99a<span class="token punctuation">-</span>fa8e98e4b0f9 <span class="token comment"># 命名空间，填ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启order-service后，访问控制台，可以看到下面的结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/684be5121966110be67f2accb3defc1e.png" alt="image-20210714000830703" tabindex="0" loading="lazy"><figcaption>image-20210714000830703</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/484caab3fa8b96f6673848b407a88c1a.png" alt="image-20210714000837140" tabindex="0" loading="lazy"><figcaption>image-20210714000837140</figcaption></figure><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p>`,24),d=a('<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/ba9db871150ba398c31c3b6d97989455.png" alt="image-20210714000941256" tabindex="0" loading="lazy"><figcaption>image-20210714000941256</figcaption></figure><blockquote><p>Nacos环境隔离</p><ul><li>每个namespace都有唯一id</li><li>服务设置namespace时要写id而不是名称</li><li>不同namespace下的服务互相不可见</li></ul></blockquote><h2 id="_6-nacos与eureka的区别" tabindex="-1"><a class="header-anchor" href="#_6-nacos与eureka的区别" aria-hidden="true">#</a> 6.Nacos与Eureka的区别</h2><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/b5d44ae7be32f5dbe38d610c79225db1.png" alt="image-20230609081002359" tabindex="0" loading="lazy"><figcaption>image-20230609081002359</figcaption></figure><p>到目前为止，Nacos和Eurela没什么区别，</p><p>Nacos的服务实例分为两种l类型：</p><ul><li>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</li></ul><p>nacos默认情况下就是临时实例，临时实例栏是 <code>true</code></p>',8),g=a(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/cb62baf822e56533b3e6d2975702a481.png" alt="image-20230609093334913" tabindex="0" loading="lazy"><figcaption>image-20230609093334913</figcaption></figure><ul><li>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</li></ul><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/6b5e436a224ca33cee40593f252b87a5.png" alt="image-20230609093454247" tabindex="0" loading="lazy"><figcaption>image-20230609093454247</figcaption></figure><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置为非临时实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/cebec10ce329a95801de61f390cb98b8.png" alt="image-20210714001728017" tabindex="0" loading="lazy"><figcaption>image-20210714001728017</figcaption></figure><ul><li><p><strong>Nacos与eureka的共同点</strong></p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p><strong>Nacos与Eureka的区别</strong></p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用<mark>主动检测</mark>模式</li><li>临时实例心跳不正常会被剔除，非临时实例则<mark>不会被剔除</mark>（<strong><mark>只是把你标记为不健康</mark></strong>）</li><li>Nacos支持服务列表变更的<mark>消息推送push模式</mark>，服务列表更新更及时</li><li>Nacos集群默认采用<mark>AP</mark>方式，当集群中存在非临时实例时，采用<mark>CP</mark>模式；Eureka采用AP方式</li></ul><p><strong>总结一下</strong>，nacos与eureka的几点区别：</p><p>1、功能作用不同，nacos是一个服务注册与服务发现，而且还是一个配置中心，euraka仅仅只是一个注册中心；</p><p>2、心跳机制不同，nacos可以是主动询问微服务，也可以是微服务主动询问nacos，非临时实例与临时实例</p><p>消费者默认每隔30秒会向注册中心拉取信息，但是服务30内挂了怎么办？这时注册中心已经监听到了不健康的服务，那消费者直接去消费就会出问题。 所以Eureka服务列表更新的频率也就比较差。</p><p>有回应有主动 比渣男好多了！哈哈哈哈哈！！！</p><p><strong>记忆：临时是Nacos的舔狗，Nacos是非临时的舔狗。</strong></p></li></ul><blockquote><p><strong>为什么nacos临时实例采用心跳模式，非临时实例采用主动检测模式，为什么要区别对待？</strong></p><p>Nacos采用心跳模式来监测临时实例的健康状况，而采用主动检测模式来监测非临时实例的健康状况，原因如下：</p><ol><li>对于临时实例，由于这些实例通常是一些<mark>短暂存在于服务列表中的实例</mark>，它们的声明周期较短，因此采用心跳模式更加适合。心跳模式是通过服务提供者定期发送心跳信息告诉注册中心自己还存活着，如果一段时间内没有收到心跳信息，则认为该实例已经下线，将其从服务列表中移除。这种方式可以及时发现实例的下线，避免了误判，并且减少了对网络带宽和系统资源的占用。</li><li>对于非临时实例，这些实例通常存在比较长的生命周期，而采用心跳模式无法保证及时发现实例的下线，因此采用主动检测模式更加适合。主动检测模式是注册中心通过发送HTTP请求或者TCP请求等方式来主动探测服务提供者的状态，以此来保证服务的可用性。这种方式可以更加精确地判断实例的状态，但是也会带来一些额外的负担，因为需要耗费更多的资源和网络带宽。</li></ol></blockquote>`,9);function m(k,b){const n=o("font");return c(),i("div",null,[r,s(n,{color:"green"},{default:e(()=>[t("如果一个服务想要做一个版本的升级，怎么办？ 重启！王者荣耀不停服更新---部分分批更新（设权重） ")]),_:1}),u,s(n,{color:"green"},{default:e(()=>[t("是两个世界的人了！ ")]),_:1}),d,s(n,{color:"red"},{default:e(()=>[t(" 不写，ephemeral: false，停掉，就会等待一会儿后，nacos监测台就会爆红")]),_:1}),g])}const v=p(l,[["render",m],["__file","Registration Center.html.vue"]]);export{v as default};
