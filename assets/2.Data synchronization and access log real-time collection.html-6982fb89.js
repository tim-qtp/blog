import{_ as p,W as o,X as i,$ as n,a0 as s,Z as e,a2 as t,C as c}from"./framework-6a3aa88c.js";const l={},u=n("h2",{id:"_1-canal增量数据同步利器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-canal增量数据同步利器","aria-hidden":"true"},"#"),s(" 1 Canal增量数据同步利器")],-1),r=n("h3",{id:"_1-1-canal介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-canal介绍","aria-hidden":"true"},"#"),s(" 1.1 Canal介绍")],-1),d=n("p",null,"canal主要用途是基于 MySQL 数据库增量日志解析，并能提供增量数据订阅和消费，应用场景十分丰富。",-1),k={href:"https://github.com/alibaba/canal",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/alibaba/canal/releases",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/alibaba/canal/wiki/Docker-QuickStart",target:"_blank",rel:"noopener noreferrer"},b=t(`<p><strong>Canal应用场景</strong></p><p>1.电商场景下商品、用户实时更新同步到至Elasticsearch、solr等搜索引擎； 2.价格、库存发生变更实时同步到redis； 3.数据库异地备份、数据同步； 4.代替使用轮询数据库方式来监控数据库变更，有效改善轮询耗费数据库资源。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586392961813.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>MySQL主从复制原理</strong></p><ul><li><p>MySQL master 将数据变更写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events)</p></li><li><p>MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)</p></li><li><p>MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</p></li></ul><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210127104926939.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Canal工作原理</strong></p><p>1.canal 模拟 <code>MySQL slave</code> 的交互协议，伪装自己为 <code>MySQL slave</code> ，向 <code>MySQL master</code> 发送dump 协议 2.<code>MySQL master</code> 收到 dump 请求，开始推送 <code>binary log</code> 给 slave (即 canal ) 3.canal 解析 <code>binary log</code> 对象(原始为 byte 流)</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586393225994.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-canal安装" tabindex="-1"><a class="header-anchor" href="#_1-2-canal安装" aria-hidden="true">#</a> 1.2 Canal安装</h3><p><strong>配置MySQL</strong></p><p>需要让canal伪装成salve并正确获取mysql中的binary log，首先要开启 Binlog 写入功能，配置 binlog-format 为 ROW 模式</p><p>修改MySQL配置文件，如下操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 执行修改命令</span>
<span class="token function">vi</span> /mnt/mysql/conf/mysql.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 配置文件 mysql.cnf 内容如下</span>
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment"># 设置关闭二进制日志</span>
<span class="token comment">#skip-log-bin</span>

<span class="token comment"># 开启二进制日志</span>
log-bin<span class="token operator">=</span>mysql-bin

<span class="token comment">#开启binlog 选择ROW模式</span>
binlog-format<span class="token operator">=</span>ROW

<span class="token comment">#server_id不要和canal的slaveId重复</span>
<span class="token assign-left variable">server_id</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件修改完成后重启MySQL</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在MySQL中执行以下sql，查询数据库状态</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;log_bin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;binlog_format&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250104175141393.png" alt="log_bin" tabindex="0" loading="lazy"><figcaption>log_bin</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250104175203211.png" alt="binlog_format" tabindex="0" loading="lazy"><figcaption>binlog_format</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250104175219728.png" alt="status" tabindex="0" loading="lazy"><figcaption>status</figcaption></figure><p>创建连接MySQL的账号<code>canal</code>并授予作为 MySQL slave 的权限，执行以下sql：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 创建账号</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> canal IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;canal&#39;</span><span class="token punctuation">;</span> 
<span class="token comment"># 授予权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">REPLICATION</span> SLAVE<span class="token punctuation">,</span> <span class="token keyword">REPLICATION</span> CLIENT <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;canal&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
<span class="token comment"># 修改数据库加密算法,如果数据库是5.7及以下版本，这句话不需要执行</span>
<span class="token comment"># 如果 MySQL 是 8.0 及以上，默认加密方式是 caching_sha2_password，而 Canal 目前不支持这种加密方式，因此需要手动将加密算法改为 mysql_native_password</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;canal&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;canal&#39;</span><span class="token punctuation">;</span> 
<span class="token comment"># 刷新并应用</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建并配置Cancal</strong></p><p>创建canal-server容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> canal-server <span class="token punctuation">\\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">11111</span>:11111 <span class="token punctuation">\\</span>
canal/canal-server:v1.1.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置Canal</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入Canal容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> canal-server /bin/bash

<span class="token comment"># 修改配置文件</span>
<span class="token function">vi</span> /home/admin/canal-server/conf/example/instance.properties

<span class="token comment"># instance.properties需要修改以下三个部分</span>
<span class="token comment"># 修改Canal的slaveId，不能和MySQL的server_id重复</span>
<span class="token assign-left variable">canal.instance.mysql.slaveId</span><span class="token operator">=</span><span class="token number">101</span>
<span class="token comment"># 修改需要进行同步操作的MySQL的连接地址</span>
<span class="token assign-left variable">canal.instance.master.address</span><span class="token operator">=</span><span class="token number">172.31</span>.42.102:3306
<span class="token comment"># 修改需要进行监听的数据库表（不配置的话，就会监听数据库里:的所有表）</span>
<span class="token assign-left variable">canal.instance.filter.regex</span><span class="token operator">=</span>seckill_goods.tb_sku
 
<span class="token comment"># 修改完成后重启Canal服务</span>
<span class="token function">docker</span> restart canal-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250104200218600.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503012225689.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503012226076.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container danger"><p class="hint-container-title">警告</p><p>如果使用的是云服务器的话，这里的MySQL的连接地址，一定要选择内网IP，不然不会生效！ <img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503012228013.png" alt="" loading="lazy"></p></div><p>监听数据库表的配置 <code>canal.instance.filter.regex</code> 如下：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>mysql 数据解析关注的表，Perl正则表达式.
多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\\\) 
常见例子：
1.  所有表：.*   or  .*\\\\..*
2.  canal schema下所有表： canal\\\\..*
3.  canal下的以canal打头的表：canal\\\\.canal.*
4.  canal schema下的一张表：canal.test1
5.  多个规则组合使用：canal\\\\..*,mysql.test1,mysql.test2 (逗号分隔)
注意：此过滤条件只针对row模式的数据有效(ps. mixed/statement因为不解析sql，所以无法准确提取tableName进行过滤)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-canal微服务" tabindex="-1"><a class="header-anchor" href="#_1-3-canal微服务" aria-hidden="true">#</a> 1.3 Canal微服务</h3><p> 我们需要有一个微服务，用于读取canal监听到的变更日志，微服务名字叫<code>seckill-canal</code>。该项目我们需要引入<code>canal-spring-boot-autoconfigure</code>包，并且需要实现<code>EntryHandler&lt;T&gt;</code>接口，该接口中有3个方法，分别为<code>insert</code>、<code>update</code>、<code>delete</code>,这三个方法用于监听数据增删改变化。</p>`,37),g={href:"https://github.com/NormanGyllenhaal/canal-client",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>1)pom.xml</p><p>在<code>seckill-canal</code>中确保有Canal依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--canal--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>top.javatool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>canal-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.1-RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>seckill-canal</code>的bootstrap.yml配置文件中添加以下依赖</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># Canal配置</span>
<span class="token key atrule">canal</span><span class="token punctuation">:</span>
  <span class="token key atrule">server</span><span class="token punctuation">:</span> canal<span class="token punctuation">-</span>server<span class="token punctuation">:</span><span class="token number">11111</span>
  <span class="token comment"># 去个名字</span>
  <span class="token key atrule">destination</span><span class="token punctuation">:</span> example
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)创建<code>com.seckill.canal.handler.SkuHandler</code>实现<code>EntryHandler</code>接口，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@CanalTable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;tb_sku&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkuHandler</span> <span class="token keyword">implements</span> <span class="token class-name">EntryHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 增加数据
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> sku<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========insert:&quot;</span><span class="token operator">+</span>sku<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 修改数据
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> before<span class="token punctuation">,</span> <span class="token class-name">Sku</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========update-before:&quot;</span><span class="token operator">+</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========update-after:&quot;</span><span class="token operator">+</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 删除数据
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> sku<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========delete:&quot;</span><span class="token operator">+</span>sku<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务，会看见canal一直在刷，会找canal服务来获取有没有数据发生改变</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250104202439452.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后现在在sku表中新增一条mysql数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span>-1,entries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span>-1,entries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">4</span>,entries<span class="token operator">=</span><span class="token punctuation">[</span>header <span class="token punctuation">{</span>
  version: <span class="token number">1</span>
  logfileName: <span class="token string">&quot;binlog.000004&quot;</span>
  logfileOffset: <span class="token number">16939</span>
  serverId: <span class="token number">1</span>
  serverenCode: <span class="token string">&quot;UTF-8&quot;</span>
  executeTime: <span class="token number">1735994504000</span>
  sourceType: MYSQL
  schemaName: <span class="token string">&quot;&quot;</span>
  tableName: <span class="token string">&quot;&quot;</span>
  eventLength: <span class="token number">92</span>
<span class="token punctuation">}</span>
entryType: TRANSACTIONBEGIN
storeValue: <span class="token string">&quot; <span class="token entity" title="\\024">\\024</span>&quot;</span>
, header <span class="token punctuation">{</span>
  version: <span class="token number">1</span>
  logfileName: <span class="token string">&quot;binlog.000004&quot;</span>
  logfileOffset: <span class="token number">17152</span>
  serverId: <span class="token number">1</span>
  serverenCode: <span class="token string">&quot;UTF-8&quot;</span>
  executeTime: <span class="token number">1735994504000</span>
  sourceType: MYSQL
  schemaName: <span class="token string">&quot;seckill_goods&quot;</span>
  tableName: <span class="token string">&quot;tb_sku&quot;</span>
  eventLength: <span class="token number">1164</span>
  eventType: INSERT
  props <span class="token punctuation">{</span>
    key: <span class="token string">&quot;rowsCount&quot;</span>
    value: <span class="token string">&quot;1&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
entryType: ROWDATA
storeValue: <span class="token punctuation">..</span>.
<span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>insert:Sku<span class="token punctuation">(</span>id<span class="token operator">=</span>S1235473563734036490, <span class="token assign-left variable">name</span><span class="token operator">=</span>联想（Lenovo）小新Air. 英特尔酷睿 超轻薄笔记本电脑 i-U G TSS高效办公套装  <span class="token number">16</span>英寸  红色  260GSSD  I5  16G  Linux, <span class="token assign-left variable">price</span><span class="token operator">=</span><span class="token number">2899</span>, <span class="token assign-left variable">seckillPrice</span><span class="token operator">=</span><span class="token number">7215</span>, <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">alertNum</span><span class="token operator">=</span><span class="token number">742</span>, <span class="token assign-left variable">image</span><span class="token operator">=</span>https://img13.360buyimg.com/n7/jfs/t1/54714/11/11130/80706/5d81fc99E3b2bd96f/869a35194c403546.jpg, <span class="token assign-left variable">images</span><span class="token operator">=</span>https://img14.360buyimg.com/n7/jfs/t1/85326/22/12388/159738/5e4a5e24Eecd70b49/7407233944c72cb3.jpg,https://img14.360buyimg.com/n7/jfs/t1/104005/13/3378/167316/5ddf6696Ea8341190/b9cfcae8e0319960.jpg,https://img13.360buyimg.com/n7/jfs/t1/54714/11/11130/80706/5d81fc99E3b2bd96f/869a35194c403546.jpg,https://img14.360buyimg.com/n7/jfs/t1/85326/22/12388/159738/5e4a5e24Eecd70b49/7407233944c72cb3.jpg,https://img12.360buyimg.com/n7/jfs/t1/109848/31/7651/151970/5e5dd942Edf02511c/d75224c62e794adf.jpg,https://img12.360buyimg.com/n7/jfs/t1/79105/5/1549/275769/5cfe0819E05803cb2/d56d258b14bad253.jpg, <span class="token assign-left variable">createTime</span><span class="token operator">=</span>Wed Aug <span class="token number">18</span> <span class="token number">11</span>:00:00 CST <span class="token number">2021</span>, <span class="token assign-left variable">updateTime</span><span class="token operator">=</span>Sat Sep <span class="token number">18</span> <span class="token number">10</span>:00:00 CST <span class="token number">2021</span>, <span class="token assign-left variable">seckillBegin</span><span class="token operator">=</span>Sat Sep <span class="token number">18</span> <span class="token number">10</span>:00:00 CST <span class="token number">2021</span>, <span class="token assign-left variable">seckillEnd</span><span class="token operator">=</span>Mon Feb 03 01:03:19 CST <span class="token number">2025</span>, <span class="token assign-left variable">spuId</span><span class="token operator">=</span>P1235473556977012736, <span class="token assign-left variable">category1Id</span><span class="token operator">=</span><span class="token number">161</span>, <span class="token assign-left variable">category2Id</span><span class="token operator">=</span><span class="token number">162</span>, <span class="token assign-left variable">category3Id</span><span class="token operator">=</span><span class="token number">163</span>, <span class="token assign-left variable">category1Name</span><span class="token operator">=</span>电脑、办公, <span class="token assign-left variable">category2Name</span><span class="token operator">=</span>电脑整机, <span class="token assign-left variable">category3Name</span><span class="token operator">=</span>笔记本, <span class="token assign-left variable">brandId</span><span class="token operator">=</span><span class="token number">11516</span>, <span class="token assign-left variable">brandName</span><span class="token operator">=</span>联想, <span class="token assign-left variable">spec</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;显示器&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;16英寸&quot;</span>,<span class="token string">&quot;颜色&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;红色&quot;</span>,<span class="token string">&quot;硬盘类型&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;260GSSD&quot;</span>,<span class="token string">&quot;CPU&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;I5&quot;</span>,<span class="token string">&quot;内存大小&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;16G&quot;</span>,<span class="token string">&quot;系统&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Linux&quot;</span><span class="token punctuation">}</span>, <span class="token assign-left variable">saleNum</span><span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">commentNum</span><span class="token operator">=</span><span class="token number">68</span>, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">islock</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">startDate</span><span class="token operator">=</span>null, <span class="token assign-left variable">startTimestr</span><span class="token operator">=</span>null, <span class="token assign-left variable">len</span><span class="token operator">=</span>null, <span class="token assign-left variable">seckillNum</span><span class="token operator">=</span><span class="token number">1000</span>, <span class="token assign-left variable">audit</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">isdel</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">points</span><span class="token operator">=</span><span class="token number">80</span>, <span class="token assign-left variable">bgtime</span><span class="token operator">=</span><span class="token number">2021091810</span><span class="token punctuation">)</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">5</span>,entries<span class="token operator">=</span><span class="token punctuation">[</span>header <span class="token punctuation">{</span>
  version: <span class="token number">1</span>
  logfileName: <span class="token string">&quot;binlog.000004&quot;</span>
  logfileOffset: <span class="token number">18316</span>
  serverId: <span class="token number">1</span>
  serverenCode: <span class="token string">&quot;UTF-8&quot;</span>
  executeTime: <span class="token number">1735994504000</span>
  sourceType: MYSQL
  schemaName: <span class="token string">&quot;&quot;</span>
  tableName: <span class="token string">&quot;&quot;</span>
  eventLength: <span class="token number">31</span>
<span class="token punctuation">}</span>
entryType: TRANSACTIONEND
storeValue: <span class="token string">&quot;<span class="token entity" title="\\022">\\022</span><span class="token entity" title="\\003">\\003</span>104&quot;</span>
<span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span>-1,entries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span>-1,entries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再修改一条mysql数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span>-1,entries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span>-1,entries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">6</span>,entries<span class="token operator">=</span><span class="token punctuation">[</span>header <span class="token punctuation">{</span>
  version: <span class="token number">1</span>
  logfileName: <span class="token string">&quot;binlog.000004&quot;</span>
  logfileOffset: <span class="token number">18426</span>
  serverId: <span class="token number">1</span>
  serverenCode: <span class="token string">&quot;UTF-8&quot;</span>
  executeTime: <span class="token number">1735994802000</span>
  sourceType: MYSQL
  schemaName: <span class="token string">&quot;&quot;</span>
  tableName: <span class="token string">&quot;&quot;</span>
  eventLength: <span class="token number">93</span>
<span class="token punctuation">}</span>
entryType: TRANSACTIONBEGIN
storeValue: <span class="token string">&quot; <span class="token entity" title="\\024">\\024</span>&quot;</span>
, header <span class="token punctuation">{</span>
  version: <span class="token number">1</span>
  logfileName: <span class="token string">&quot;binlog.000004&quot;</span>
  logfileOffset: <span class="token number">18640</span>
  serverId: <span class="token number">1</span>
  serverenCode: <span class="token string">&quot;UTF-8&quot;</span>
  executeTime: <span class="token number">1735994802000</span>
  sourceType: MYSQL
  schemaName: <span class="token string">&quot;seckill_goods&quot;</span>
  tableName: <span class="token string">&quot;tb_sku&quot;</span>
  eventLength: <span class="token number">1488</span>
  eventType: UPDATE
  props <span class="token punctuation">{</span>
    key: <span class="token string">&quot;rowsCount&quot;</span>
    value: <span class="token string">&quot;1&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
entryType: ROWDATA
storeValue: <span class="token punctuation">..</span>.
<span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>update-before:Sku<span class="token punctuation">(</span>id<span class="token operator">=</span>null, <span class="token assign-left variable">name</span><span class="token operator">=</span>null, <span class="token assign-left variable">price</span><span class="token operator">=</span><span class="token number">7</span>, <span class="token assign-left variable">seckillPrice</span><span class="token operator">=</span>null, <span class="token assign-left variable">num</span><span class="token operator">=</span>null, <span class="token assign-left variable">alertNum</span><span class="token operator">=</span>null, <span class="token assign-left variable">image</span><span class="token operator">=</span>null, <span class="token assign-left variable">images</span><span class="token operator">=</span>null, <span class="token assign-left variable">createTime</span><span class="token operator">=</span>null, <span class="token assign-left variable">updateTime</span><span class="token operator">=</span>null, <span class="token assign-left variable">seckillBegin</span><span class="token operator">=</span>null, <span class="token assign-left variable">seckillEnd</span><span class="token operator">=</span>null, <span class="token assign-left variable">spuId</span><span class="token operator">=</span>null, <span class="token assign-left variable">category1Id</span><span class="token operator">=</span>null, <span class="token assign-left variable">category2Id</span><span class="token operator">=</span>null, <span class="token assign-left variable">category3Id</span><span class="token operator">=</span>null, <span class="token assign-left variable">category1Name</span><span class="token operator">=</span>null, <span class="token assign-left variable">category2Name</span><span class="token operator">=</span>null, <span class="token assign-left variable">category3Name</span><span class="token operator">=</span>null, <span class="token assign-left variable">brandId</span><span class="token operator">=</span>null, <span class="token assign-left variable">brandName</span><span class="token operator">=</span>null, <span class="token assign-left variable">spec</span><span class="token operator">=</span>null, <span class="token assign-left variable">saleNum</span><span class="token operator">=</span>null, <span class="token assign-left variable">commentNum</span><span class="token operator">=</span>null, <span class="token assign-left variable">status</span><span class="token operator">=</span>null, <span class="token assign-left variable">islock</span><span class="token operator">=</span>null, <span class="token assign-left variable">startDate</span><span class="token operator">=</span>null, <span class="token assign-left variable">startTimestr</span><span class="token operator">=</span>null, <span class="token assign-left variable">len</span><span class="token operator">=</span>null, <span class="token assign-left variable">seckillNum</span><span class="token operator">=</span>null, <span class="token assign-left variable">audit</span><span class="token operator">=</span>null, <span class="token assign-left variable">count</span><span class="token operator">=</span>null, <span class="token assign-left variable">isdel</span><span class="token operator">=</span>null, <span class="token assign-left variable">points</span><span class="token operator">=</span><span class="token number">80</span>, <span class="token assign-left variable">bgtime</span><span class="token operator">=</span>null<span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>update-after:Sku<span class="token punctuation">(</span>id<span class="token operator">=</span>S1235464737957928960, <span class="token assign-left variable">name</span><span class="token operator">=</span>新诗“精魂”的追寻：穆旦研究新探  诗歌  西班牙语  老年, <span class="token assign-left variable">price</span><span class="token operator">=</span><span class="token number">8</span>, <span class="token assign-left variable">seckillPrice</span><span class="token operator">=</span><span class="token number">8551</span>, <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">alertNum</span><span class="token operator">=</span><span class="token number">696</span>, <span class="token assign-left variable">image</span><span class="token operator">=</span>https://img10.360buyimg.com/n7/jfs/t1/26726/33/15408/237421/5cb081f4E1da4979a/8583ee357ff986d1.jpg, <span class="token assign-left variable">images</span><span class="token operator">=</span>,https://img10.360buyimg.com/n7/jfs/t1/26726/33/15408/237421/5cb081f4E1da4979a/8583ee357ff986d1.jpg,https://img10.360buyimg.com/n7/10834/e478cacc-aaa5-405d-816c-77842ba74002.jpg,https://img13.360buyimg.com/n7/jfs/t1/22631/4/13382/142479/5c9dfa40E5849b686/3b72b4fd427638a5.jpg,, <span class="token assign-left variable">createTime</span><span class="token operator">=</span>Wed Aug <span class="token number">18</span> <span class="token number">11</span>:00:00 CST <span class="token number">2021</span>, <span class="token assign-left variable">updateTime</span><span class="token operator">=</span>Sat Sep <span class="token number">18</span> <span class="token number">10</span>:00:00 CST <span class="token number">2021</span>, <span class="token assign-left variable">seckillBegin</span><span class="token operator">=</span>Sat Sep <span class="token number">18</span> <span class="token number">10</span>:00:00 CST <span class="token number">2021</span>, <span class="token assign-left variable">seckillEnd</span><span class="token operator">=</span>Mon Feb 03 01:03:19 CST <span class="token number">2025</span>, <span class="token assign-left variable">spuId</span><span class="token operator">=</span>P1235464735172911104, <span class="token assign-left variable">category1Id</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">category2Id</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">category3Id</span><span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">category1Name</span><span class="token operator">=</span>图书、音像、电子书刊, <span class="token assign-left variable">category2Name</span><span class="token operator">=</span>电子书刊, <span class="token assign-left variable">category3Name</span><span class="token operator">=</span>电子书, <span class="token assign-left variable">brandId</span><span class="token operator">=</span><span class="token number">17424</span>, <span class="token assign-left variable">brandName</span><span class="token operator">=</span>威图, <span class="token assign-left variable">spec</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;书籍类型&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;诗歌&quot;</span>,<span class="token string">&quot;语言&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;西班牙语&quot;</span>,<span class="token string">&quot;适合人群&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;老年&quot;</span><span class="token punctuation">}</span>, <span class="token assign-left variable">saleNum</span><span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">commentNum</span><span class="token operator">=</span><span class="token number">476</span>, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">islock</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">startDate</span><span class="token operator">=</span>null, <span class="token assign-left variable">startTimestr</span><span class="token operator">=</span>null, <span class="token assign-left variable">len</span><span class="token operator">=</span>null, <span class="token assign-left variable">seckillNum</span><span class="token operator">=</span><span class="token number">1000</span>, <span class="token assign-left variable">audit</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">isdel</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">points</span><span class="token operator">=</span><span class="token number">80</span>, <span class="token assign-left variable">bgtime</span><span class="token operator">=</span><span class="token number">2021091810</span><span class="token punctuation">)</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">7</span>,entries<span class="token operator">=</span><span class="token punctuation">[</span>header <span class="token punctuation">{</span>
  version: <span class="token number">1</span>
  logfileName: <span class="token string">&quot;binlog.000004&quot;</span>
  logfileOffset: <span class="token number">20128</span>
  serverId: <span class="token number">1</span>
  serverenCode: <span class="token string">&quot;UTF-8&quot;</span>
  executeTime: <span class="token number">1735994802000</span>
  sourceType: MYSQL
  schemaName: <span class="token string">&quot;&quot;</span>
  tableName: <span class="token string">&quot;&quot;</span>
  eventLength: <span class="token number">31</span>
<span class="token punctuation">}</span>
entryType: TRANSACTIONEND
storeValue: <span class="token string">&quot;<span class="token entity" title="\\022">\\022</span><span class="token entity" title="\\003">\\003</span>106&quot;</span>
<span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span>-1,entries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
获取消息 Message<span class="token punctuation">[</span>id<span class="token operator">=</span>-1,entries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,raw<span class="token operator">=</span>false,rawEntries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序启动后，修改<code>tb_sku</code>数据，可以看到控制会打印修改前后的数据：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250104204915048.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-同步数据" tabindex="-1"><a class="header-anchor" href="#_2-同步数据" aria-hidden="true">#</a> 2 同步数据</h2><h3 id="_2-1-索引库同步" tabindex="-1"><a class="header-anchor" href="#_2-1-索引库同步" aria-hidden="true">#</a> 2.1 索引库同步</h3><p> 当<code>tb_sku</code>秒杀商品发生变化时，我们应该<mark>同时变更索引库中的索引数据</mark>，比如秒杀商品增加，则需要同步<mark>增加</mark>秒杀商品的索引，如果有秒杀商品删除，则需要同步<mark>移除</mark>秒杀<mark>商品</mark>。</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>需求：当MySQL中的商品数据发生变化时，同步到ES索引库中

分析：使用Canal监听MySQL数据库，对增、删、改增量消息进行处理
     新增：调用索引库新增接口
     修改：判断秒杀商品status：修改后为2，修改索引库；修改后为1，则删除索引库
     删除：删除索引库数据

步骤：
    1：在seckill-canal中添加SkuHandler方法
    2：实现增、删、改方法，使用Fegin调用seckill-search服务进行ES索引库同步
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>seckill-canal</code>中的<code>com.seckill.handler.SkuHandler</code>的增删改方法，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@CanalTable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;tb_sku&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkuHandler</span> <span class="token keyword">implements</span> <span class="token class-name">EntryHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SkuInfoFeign</span> skuInfoFeign<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 增加数据监听
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> sku<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// status=2 表示为秒杀商品，进行相关新增操作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sku<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//同步索引</span>
            skuInfoFeign<span class="token punctuation">.</span><span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sku<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 修改数据监听
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> before<span class="token punctuation">,</span> <span class="token class-name">Sku</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>after<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//同步索引库</span>
            skuInfoFeign<span class="token punctuation">.</span><span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>before<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> after<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//删除索引库</span>
            skuInfoFeign<span class="token punctuation">.</span><span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//逻辑删除，判断状态isdel</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>after<span class="token punctuation">.</span><span class="token function">getIsdel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//删除索引库</span>
            skuInfoFeign<span class="token punctuation">.</span><span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 删除数据监听 商品只做逻辑删除，没有物理删除，所以不用处理删除监听
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> sku<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启Feign功能：<code>@EnableFeignClients(basePackages = {&quot;com.seckill.search.feign&quot;})</code></p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586481189056.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时对数据库中<code>tb_sku</code>表进行增删改的时候，会同步到索引库中。</p><p><strong>新增：</strong></p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250104231224333.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>之前索引库中没有，</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250105001936039.png" alt="image-20250105001936039" tabindex="0" loading="lazy"><figcaption>image-20250105001936039</figcaption></figure><p>现在可以查到了，</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250105002017383.png" alt="image-20250105002017383" tabindex="0" loading="lazy"><figcaption>image-20250105002017383</figcaption></figure><p><strong>修改：</strong></p><p>上面是<code>1207</code>，改完是<code>1277</code></p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250105002111746.png" alt="image-20250105002111746" tabindex="0" loading="lazy"><figcaption>image-20250105002111746</figcaption></figure><p><strong>删除：</strong></p><p>删除是逻辑删除，所以isDel改为2，</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250105002524811.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250105002721059.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，索引库中没有了！</p><h3 id="_2-2-静态页同步" tabindex="-1"><a class="header-anchor" href="#_2-2-静态页同步" aria-hidden="true">#</a> 2.2 静态页同步</h3><p> 只需要添加Feign包，注入SkuPageFeign，根据增删改不同的需求实现生成静态页或删除静态页。</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>需求：当MySQL中的商品数据发生变化时，同步操作商品静态页

分析：使用Canal监听MySQL数据库，对增、删、改增量消息进行处理
     新增：判断秒杀商品status为2，则调用新增html静态页接口
     修改：判断秒杀商品status：修改后为2，修改静态页；修改后为1，则删除静态页
     删除：商品数据只做逻辑删除，判断秒杀商品isdel为2，则删除html静态页

步骤：
     1：新增Feign接口
     2：在seckill-canal中修改SkuHandler方法
     3：实现方法的增、删、改方法，使用Fegin调用seckill-page服务进行商品静态页数据同步
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增Feign接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>seckill<span class="token punctuation">.</span>search<span class="token punctuation">.</span>feign</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>seckill<span class="token punctuation">.</span>goods<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Sku</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>seckill<span class="token punctuation">.</span>search<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">SkuInfo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>seckill<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Result</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestBody</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;seckill-search&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SkuInfoFeign</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 将一条记录导入到搜索引擎中
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/search/modify/{type}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Result</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> type<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SkuInfo</span> skuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 修改Sku
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/search/modify/sku/{type}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Result</span> <span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> type<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Sku</span> sku<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>SkuHandler</code>，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@CanalTable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;tb_sku&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkuHandler</span> <span class="token keyword">implements</span> <span class="token class-name">EntryHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SkuInfoFeign</span> skuInfoFeign<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SkuPageFeign</span> skuPageFeign<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 增加数据监听
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> sku<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// status=2 表示为秒杀商品，进行相关新增操作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sku<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//同步索引</span>
            skuInfoFeign<span class="token punctuation">.</span><span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sku<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//同步静态页</span>
            skuPageFeign<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>sku<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 修改数据监听
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> before<span class="token punctuation">,</span> <span class="token class-name">Sku</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>after<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//同步索引库</span>
            skuInfoFeign<span class="token punctuation">.</span><span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//同步静态页</span>
            skuPageFeign<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>after<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>before<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> after<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//删除索引库</span>
            skuInfoFeign<span class="token punctuation">.</span><span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//删除静态页</span>
            skuPageFeign<span class="token punctuation">.</span><span class="token function">delHtml</span><span class="token punctuation">(</span>after<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//逻辑删除，判断状态isdel</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>after<span class="token punctuation">.</span><span class="token function">getIsdel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//删除索引库</span>
            skuInfoFeign<span class="token punctuation">.</span><span class="token function">modifySku</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//删除静态页</span>
            skuPageFeign<span class="token punctuation">.</span><span class="token function">delHtml</span><span class="token punctuation">(</span>after<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 删除数据监听 商品只做逻辑删除，没有物理删除，所以不用处理删除监听
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Sku</span> sku<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时不要忘了添加feign包：<code>@EnableFeignClients(basePackages = {&quot;com.seckill.search.feign&quot;,&quot;com.seckill.page.feign&quot;})</code></p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586482448734.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>测试的时候，在数据对数据进行增删改，静态页也会同步操作。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503012333957.png" alt="新增修改静态页也会变化" tabindex="0" loading="lazy"><figcaption>新增修改静态页也会变化</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503012334331.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-3-配置404页面" tabindex="-1"><a class="header-anchor" href="#_2-3-配置404页面" aria-hidden="true">#</a> 2.3 配置404页面</h3><p>以前只有sku页面，</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250105134621583.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问不存在的页面，就会报404错误</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250105134658661.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了提供更好的用户体验，我们可以在Nginx中统一配置404页面。</p><p>在这里提供<strong>两种404的配置方式，任选其一</strong>即可</p><p>首先需要准备一个404提示页面：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建并编辑404页面</span>
<span class="token function">vim</span> /usr/local/openresty/nginx/html/404.html

<span class="token comment"># 内容就是一个普通的html页面，例如以下内容：</span>

<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>商品下架<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>该商品已下架<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-1-通用404页面配置" tabindex="-1"><a class="header-anchor" href="#_2-3-1-通用404页面配置" aria-hidden="true">#</a> 2.3.1 通用404页面配置</h4><p>在nginx的 http-&gt;server 部分都生效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改配置文件nginx.conf</span>
<span class="token function">vim</span> /usr/local/openresty/nginx/conf/nginx.conf

<span class="token comment"># 在http配置中添加以下配置：</span>
fastcgi_intercept_errors on<span class="token punctuation">;</span>

<span class="token comment"># 在对应的server中添加以下配置</span>
error_page  <span class="token number">404</span>              /404.html<span class="token punctuation">;</span>

<span class="token comment"># 保存并退出nginx.conf的修改，nginx重载</span>
nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件效果如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210826111011492.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在再试试</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503020008836.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-3-2-指定路径404页面配置" tabindex="-1"><a class="header-anchor" href="#_2-3-2-指定路径404页面配置" aria-hidden="true">#</a> 2.3.2 指定路径404页面配置</h4><p>上面的404页面对所有的location都生效，但是</p><p>如果希望404提示页面只对某一个请求路径生效，可以进行如下配置</p><p>然后将之前的配置注释掉</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改配置文件nginx.conf</span>
<span class="token function">vim</span> /usr/local/openresty/nginx/conf/nginx.conf

<span class="token comment"># 在server中添加404页面的请求信息</span>
        location @np <span class="token punctuation">{</span>
            rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$     /404.html<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


<span class="token comment"># 在server的Location中添加 try_files属性</span>
        location /items/ <span class="token punctuation">{</span>
            root   /usr/local/server/web/<span class="token punctuation">;</span>
            try_files <span class="token variable">$uri</span> @np<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
<span class="token comment"># 保存并退出nginx.conf的修改，并执行nginx重载</span>
nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件效果如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210826110738218.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-分布式任务调度" tabindex="-1"><a class="header-anchor" href="#_3-分布式任务调度" aria-hidden="true">#</a> 3 分布式任务调度</h2><p>定时任务使用场景：</p><ul><li>订单超时关闭</li><li>缓存数据定时更新</li><li>定时发送短信、邮件</li><li>数据定时同步</li><li>计算统计报表</li></ul><p>实现方法：while(true)+sleep，Timer，Quartz，Spring Scheduling</p><h3 id="_3-1-分布式任务调度介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-分布式任务调度介绍" aria-hidden="true">#</a> 3.1 分布式任务调度介绍</h3><p> 很多时候，我们需要定时执行一些程序完成一些预定要完成的操作，如果手动处理，一旦任务量过大，就非常麻烦，所以用定时任务去操作是个非常不错的选项。</p><p> 现在的应用多数是分布式或者微服务，所以我们需要的是分布式任务调度，那么现在分布式任务调度流行的主要有elastic-job、xxl-job、quartz等，我们这里做一个对比：</p><table><thead><tr><th>feature</th><th>quartz</th><th>elastic-job</th><th>xxl-job</th><th>antares</th><th>opencron</th></tr></thead><tbody><tr><td>依赖</td><td>mysql</td><td>jdk1.7+, zookeeper 3.4.6+ ,maven3.0.4+</td><td>mysql ,jdk1.7+ , maven3.0+</td><td>jdk 1.7+ , redis , zookeeper</td><td>jdk1.7+ , Tomcat8.0+</td></tr><tr><td>HA</td><td>多节点部署，通过竞争数据库锁来保证只有一个节点执行任务</td><td>通过zookeeper的注册与发现，可以动态的添加服务器。 支持水平扩容</td><td>集群部署</td><td>集群部署</td><td>—</td></tr><tr><td>任务分片</td><td>—</td><td>支持</td><td>支持</td><td>支持</td><td>—</td></tr><tr><td>文档完善</td><td>完善</td><td>完善</td><td>完善</td><td>文档略少</td><td>文档略少</td></tr><tr><td>管理界面</td><td>无</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>难易程度</td><td>简单</td><td>简单</td><td>简单</td><td>一般</td><td>一般</td></tr><tr><td>公司</td><td>OpenSymphony</td><td>当当网</td><td>个人</td><td>个人</td><td>个人</td></tr><tr><td>高级功能</td><td>—</td><td>弹性扩容，多种作业模式，失效转移，运行状态收集，多线程处理数据，幂等性，容错处理，spring命名空间支持</td><td>弹性扩容，分片广播，故障转移，Rolling实时日志，GLUE（支持在线编辑代码，免发布）,任务进度监控，任务依赖，数据加密，邮件报警，运行报表，国际化</td><td>任务分片， 失效转移，弹性扩容 ，</td><td>时间规则支持quartz和crontab ，kill任务， 现场执行，查询任务运行状态</td></tr><tr><td>使用企业</td><td>大众化产品，对分布式调度要求不高的公司大面积使用</td><td>36氪，当当网，国美，金柚网，联想，唯品会，亚信，平安，猪八戒</td><td>大众点评，运满满，优信二手车，拍拍贷</td><td>—</td><td>—</td></tr></tbody></table><h3 id="_3-2-elastic-job讲解" tabindex="-1"><a class="header-anchor" href="#_3-2-elastic-job讲解" aria-hidden="true">#</a> 3.2 elastic-job讲解</h3>`,82),h={href:"https://shardingsphere.apache.org/elasticjob/index_zh.html",target:"_blank",rel:"noopener noreferrer"},y=t(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586487263884.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="调度模型-lite-cloud" tabindex="-1"><a class="header-anchor" href="#调度模型-lite-cloud" aria-hidden="true">#</a> 调度模型：lite&amp;cloud</h5><h5 id="弹性调度" tabindex="-1"><a class="header-anchor" href="#弹性调度" aria-hidden="true">#</a> 弹性调度：</h5><p>ElasticJob可以根据分片策略把任务分成多个分片，然后交由不同的服务进行处理。相关信息由注册中心进行调度。</p><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/sharding.png" alt="分片作业" style="zoom:50%;"><h5 id="资源最大限度利用" tabindex="-1"><a class="header-anchor" href="#资源最大限度利用" aria-hidden="true">#</a> 资源最大限度利用：</h5><p>ElasticJob 提供最灵活的方式，最大限度的提高执行作业的吞吐量。 当新增加作业服务器时，ElasticJob 会通过注册中心的临时节点的变化感知到新服务器的存在，并在下次任务调度的时候重新分片，新的服务器会承载一部分作业分片。</p><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/sacle-out.png" alt="作业扩容" style="zoom:50%;"><h5 id="高可用" tabindex="-1"><a class="header-anchor" href="#高可用" aria-hidden="true">#</a> 高可用：</h5><p>当作业服务器在运行中宕机时，注册中心同样会通过临时节点感知，并将在下次运行时将分片转移至仍存活的服务器，以达到作业高可用的效果。 本次由于服务器宕机而未执行完的作业，则可以通过失效转移的方式继续执行。</p><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/ha.png" alt="作业高可用" style="zoom:50%;"><h4 id="_3-2-1-静态任务案例" tabindex="-1"><a class="header-anchor" href="#_3-2-1-静态任务案例" aria-hidden="true">#</a> 3.2.1 静态任务案例</h4><p>这里的案例我们先实现静态任务案例，静态任务案例也就是执行时间事先写好，硬编码进代码中。</p><p>创建Zookeeper：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> zk <span class="token punctuation">\\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3181</span>:2181 zookeeper:3.4.14
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例实现步骤：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>1.引入依赖包
2.配置zookeeper节点以及任务名称命名空间
3.实现自定义任务，需要实现SimpleJob接口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1)在<code>seckill-goods</code>中引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- ElasticJobAutoConfiguration自动配置类作用--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.kuhn-he<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elastic-job-lite-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)配置elastic-job</p><p>在<code>bootstrap.yml</code>中配置<code>elastic-job</code>，如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">elaticjob</span><span class="token punctuation">:</span>
  <span class="token key atrule">zookeeper</span><span class="token punctuation">:</span>
    <span class="token key atrule">server-lists</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>server<span class="token punctuation">:</span><span class="token number">3181</span> <span class="token comment">#zookeeper的地址</span>
    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> updatetask <span class="token comment">#定时任务命名空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3)任务创建</p><p>创建<code>com.seckill.goods.task.statictask.StaticJob</code>，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ElasticSimpleJob</span><span class="token punctuation">(</span>
        cron <span class="token operator">=</span> <span class="token string">&quot;1/5 * * * * ?&quot;</span><span class="token punctuation">,</span>   <span class="token comment">//任务执行周期，任务会从第 1 秒开始，每隔 5 秒执行一次。例如：00:00:01, 00:00:06, 00:00:11, ...</span>
        <span class="token comment">// Cron 表达式的格式为：秒 分 时 日 月 周（任意） 年（年可以省略）</span>
        jobName <span class="token operator">=</span> <span class="token string">&quot;updatetask&quot;</span><span class="token punctuation">,</span>   <span class="token comment">//和定时任务命名空间保持一致</span>
        shardingTotalCount <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">//分片</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticJob</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleJob</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 业务处理方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">ShardingContext</span> shardingContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;时间：&quot;</span> <span class="token operator">+</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>讲解：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>cron:定时表达式
jobName：这里和bootstrap.yml中的namespace保持一致
shardingTotalCount：分片数量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看到每隔五秒打印一次：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021256009.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-2-2-动态任务案例" tabindex="-1"><a class="header-anchor" href="#_3-2-2-动态任务案例" aria-hidden="true">#</a> 3.2.2 动态任务案例</h4>`,30),q={href:"https://github.com/LuoLiangDSGA/spring-learning/tree/master/boot-elasticjob",target:"_blank",rel:"noopener noreferrer"},w=t(`<p> 动态任务案例主要是讲解程序在运行时，动态添加定时任务，这种场景应用非常广泛。使用elastic-job实现动态添加定时任务的实现有点复杂，我们接下来实际操作一次。</p><p>步骤：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>1.配置初始化的zookeeper地址
2.自定义任务处理过程-实现SimpleJob
3.配置的定时任务命名空间(不一定会使用)
4.注册初始化数据
5.监听器-&gt;任务执行前后监听（可有可无）
6.动态添加定时任务实现
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-2-1-入门案例" tabindex="-1"><a class="header-anchor" href="#_3-2-2-1-入门案例" aria-hidden="true">#</a> 3.2.2.1 入门案例</h5><p><strong>1. 注册中心配置</strong></p><p><code>bootstrap.yml</code> 添加配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 动态定时任务</span>
<span class="token key atrule">zkserver</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>server<span class="token punctuation">:</span><span class="token number">3181</span>
<span class="token key atrule">zknamespace</span><span class="token punctuation">:</span> zknamesp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 创建任务</strong></p><p>创建任务类： <code>com.seckill.goods.task.dynamic.DynamicJob</code></p><p>这里因为有很多的定时任务，所以把任务名称也加过来。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicJob</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleJob</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 实现对应的任务
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">ShardingContext</span> shardingContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取请求的参数</span>
        <span class="token class-name">String</span> id <span class="token operator">=</span> shardingContext<span class="token punctuation">.</span><span class="token function">getJobParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> jobName <span class="token operator">=</span> shardingContext<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jobName <span class="token operator">+</span> <span class="token string">&quot;时间：&quot;</span> <span class="token operator">+</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:::&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建配置类配置注册中心信息，<code>com.seckill.goods.task.dynamic.ElasticjobDynamicConfig</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticjobDynamicConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${zkserver}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> zkserver<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${zknamespace}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> zknamespace<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ZookeeperRegistryCenter</span> zookeeperRegistryCenter<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 1.配置初始化数据
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ZookeeperConfiguration</span> <span class="token function">zkConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.Zookeeper地址</span>
        <span class="token comment">//2.定时任务命名空间</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZookeeperConfiguration</span><span class="token punctuation">(</span>zkserver<span class="token punctuation">,</span> zknamespace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 2.注册初始化数据
     */</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ZookeeperRegistryCenter</span> <span class="token function">registryCenter</span><span class="token punctuation">(</span><span class="token class-name">ZookeeperConfiguration</span> zkConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZookeeperRegistryCenter</span><span class="token punctuation">(</span>zkConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 3.动态添加定时任务案例
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDynamicTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">,</span> <span class="token class-name">String</span> cron<span class="token punctuation">,</span> <span class="token keyword">int</span> shardingTotalCount<span class="token punctuation">,</span> 
                               <span class="token class-name">SimpleJob</span> instance<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.添加Elastjob-lite的任务作业器</span>
        <span class="token class-name">LiteJobConfiguration</span> liteJobConfiguration <span class="token operator">=</span> <span class="token class-name">LiteJobConfiguration</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">SimpleJobConfiguration</span><span class="token punctuation">(</span>
                        <span class="token class-name">JobCoreConfiguration</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> cron<span class="token punctuation">,</span> shardingTotalCount<span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">jobParameter</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token comment">//额外的参数</span>
                                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//overwrite(true)覆盖原来同名的任务</span>

        <span class="token comment">//2.将Lite的任务作业器添加到Spring的任务启动器中，并初始化</span>
        <span class="token keyword">new</span> <span class="token class-name">SpringJobScheduler</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> zookeeperRegistryCenter<span class="token punctuation">,</span> liteJobConfiguration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 编写测试Controller</strong></p><p>创建Controller用于测试，<code>com.seckill.goods.controller.TaskController</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/task&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ElasticjobDynamicConfig</span> elasticjobDynamicConfig<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 动态定时任务案例测试
     */</span>
    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">,</span> <span class="token class-name">Long</span> time<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> cron <span class="token operator">=</span> <span class="token string">&quot;0/&quot;</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">&quot; * * * * ?&quot;</span><span class="token punctuation">;</span>

        elasticjobDynamicConfig<span class="token punctuation">.</span><span class="token function">addDynamicTask</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> cron<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DynamicJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">StatusCode</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token string">&quot;执行成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里小记一下代码什么意思：</p><blockquote><p><strong><code>String cron = &quot;0/5 \\* \\* \\* \\* ?&quot;;</code></strong></p><ol><li><strong><code>0/5</code>（秒）</strong><ul><li>表示从第0秒开始，每隔5秒触发一次。</li><li>例如：0秒、5秒、10秒、15秒……依此类推。</li></ul></li><li><strong><code>*</code>（分钟）</strong><ul><li>表示每分钟的每一秒都匹配。</li><li>由于秒字段已经是<code>0/5</code>，所以这里表示每分钟的第0秒、第5秒、第10秒……都会触发。</li></ul></li><li><strong><code>*</code>（小时）</strong><ul><li>表示每小时的每一分钟都匹配。</li><li>结合前面的字段，表示每小时的每分钟的第0秒、第5秒、第10秒……都会触发。</li></ul></li><li><strong><code>*</code>（日）</strong><ul><li>表示每天的每一小时都匹配。</li><li>结合前面的字段，表示每天的每小时的每分钟的第0秒、第5秒、第10秒……都会触发。</li></ul></li><li><strong><code>*</code>（月）</strong><ul><li>表示每月的每一天都匹配。</li><li>结合前面的字段，表示每月的每天的每小时的每分钟的第0秒、第5秒、第10秒……都会触发。</li></ul></li><li><strong><code>?</code>（星期）</strong><ul><li>表示不指定具体的某一天。</li><li>在Cron表达式中，日和星期是互斥的，不能同时指定。如果指定了日字段，星期字段必须为<code>?</code>，反之亦然。</li></ul></li></ol><ul><li><code>jobName</code>：任务的名称，用于标识任务。</li><li><code>cron</code>：任务的调度时间，即前面定义的Cron表达式。</li><li><code>1</code>：任务的分片数量（sharding），表示任务可以被分成多少片并行执行。</li><li><code>new DynamicJob()</code>：任务的具体实现类，<code>DynamicJob</code>是一个自定义的任务类，需要实现任务的具体逻辑。</li><li><code>id</code>：任务的唯一标识符，用于区分不同的任务实例。</li></ul></blockquote><p>Postman发送定时任务测试：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021410141.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021410459.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><mark>但是呢</mark>，此时还有个小问题，如果现在修改为3秒，发现虽然有了初始化日志，但还是不会改变，还是5秒，为什么呢？</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021417837.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因为没有设置覆盖！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LiteJobConfiguration</span> liteJobConfiguration <span class="token operator">=</span> <span class="token class-name">LiteJobConfiguration</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">SimpleJobConfiguration</span><span class="token punctuation">(</span>
        <span class="token class-name">JobCoreConfiguration</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> cron<span class="token punctuation">,</span> shardingTotalCount<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">jobParameter</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token comment">//额外的参数</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//overwrite(true)覆盖原来同名的任务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021417675.png" alt="" loading="lazy"> 现在就好了！</p><p>再改一下不同的id请求，发现同样也生效了</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021423500.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_3-2-2-1-date转cron" tabindex="-1"><a class="header-anchor" href="#_3-2-2-1-date转cron" aria-hidden="true">#</a> 3.2.2.1 Date转Cron</h5><p>为什么要操作这步呢？</p><p>因为很多时候，你直接用Cron表达式写起来不是很方便，而我们的任务到底什么时候来执行，就很容易确定，比如当秒杀结束的时候，就把秒杀商品进行处理！什么时候结束，这是不是有个时间，我们可以把时间转换成Cron表达式。</p><h5 id="在elasticjobdynamicconfig中添加代码" tabindex="-1"><a class="header-anchor" href="#在elasticjobdynamicconfig中添加代码" aria-hidden="true">#</a> 在ElasticjobDynamicConfig中添加代码：</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//cron表达式格式</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> cron <span class="token operator">=</span> <span class="token string">&quot;ss mm HH dd MM ? yyyy&quot;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 时间转换成Cron表达式
 * &quot;1/5 * * * * ?&quot;;
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">date2cron</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改TaskController为以下内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 动态定时任务案例测试
 */</span>
<span class="token annotation punctuation">@GetMapping</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">,</span> <span class="token class-name">Long</span> time<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// String cron = &quot;1/&quot; + time + &quot; * * * * ?&quot;;</span>

    <span class="token comment">//在当前时间往后延迟time毫秒执行</span>
    <span class="token class-name">String</span> cron <span class="token operator">=</span> <span class="token class-name">ElasticjobDynamicConfig</span><span class="token punctuation">.</span><span class="token function">date2cron</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    elasticjobDynamicConfig<span class="token punctuation">.</span><span class="token function">addDynamicTask</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> cron<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DynamicJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">StatusCode</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">,</span> <span class="token string">&quot;执行成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021432539.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_3-2-2-3-监听器使用" tabindex="-1"><a class="header-anchor" href="#_3-2-2-3-监听器使用" aria-hidden="true">#</a> 3.2.2.3 监听器使用</h5><p>我们可以在任务之前和之后也处理一些逻辑！</p><p>编写监听器：<code>com.seckill.goods.task.dynamic.DynamicListener</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicListener</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDistributeOnceElasticJobListener</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 构造函数
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">DynamicListener</span><span class="token punctuation">(</span><span class="token keyword">long</span> startedTimeoutMilliseconds<span class="token punctuation">,</span> <span class="token keyword">long</span> completedTimeoutMilliseconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>startedTimeoutMilliseconds<span class="token punctuation">,</span> completedTimeoutMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 执行前通知
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBeforeJobExecutedAtLastStarted</span><span class="token punctuation">(</span><span class="token class-name">ShardingContexts</span> shardingContexts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=======doBeforeJobExecutedAtLastStarted=======&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 执行后通知
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterJobExecutedAtLastCompleted</span><span class="token punctuation">(</span><span class="token class-name">ShardingContexts</span> shardingContexts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=======doAfterJobExecutedAtLastCompleted=======&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加 <code>com.seckill.goods.task.dynamic.ElasticjobDynamicConfig</code> 的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">DynamicListener</span> dynamicListener<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 监听器
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DynamicListener</span> <span class="token function">dynamicListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicListener</span><span class="token punctuation">(</span><span class="token number">10000L</span><span class="token punctuation">,</span> <span class="token number">100000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 3.动态添加定时任务案例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDynamicTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">,</span> <span class="token class-name">String</span> cron<span class="token punctuation">,</span> <span class="token keyword">int</span> shardingTotalCount<span class="token punctuation">,</span>
                           <span class="token class-name">SimpleJob</span> instance<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.添加Elastjob-lite的任务作业器</span>
    <span class="token class-name">LiteJobConfiguration</span> liteJobConfiguration <span class="token operator">=</span> <span class="token class-name">LiteJobConfiguration</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">SimpleJobConfiguration</span><span class="token punctuation">(</span>
                    <span class="token class-name">JobCoreConfiguration</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> cron<span class="token punctuation">,</span> shardingTotalCount<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">jobParameter</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token comment">//额外的参数</span>
                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//overwrite(true)覆盖原来同名的任务</span>

    <span class="token comment">//2.将Lite的任务作业器添加到Spring的任务启动器中，并初始化</span>
    <span class="token keyword">new</span> <span class="token class-name">SpringJobScheduler</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> zookeeperRegistryCenter<span class="token punctuation">,</span> liteJobConfiguration<span class="token punctuation">,</span> dynamicListener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021436582.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-索引-静态页动态更新" tabindex="-1"><a class="header-anchor" href="#_4-索引-静态页动态更新" aria-hidden="true">#</a> 4 索引+静态页动态更新</h2><h3 id="_4-1-分析" tabindex="-1"><a class="header-anchor" href="#_4-1-分析" aria-hidden="true">#</a> 4.1 分析</h3><p> 索引和静态资源的更新功能已经完成，所有秒杀商品都只是参与一段时间活动，活动时间过了需要将秒杀商品从索引中移除，同时删除静态页。我们需要有这么一个功能，在秒杀商品活动结束的时候，将静态页删除、索引库数据删除。</p><p> 此时我们可以使用elastic-job定时执行该操作,我们看如下活动表，活动表中有一个活动开始时间和活动结束时间，我们可以在每次增加、修改的时候，<mark>动态创建一个定时任务，把活动结束时间作为任务执行时间</mark>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>tb_activity<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>status<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;状态：1开启，2未开启&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>startdate<span class="token punctuation">\`</span></span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>begintime<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;开始时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>endtime<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;结束时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>total_time<span class="token punctuation">\`</span></span> <span class="token keyword">float</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>is_del<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;删除：1未删除，2已删除&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现步骤：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>1.编写动态定时任务:查找活动关联的素有商品
2.修改/增加秒杀活动，添加动态定时任务，执行时间为秒杀活动结束时间
3.执行任务：修改商品状态为1，自动触发数据同步，删除索引数据和静态页
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021457958.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-2-实现动态更新" tabindex="-1"><a class="header-anchor" href="#_4-2-实现动态更新" aria-hidden="true">#</a> 4.2 实现动态更新</h3><p> 我们在上面动态案例上进行修改，当添加和修改活动时，执行一个定时任务，定时任务以活动结束的时间为任务执行时间，将活动ID作为任务名字。</p><p>在<code>seckill-goods</code>的<code>com.seckill.goods.task.dynamic</code>中创建使用静态方法获取Spring容器中Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetSpringBean</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

    <span class="token comment">// 声明一个静态变量用于保存spring容器上下文</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建定时任务对象</p><p>在<code>seckill-goods</code>的<code>com.seckill.goods.task.dynamic.DynamicTask</code>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicTask</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleJob</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">SkuActMapper</span> skuActMapper <span class="token operator">=</span> <span class="token class-name">GetSpringBean</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">SkuActMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SkuMapper</span> skuMapper <span class="token operator">=</span> <span class="token class-name">GetSpringBean</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">SkuMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 实现对应的业务
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">ShardingContext</span> shardingContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// String id = shardingContext.getJobParameter();</span>
        <span class="token comment">// SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;HH:mm:ss&quot;);</span>
        <span class="token comment">// System.out.println(id + &quot;:::时间：&quot; + simpleDateFormat.format(new Date()));</span>

        <span class="token comment">//活动ID</span>
        <span class="token class-name">String</span> id <span class="token operator">=</span> shardingContext<span class="token punctuation">.</span><span class="token function">getJobParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;动态添加定时任务:&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">modify</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 1.根据活动ID查询活动ID下拥有的秒杀商品集合
     * 2.修改参与活动的秒杀商品状态，将状态改成非秒杀商品-&gt;
     * MySQL-&gt;binlog-&gt;Canal-&gt;获取增量数据-&gt;Canal微服务订阅增量数据-&gt;调用【静态页微服务、搜索微服务】
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.根据活动ID查询活动ID下拥有的秒杀商品集合</span>
        <span class="token class-name">SkuAct</span> skuAct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuAct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        skuAct<span class="token punctuation">.</span><span class="token function">setActivityId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuAct</span><span class="token punctuation">&gt;</span></span> skuActs <span class="token operator">=</span> skuActMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>skuAct<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SkuAct</span> act <span class="token operator">:</span> skuActs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>act<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//2.修改参与活动的秒杀商品状态</span>
        <span class="token class-name">Sku</span> sku <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sku</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sku<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">Sku</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Example<span class="token punctuation">.</span>Criteria</span> criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        criteria<span class="token punctuation">.</span><span class="token function">andIn</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>

        skuMapper<span class="token punctuation">.</span><span class="token function">updateByExampleSelective</span><span class="token punctuation">(</span>sku<span class="token punctuation">,</span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)调用操作</p><p>在活动修改和增加的时候，添加定时任务，修改<code>com.seckill.goods.service.impl.ActivityServiceImpl</code>的相关方法。</p><p>更新活动代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ElasticjobDynamicConfig</span> elasticjobDynamicConfig<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 修改Activity
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token comment">// 业务代码</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token comment">//定时任务调度，将活动结束时间作为任务开始执行时间</span>
        <span class="token class-name">String</span> cron <span class="token operator">=</span> <span class="token class-name">ElasticjobDynamicConfig</span><span class="token punctuation">.</span><span class="token function">date2cron</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getEndtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elasticjobDynamicConfig<span class="token punctuation">.</span><span class="token function">addDynamicTask</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cron<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Dynamictask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-测试" tabindex="-1"><a class="header-anchor" href="#_4-3-测试" aria-hidden="true">#</a> 4.3 测试</h3><p>先确认数据库中的秒杀活动所对应的秒杀商品状态status是否为2(为2表示该商品为秒杀商品)</p><p>在Postman中，调用接口进行测试：</p>`,65),x=n("p",{"endtime:2021-05-2817:42:24":""}," 接口请求body为json数据，内容为:",-1),S=t(`<p>我报了一下错误，刚开始看日志还以为是之前的Job代码在Zookeeper上注册的信息没有删掉，所以冲突了</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021700240.png" alt="这里Zookeeper注册中心的是旧数据-DynamicJob" tabindex="0" loading="lazy"><figcaption>这里Zookeeper注册中心的是旧数据-DynamicJob</figcaption></figure><p>所以我就将其删除</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021701706.png" alt="PrettyZoo" tabindex="0" loading="lazy"><figcaption>PrettyZoo</figcaption></figure><p>但是貌似没有解决，最后排查下来，终于知道为什么了！</p><p>定时任务，肯定要设置任务执行时间为<mark>当前时间往后</mark>，我设置的是2024年，那肯定参数不对啊！</p><p>所以报以下错误：</p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>触发器配置问题：</p><p>Quartz Scheduler 检测到触发器 DEFAULT.No1269829400967376896 的调度配置有问题，导致该触发器永远不会触发。</p><p>可能是以下原因之一：</p><ul><li><p>Cron 表达式错误：Cron 表达式配置不正确，导致调度时间无效。</p></li><li><p>调度时间已过：如果任务的开始时间已经过去，且没有设置重复调度，触发器将永远不会触发。</p></li><li><p>调度时间冲突：任务的调度时间与其他任务冲突，导致无法触发。</p></li></ul></div><p>现在改了时间，就可以了</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021727163.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021729070.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>发现删除了</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503021728023.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_5-访问日志收集" tabindex="-1"><a class="header-anchor" href="#_5-访问日志收集" aria-hidden="true">#</a> 5 访问日志收集</h2><p> 日志在项目中是非常重要的，日志的作用也有差异，例如根据日志查找问题、根据日志做数据分析。</p><p>在秒杀系统中，活跃的热点商品其实并不多，我们往往需要对热点商品进行额外处理。用户每次抢购商品的时候，都是从详情页发起的，因此统计热度商品，详情页的访问频次可以算一个方向，详情页访问的频次我们可以记录访问日志，然后统计某一段时间的访问量，根据访问量评判商品是否是热点商品。</p><h3 id="_5-1-业务分析" tabindex="-1"><a class="header-anchor" href="#_5-1-业务分析" aria-hidden="true">#</a> 5.1 业务分析</h3><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586685996087.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p> 日志收集流程如上图，用户请求经过nginx，此时已经留下了用户对某个商品访问的足迹，我们可以在这里将用户访问的商品信息发送给我们kafka，采用大数据实时分析工具<code>Apache Druid</code>实时存储访问信息，再通过程序分析计算访问情况。</p><h3 id="_5-2-kafka介绍" tabindex="-1"><a class="header-anchor" href="#_5-2-kafka介绍" aria-hidden="true">#</a> 5.2 Kafka介绍</h3><p> 从上面流程图中，可以看到实现日志收集中间件是MQ，我们秒杀系统中会搭建MQ服务。</p><p> 目前市面上成熟主流的MQ有Kafka 、RocketMQ、RabbitMQ、ActiveMQ，我们这里对每款MQ做一个简单介绍。</p><p><strong>Kafka</strong></p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>Kafka是最初由Linkedin公司开发，是一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm/Spark流式处理引擎，web/nginx日志、访问日志，消息服务等等，用scala语言编写，Linkedin于2010年贡献给了Apache基金会并成为顶级开源 项目。
        1.快速持久化：通过磁盘顺序读写与零拷贝机制，可以在O(1)的系统开销下进行消息持久化；
        2.高吞吐：在一台普通的服务器上既可以达到10W/s的吞吐速率；
        3.高堆积：支持topic下消费者较长时间离线，消息堆积量大；
        4.完全的分布式系统：Broker、Producer、Consumer都原生自动支持分布式，依赖zookeeper自动实现复杂均衡；
        5.支持Hadoop数据并行加载：对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。
        6.高并发：支持数千个客户端同时读写
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>RocketMQ</strong></p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>RocketMQ的前身是Metaq，当Metaq3.0发布时，产品名称改为RocketMQ。RocketMQ是一款分布式、队列模型的消息中间件，具有以下特点 ：
        1.能够保证严格的消息顺序
         2.提供丰富的消息拉取模式
         3.高效的订阅者水平扩展能力
         4.实时的消息订阅机制
         5.支持事务消息
         6.亿级消息堆积能力
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>RabbitMQ</strong></p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP,STOMP，也正是如此，使的它变的非常重量级，更适合于企业级的开发。同时实现了Broker架构，核心思想是生产者不会将消息直接发送给队列，消息在发送给客户端时先在中心队列排队。对路由(Routing)，负载均衡(Load balance)、数据持久化都有很好的支持。多用于进行企业级的ESB整合。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,28),_={href:"http://kafka.apache.org/",target:"_blank",rel:"noopener noreferrer"},C=t(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586742014619.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-3-kafka搭建" tabindex="-1"><a class="header-anchor" href="#_5-3-kafka搭建" aria-hidden="true">#</a> 5.3 Kafka搭建</h3><p>创建Kafka之前，必须先确保Zookeeper已经存在，请先确认 Zookeeper 是否创建完成。</p><p>使用Docker启动Kafka：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> kafka <span class="token parameter variable">--net</span><span class="token operator">=</span>host <span class="token punctuation">\\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">9092</span>:9092 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">KAFKA_BROKER_ID</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">KAFKA_ZOOKEEPER_CONNECT</span><span class="token operator">=</span><span class="token number">8.141</span>.90.31:3181/kafka <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">KAFKA_ADVERTISED_LISTENERS</span><span class="token operator">=</span>PLAINTEXT://8.141.90.31:9092 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">KAFKA_LISTENERS</span><span class="token operator">=</span>PLAINTEXT://0.0.0.0:9092 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime <span class="token punctuation">\\</span>
wurstmeister/kafka:2.12-2.4.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：需要修改8.141.90.31为宿主机的实际ip地址(如果有公网IP，填写公网IP地址)</p></blockquote><p><strong>测试Kafka</strong></p><p>创建队列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> kafka /bin/bash

<span class="token comment"># 进入目录</span>
<span class="token builtin class-name">cd</span> /opt/kafka_2.12-2.4.1/bin

<span class="token comment"># 创建队列</span>
./kafka-topics.sh <span class="token parameter variable">--create</span> --bootstrap-server <span class="token number">127.0</span>.0.1:9092 <span class="token parameter variable">--partitions</span> <span class="token number">1</span> --replication-factor <span class="token number">1</span> <span class="token parameter variable">--topic</span> itemaccess
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>又是一个坑！记得一定要在云服务器中开启安全组端口，要不然创建队列这步是不可能成功的！操！</p></div><p>使用kafka-topics.sh创建队列:</p><p>--create:执行创建一个新的队列操作</p><p> --bootstrap-server：需要链接的kafka配置，必填</p><p> --partitions 1：设置一个topic设置几个分区(就是把数据切割成几块，分别存储)</p><p> --replication-factor 1:设置分区的副本数量（就是设置多少个备份，有了备份，一个挂了没事，可以使用备份）</p><p> --topic itemaccess：队列的名字叫itemaccess</p><p>消息发布</p><p>在kafka容器中执行消息发送（接着上面的步骤执行）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 发送消息</span>
./kafka-console-producer.sh --broker-list localhost:9092 <span class="token parameter variable">--topic</span> itemaccess

<span class="token comment"># 发送内容为</span>
<span class="token punctuation">{</span><span class="token string">&quot;actime&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2025-3-02 9:50:10&quot;</span>,<span class="token string">&quot;uri&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;http://www-seckill.qintp.site/items/333.html&quot;</span>,<span class="token string">&quot;IP&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;119.123.33.231&quot;</span>,<span class="token string">&quot;Token&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Bearer itqtp&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503022140077.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>消息订阅</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> kafka /bin/bash

<span class="token comment"># 进入目录</span>
<span class="token builtin class-name">cd</span> /opt/kafka_2.12-2.4.1/bin

<span class="token comment"># 订阅消息</span>
./kafka-console-consumer.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--topic</span> itemaccess --from-beginning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503022141899.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其他命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> kafka /bin/bash

<span class="token comment"># 进入目录</span>
<span class="token builtin class-name">cd</span> /opt/kafka_2.12-2.4.1/bin

<span class="token comment"># 查看topic列表</span>
./kafka-topics.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--list</span>

<span class="token comment"># 删除topics</span>
./kafka-topics.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--delete</span> <span class="token parameter variable">--topic</span> itemaccess2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-收集日志-lua" tabindex="-1"><a class="header-anchor" href="#_5-3-收集日志-lua" aria-hidden="true">#</a> 5.3 收集日志-Lua</h3><p> Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p> OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。OpenResty 通过lua脚本扩展nginx功能，可提供负载均衡、请求路由、安全认证、服务鉴权、流量控制与日志监控等服务。</p><p> OpenResty® 通过汇聚各种设计精良的 Nginx 模块（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。</p><p> 使用Lua实现日志收集，并向Kafka发送访问的详情页信息，此时需要安装一个依赖组件<code>lua-restry-kafka</code>。关于<code>lua-restry-kafka</code>的下载和使用，可以参考<code>https://github.com/doujiang24/lua-resty-kafka</code></p><p><strong>1）收集流程</strong></p><p> 日志收集流程如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210901152615431-1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p> 用户请求/web/items/1.html，进入到nginx第1个location中，在该location中向Kafka发送请求日志信息，并将请求中的/web去掉，跳转到另一个location中，并查找本地文件，这样既可以完成日志收集，也能完成文件的访问。</p><p><strong>2)插件配置</strong></p>`,35),T=n("code",null,"lua-restry-kafka",-1),j={href:"https://github.com/doujiang24/lua-resty-kafka",target:"_blank",rel:"noopener noreferrer"},E=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 上传lua-resty-kafka-master.zip</span>

<span class="token comment"># 解压</span>
<span class="token function">unzip</span> lua-resty-kafka-master.zip

<span class="token comment"># 移动到指定目录</span>
<span class="token function">mv</span> lua-resty-kafka-master /usr/local/openresty/

<span class="token comment"># 修改nginx.conf</span>
<span class="token function">vi</span> /usr/local/openresty/nginx/conf/nginx.conf

<span class="token comment"># 添加内容  在配置文件中指定lua-resty-kafka的库文件位置</span>
<span class="token comment"># 配置到http里面，和server平级</span>
lua_package_path <span class="token string">&quot;/usr/local/openresty/lua-resty-kafka-master/lib/?.lua;;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置效果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http <span class="token punctuation">{</span>
    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
    
    <span class="token comment">#gzip  on;</span>

    <span class="token comment">#添加内容  在配置文件中指定lua-resty-kafka的库文件位置</span>
    lua_package_path <span class="token string">&quot;/usr/local/openresty/lua-resty-kafka-master/lib/?.lua;;&quot;</span><span class="token punctuation">;</span>

    server <span class="token punctuation">{</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span>
        server_name  localhost<span class="token punctuation">;</span>   
        
    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3)配置请求 指向lua脚本</strong></p><p>创建一个lua脚本,<code>items-access.lua</code></p><p>编写测试内容：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>cd <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">/</span>
mkdir lua
vi items<span class="token operator">-</span>access<span class="token punctuation">.</span>lua
ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
ngx<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20210901152615431.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p> 按照上面的流程图，我们需要配置nginx的2个location，修改nginx.conf,代码如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586766318976.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图代码如下：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">#</span> lua插件位置
lua_package_path <span class="token string">&quot;/usr/local/openresty/lua-resty-kafka-master/lib/?.lua;;&quot;</span><span class="token punctuation">;</span>

<span class="token function">server</span> <span class="token punctuation">{</span>
    listen       <span class="token number">8880</span><span class="token punctuation">;</span>
    server_name  localhost<span class="token punctuation">;</span>

    location <span class="token operator">/</span>web<span class="token operator">/</span>items<span class="token operator">/</span> <span class="token punctuation">{</span>
        <span class="token operator">#</span>向kafka发送日志记录，处理请求路径，把<span class="token operator">/</span>web去掉
        content_by_lua_file <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>openresty<span class="token operator">/</span>nginx<span class="token operator">/</span>lua<span class="token operator">/</span>items<span class="token operator">-</span>access<span class="token punctuation">.</span>lua<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    location <span class="token operator">/</span>items<span class="token operator">/</span> <span class="token punctuation">{</span>
        root   <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>server<span class="token operator">/</span>web<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        root   html<span class="token punctuation">;</span>
        index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


nginx <span class="token operator">-</span>s reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503022158068.png" alt="出现test正确" tabindex="0" loading="lazy"><figcaption>出现test正确</figcaption></figure><p><strong>4)日志收集</strong></p><p> 用户访问详情页的时候，需要实现日志收集，日志收集采用Lua将当前访问信息发布到Kafka中，因此这里要实现Kafka消息生产者。</p><p>我们定义一个消息格式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;actime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2020-4-10 9:50:30&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;uri&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/web/items/S1235433012716498944.html&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;ip&quot;</span><span class="token operator">:</span> <span class="token string">&quot;192.168.200.1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bearer ITHEIMA&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产者脚本：</p><p>定义好了消息格式后，创建一个生产者，往Kafka中发送详情页的访问信息。脚本内容如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/1586765047556.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图脚本内容如下：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--引入json解析库</span>
<span class="token keyword">local</span> cjson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cjson&quot;</span><span class="token punctuation">)</span>
<span class="token comment">--kafka依赖库</span>
<span class="token keyword">local</span> client <span class="token operator">=</span> require <span class="token string">&quot;resty.kafka.client&quot;</span>
<span class="token keyword">local</span> producer <span class="token operator">=</span> require <span class="token string">&quot;resty.kafka.producer&quot;</span>

<span class="token comment">--配置kafka的服务地址</span>
<span class="token keyword">local</span> broker_list <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span> host <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> port <span class="token operator">=</span> <span class="token number">9092</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">--创建kafka生产者</span>
<span class="token keyword">local</span> pro <span class="token operator">=</span> producer<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>broker_list<span class="token punctuation">,</span><span class="token punctuation">{</span> producer_type<span class="token operator">=</span><span class="token string">&quot;async&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">--获取IP</span>
<span class="token keyword">local</span> headers<span class="token operator">=</span>ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> ip<span class="token operator">=</span>headers<span class="token punctuation">[</span><span class="token string">&quot;X-REAL-IP&quot;</span><span class="token punctuation">]</span> <span class="token keyword">or</span> headers<span class="token punctuation">[</span><span class="token string">&quot;X_FORWARDED_FOR&quot;</span><span class="token punctuation">]</span> <span class="token keyword">or</span> ngx<span class="token punctuation">.</span>var<span class="token punctuation">.</span>remote_addr <span class="token keyword">or</span> <span class="token string">&quot;0.0.0.0&quot;</span>

<span class="token comment">--定义消息内容</span>
<span class="token keyword">local</span> msg <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
msg<span class="token punctuation">[</span><span class="token string">&quot;ip&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span>ip
msg<span class="token punctuation">[</span><span class="token string">&quot;actime&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span>os<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token punctuation">)</span>
msg<span class="token punctuation">[</span><span class="token string">&quot;uri&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span>ngx<span class="token punctuation">.</span>var<span class="token punctuation">.</span>uri
msg<span class="token punctuation">[</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;Bearer ITHEIMA&quot;</span>

<span class="token comment">--发送异步消息，无论消息是否发送成功，都会执行后面的逻辑</span>
<span class="token keyword">local</span> offset<span class="token punctuation">,</span> err <span class="token operator">=</span> pro<span class="token punctuation">:</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;logsitems&quot;</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">--请求转发到/items/,给用户提供html静态页</span>
<span class="token keyword">local</span> uri <span class="token operator">=</span> ngx<span class="token punctuation">.</span>var<span class="token punctuation">.</span>uri
uri <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span><span class="token string">&quot;/web&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
ngx<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lua脚本的时间获取</p><p>local getTime = os.date(&quot;%c&quot;);</p><p>其中的%c可以是以下的一种：(注意大小写)</p><table><thead><tr><th>格式</th><th>输出内容</th></tr></thead><tbody><tr><td>%a</td><td>abbreviated weekday name (e.g., Wed)</td></tr><tr><td>%A</td><td>full weekday name (e.g., Wednesday)</td></tr><tr><td>%b</td><td>abbreviated month name (e.g., Sep)</td></tr><tr><td>%B</td><td>full month name (e.g., September)</td></tr><tr><td>%c</td><td>date and time (e.g., 09/16/98 23:48:10)</td></tr><tr><td>%d</td><td>day of the month (16) [01-31]</td></tr><tr><td>%H</td><td>hour, using a 24-hour clock (23) [00-23]</td></tr><tr><td>%I</td><td>hour, using a 12-hour clock (11) [01-12]</td></tr><tr><td>%M</td><td>minute (48) [00-59]</td></tr><tr><td>%m</td><td>month (09) [01-12]</td></tr><tr><td>%p</td><td>either &quot;am&quot; or &quot;pm&quot; (pm)</td></tr><tr><td>%S</td><td>second (10) [00-61]</td></tr><tr><td>%w</td><td>weekday (3) [0-6 = Sunday-Saturday]</td></tr><tr><td>%x</td><td>date (e.g., 09/16/98)</td></tr><tr><td>%X</td><td>time (e.g., 23:48:10)</td></tr><tr><td>%Y</td><td>full year (1998)</td></tr><tr><td>%y</td><td>two-digit year (98) [00-99]</td></tr><tr><td>%%</td><td>the character &#39;%&#39;</td></tr></tbody></table><p><strong>5)日志收集测试</strong></p>`,27),L={href:"http://8.141.90.31/web/items/S1235433012716498944.html",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,"查看Kafka的logsitems队列数据：",-1),I=n("figure",null,[n("img",{src:"https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503022312516.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),D=n("p",null,"访问日志收集完成。",-1),z={href:"http://8.141.90.31/items/S1235433012716498944.html",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,"会发现日志没有变化，说明items直接访问商品详情页，没有走lua脚本！",-1);function M(F,R){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,r,d,n("p",null,[s("github地址："),n("a",k,[s("https://github.com/alibaba/canal"),e(a)])]),n("p",null,[s("版本下载地址："),n("a",m,[s("https://github.com/alibaba/canal/releases"),e(a)])]),n("p",null,[s("文档地址："),n("a",v,[s("https://github.com/alibaba/canal/wiki/Docker-QuickStart"),e(a)])]),b,n("p",null,[s("参考地址："),n("a",g,[s("https://github.com/NormanGyllenhaal/canal-client"),e(a)])]),f,n("p",null,[s("官网："),n("a",h,[s("https://shardingsphere.apache.org/elasticjob/index_zh.html"),e(a)])]),y,n("p",null,[s(" 参考地址："),n("a",q,[s("https://github.com/LuoLiangDSGA/spring-learning/tree/master/boot-elasticjob"),e(a)])]),w,x,S,n("p",null,[s("kafka官网："),n("a",_,[s("http://kafka.apache.org/"),e(a)])]),C,n("p",null,[T,s("："),n("a",j,[s("https://github.com/doujiang24/lua-resty-kafka"),e(a)])]),E,n("p",null,[s("请求地址（加了web路径）："),n("a",L,[s("http://8.141.90.31/web/items/S1235433012716498944.html"),e(a)])]),N,I,D,n("p",null,[s("如果我这个时候，没加web路径，"),n("a",z,[s("http://8.141.90.31/items/S1235433012716498944.html"),e(a)])]),A])}const P=p(l,[["render",M],["__file","2.Data synchronization and access log real-time collection.html.vue"]]);export{P as default};
