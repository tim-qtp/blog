import{_ as n,W as a,X as s,a2 as o}from"./framework-48328e23.js";const t={},e=o(`<h3 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication" aria-hidden="true">#</a> @SpringBootApplication</h3><ul><li>@SpringBootConfiguration：组合了 @Configuration 注解，表明该类是一个配置类</li><li>@EnableAutoConfiguration：打开自动配置的功能</li><li>@ComponentScan：启用组件扫描</li></ul><h3 id="springboot-自动配置原理了解吗" tabindex="-1"><a class="header-anchor" href="#springboot-自动配置原理了解吗" aria-hidden="true">#</a> SpringBoot 自动配置原理了解吗？</h3><p>在 Spring Boot 中，开启自动装配的注解是<code>@EnableAutoConfiguration</code>。</p><p>Spring Boot 为了进一步简化，直接通过 <code>@SpringBootApplication</code> 注解一步搞定，该注解包含了 <code>@EnableAutoConfiguration</code> 注解。</p><p>main 类启动的时候，Spring Boot 会通过底层的<code>AutoConfigurationImportSelector</code> 类加载自动装配类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfigurationPackage</span> <span class="token comment">//将main同级的包下的所有组件注册到容器中</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//加载自动装配类 xxxAutoconfiguration</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token constant">ENABLED_OVERRIDE_PROPERTY</span> <span class="token operator">=</span> <span class="token string">&quot;spring.boot.enableautoconfiguration&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AutoConfigurationImportSelector</code>实现了<code>ImportSelector</code>接口，该接口的作用是收集需要导入的配置类，配合 <code>@Import()</code> 将相应的类导入到 Spring 容器中。</p><h3 id="自动配置微调" tabindex="-1"><a class="header-anchor" href="#自动配置微调" aria-hidden="true">#</a> 自动配置微调：</h3><p>有时候我们只需要微调下自动配置就能满足需求，并不需要覆盖自动配置的Bean，此时我们可以在application.yml属性文件中进行配置。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mall_tiny<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springboot常用注解" tabindex="-1"><a class="header-anchor" href="#springboot常用注解" aria-hidden="true">#</a> SpringBoot常用注解：</h3><ul><li><p>组件相关：@Controller，通常与<code>@RequestMapping</code>联用，@Service，@Repository，@Component；</p></li><li><p>依赖注入注解：</p><p>@Autowired（根据对象的<code>类型</code>自动注入），可以配置<code>required=false</code>来注入不一定存在的对象。</p><p>@Resource根据对象的<code>名称</code>自动注入依赖对象，(name = &quot;umsAdminServiceImpl&quot;)</p><p>@Qualifier(&quot;umsAdminServiceImpl&quot;)，当同一个对象有多个实例可以注入时，使用<code>@Autowired</code>注解无法进行注入，这时可以使用<code>@Qualifier</code>注解指定实例的名称进行精确注入。</p></li><li><p>SpringMVC相关注解：</p><p><strong>@RequestMapping</strong> 用于映射请求路径和请求方法到控制器方法上。</p><p><strong>@RequestBody</strong> 用于接收请求体中的 JSON 数据，并将其自动转换为 Java 对象。</p><p><strong>@ResponseBody</strong> 用于将控制器方法的返回值转换为 JSON 或其他格式的数据，并写入响应体。</p><p><strong>@RequestParam</strong> 用于接收请求参数，支持以下几种场景：</p><p><strong>Query Parameter</strong>：GET 请求中拼接在 URL 中的参数。</p><p><strong>Form Data</strong>：POST 请求中表单提交的参数。</p><p><strong>Multipart</strong>：文件上传请求中的部分参数。</p><p><strong>@PathVariable</strong> 用于接收 URL 中的动态路径参数，常用于 REST 风格的 API。</p><p><strong>@RestController</strong> 用于定义一个控制器类，自动将方法的返回值作为响应体返回，无需额外的 <code>@ResponseBody</code> 注解。</p><p><strong>@GetMapping</strong>，<strong>@PostMapping</strong></p></li><li><p>配置相关注解</p><p><strong>@Configuration</strong></p><p><strong>@ComponentScan</strong></p><p><strong>@EnableCaching</strong></p><p><strong>@Value</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jwt</span><span class="token punctuation">:</span>
  <span class="token key atrule">tokenHeader</span><span class="token punctuation">:</span> Authorization <span class="token comment"># JWT存储的请求头</span>
  <span class="token key atrule">secret</span><span class="token punctuation">:</span> mall<span class="token punctuation">-</span>admin<span class="token punctuation">-</span>secret <span class="token comment"># JWT加解密使用的密钥</span>
  <span class="token key atrule">expiration</span><span class="token punctuation">:</span> <span class="token number">604800</span> <span class="token comment"># JWT的超期限时间(60*60*24*7)</span>
  <span class="token key atrule">tokenHead</span><span class="token punctuation">:</span> <span class="token string">&#39;Bearer &#39;</span>  <span class="token comment"># JWT负载中拿到开头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@ConfigurationProperties</strong></p></li><li><p>数据库事务相关注解</p><p><strong>@EnableTransactionManagement</strong>：启用Spring基于注解的事务管理功能，需要和<code>@Configuration</code>注解一起使用。</p><p><strong>@Transactional</strong></p></li><li><p>全局异常处理注解：</p><p><strong>@ControllerAdvice</strong>：常与<code>@ExceptionHandler</code>注解一起使用，用于捕获全局异常，能作用于所有controller中</p><p><strong>@ExceptionHandler</strong>：修饰方法时，表示该方法为处理全局异常的方法。</p></li></ul>`,13),p=[e];function i(c,l){return a(),s("div",null,p)}const u=n(t,[["render",i],["__file","4.SpringBoot core annotations.html.vue"]]);export{u as default};
