import{_ as e,W as n,X as s,a2 as a}from"./framework-48328e23.js";const t={},c=a(`<h3 id="integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" tabindex="-1"><a class="header-anchor" href="#integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" aria-hidden="true">#</a> Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；相等吗?</h3><p>a 和 b 相等，c 和 d 不相等。</p><p>因为 <code>Integer</code> <strong>值在 <code>-128</code> 到 <code>127</code> 之间</strong>，默认经常使用，会被缓存并复用。</p><p><code>128</code> <strong>超出缓存范围</strong>，<code>new Integer(128)</code> 会创建新的对象，导致 <code>c</code> 和 <code>d</code> 指向不同的内存地址。</p><h3 id="string-怎么转成-integer-的-原理" tabindex="-1"><a class="header-anchor" href="#string-怎么转成-integer-的-原理" aria-hidden="true">#</a> String 怎么转成 Integer 的？原理？</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 推荐，返回 int；自动装箱，转换为 Integer</span>
<span class="token class-name">Integer</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回 Integer 对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parseInt(str)</code>: <strong>直接返回 <code>int</code> 类型</strong>，性能更高。</p><p><code>valueOf(str)</code>: <strong>先调用 <code>parseInt(str)</code>，然后用 <code>Integer.valueOf(int)</code> 包装成 <code>Integer</code></strong>，如果值在 <code>-128</code> 到 <code>127</code> 之间，会复用缓存对象。</p><p><code>Integer.valueOf()</code>方法会针对数值在-128 到 127 之间的<code>Integer</code>对象使用缓存。</p>`,9),o=[c];function r(p,d){return n(),s("div",null,o)}const l=e(t,[["render",r],["__file","23.Integer.html.vue"]]);export{l as default};
