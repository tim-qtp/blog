import{_ as e,W as o,X as c,a2 as t}from"./framework-6a3aa88c.js";const a={},n=t("<p>都是容器，只不过ApplicationContext继承了BeanFactory；</p><p>BeanFactory是所有Spring Bean容器的顶级接口，它为Spring的容器定义了一套规范，并提供像<code>getBean</code>这样的方法从容器中获取指定的Bean。<code>BeanFactory</code>采用懒加载策略，即只有在第一次调用<code>getBean()</code>方法时，才会实例化相应的Bean。</p><p><strong><code>ApplicationContext</code></strong>：</p><ul><li>是 <code>BeanFactory</code> 的扩展，继承了 <code>BeanFactory</code> 的所有功能。</li><li>不仅支持依赖注入，还提供了更多高级功能，例如国际化支持（<code>MessageSource</code>接口）、事件传播（ApplicationEventPublisher接口）、资源访问（ResourceLoader接口）、自动装配等。</li><li>它是一个更高级的容器，通常在实际开发中更常用</li></ul>",4),r=[n];function i(d,l){return o(),c("div",null,r)}const p=e(a,[["render",i],["__file","4.BeanFactory.html.vue"]]);export{p as default};
