import{_ as n,W as s,X as a,a2 as t}from"./framework-6a3aa88c.js";const p={},e=t(`<h2 id="一、优惠券总览" tabindex="-1"><a class="header-anchor" href="#一、优惠券总览" aria-hidden="true">#</a> 一、优惠券总览：</h2><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202502271316726.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202502271317041.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202502271317572.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202502271317227.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202502271317164.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202502271316275.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、责任链模式" tabindex="-1"><a class="header-anchor" href="#二、责任链模式" aria-hidden="true">#</a> 二、责任链模式</h2><p><strong>为什么要使用责任链模式？</strong> 因为创建优惠券模板需要用到非常复杂的校验，而校验又分为好几种，比如最基础的非空校验、进一步的参数合法性校验、再进一步的参数依赖关系校验等等。</p><p>如果将所有的参数校验全部杂糅在一起，看起来眼花缭乱，并且职责不单一。使用责任链模式可以将单一职责的验证封装成一个处理器，将所有的处理器按照优先级组成责任链，当新增验证逻辑时，只需要扩展新的处理器即可。</p><p><strong>闪券如何使用责任链模式？</strong></p><ol><li><p>定义责任链抽象处理器接口MerchantAdminAbstractChainHandler。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 抽象商家后管业务责任链组件
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MerchantAdminAbstractChainHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 执行责任链逻辑
     *
     * <span class="token keyword">@param</span> <span class="token parameter">requestParam</span> 责任链执行入参
     */</span>
    <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">T</span> requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 责任链组件标识
     */</span>
    <span class="token class-name">String</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义若干个实际的处理器，这些处理器均实现了MerchantAdminAbstractChainHandler接口，并且具有相同的mark。还实现了Ordered接口，重写getOrder方法，定义责任链优先级。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 验证优惠券创建接口参数是否正确责任链｜验证必填参数是否为空或空的字符串
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponTemplateCreateParamNotNullChainFilter</span> <span class="token keyword">implements</span> <span class="token class-name">MerchantAdminAbstractChainHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CouponTemplateSaveReqDTO</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">CouponTemplateSaveReqDTO</span> requestParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;优惠券名称不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;优惠券来源不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;优惠对象不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;优惠类型不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getValidStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;有效期开始时间不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getValidEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;有效期结束时间不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;库存不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getReceiveRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;领取规则不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">getConsumeRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClientException</span><span class="token punctuation">(</span><span class="token string">&quot;消耗规则不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">MERCHANT_ADMIN_CREATE_COUPON_TEMPLATE_KEY</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义责任链上下文类，该类实现了CommandLineRunner接口，并重写了该接口的run方法，在run方法中对责任链上下文的容器进行了初始化。实现了run方法之后，SpringBoot会在类实例化之后自动运行run方法进行初始化。</p></li><li><p>责任链上下文容器初始化的核心逻辑是：从Spring上下文applicationContext中通过类名MerchantAdminAbstractChainHandler.class获取实例，即<mark>几个处理器</mark>，再将处理器放到上下文容器（一个HashMap）中，还要根据优先级对列表中的处理器排序。</p></li><li><p>在责任链上下文类中写handler方法，通过mark从责任链上下文容器中拿到责任链（一个处理器的List），再挨个遍历，进行校验。</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 商家后管责任链上下文容器
 * ApplicationContextAware 接口获取应用上下文，并复制局部变量方便后续使用；CommandLineRunner 项目启动后执行责任链容器的填充工作
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MerchantAdminChainContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 应用上下文，我们这里通过 Spring IOC 获取 Bean 实例
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 保存商家后管责任链实现类
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * Key：<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">MerchantAdminAbstractChainHandler</span><span class="token punctuation">#</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * Val：<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">MerchantAdminAbstractChainHandler</span></span><span class="token punctuation">}</span> 一组责任链实现 Spring Bean 集合
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 比如有一个优惠券模板创建责任链，实例如下：
     * Key：MERCHANT_ADMIN_CREATE_COUPON_TEMPLATE_KEY
     * Val：
     * - 验证优惠券信息基本参数是否必填 —— 执行器 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">CouponTemplateCreateParamNotNullChainFilter</span></span><span class="token punctuation">}</span>
     * - 验证优惠券信息基本参数是否按照格式传递 —— 执行器 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">CouponTemplateCreateParamBaseVerifyChainFilter</span></span><span class="token punctuation">}</span>
     * - 验证优惠券信息基本参数是否正确，比如商品数据是否存在等 —— 执行器 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">CouponTemplateCreateParamVerifyChainFilter</span></span><span class="token punctuation">}</span>
     * - ......
     *
     * 注意：List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MerchantAdminAbstractChainHandler</span><span class="token punctuation">&gt;</span></span>是个List
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">MerchantAdminAbstractChainHandler</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> abstractChainHandlerContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 责任链组件执行
     *
     * <span class="token keyword">@param</span> <span class="token parameter">mark</span>         责任链组件标识
     * <span class="token keyword">@param</span> <span class="token parameter">requestParam</span> 请求参数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">String</span> mark<span class="token punctuation">,</span> <span class="token class-name">T</span> requestParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据 mark 标识从责任链容器中获取一组责任链实现 Bean 集合</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MerchantAdminAbstractChainHandler</span><span class="token punctuation">&gt;</span></span> abstractChainHandlers <span class="token operator">=</span> abstractChainHandlerContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>abstractChainHandlers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] Chain of Responsibility ID is undefined.&quot;</span><span class="token punctuation">,</span> mark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        abstractChainHandlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>each <span class="token operator">-&gt;</span> each<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从 Spring IOC 容器中获取指定接口 Spring Bean 集合</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MerchantAdminAbstractChainHandler</span><span class="token punctuation">&gt;</span></span> chainFilterMap <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">MerchantAdminAbstractChainHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注意，这里是所有的bean，不一定他们的名字就相同，比如说：①abc-责任1,②abc-责任2,③abc-责任3,④ttt-责任4,⑤kkk-责任5</span>
        chainFilterMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断 Mark 是否已经存在抽象责任链容器中，如果已经存在直接向集合新增；如果不存在，创建 Mark 和对应的空集合</span>
            <span class="token comment">// 有mark标志的链就返回</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MerchantAdminAbstractChainHandler</span><span class="token punctuation">&gt;</span></span> abstractChainHandlers <span class="token operator">=</span> abstractChainHandlerContainer<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            abstractChainHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 刚开始put的时候，</span>
            <span class="token comment">// 链abc-责任1</span>
            <span class="token comment">// 链abc-责任1、责任2</span>
            <span class="token comment">// 链abc-责任1、责任2、责任3</span>
            <span class="token comment">// 链ttt-责任4</span>
            <span class="token comment">// 链kkk-责任5</span>
            abstractChainHandlerContainer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> abstractChainHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        abstractChainHandlerContainer<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span> unsortedChainHandlers<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 对每个 Mark 对应的责任链实现类集合进行排序，优先级小的在前</span>
            unsortedChainHandlers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token operator">::</span><span class="token function">getOrder</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释一下代码吧：</p><h3 id="_1-责任链抽象处理器接口-merchantadminabstractchainhandler" tabindex="-1"><a class="header-anchor" href="#_1-责任链抽象处理器接口-merchantadminabstractchainhandler" aria-hidden="true">#</a> 1. <strong>责任链抽象处理器接口</strong> - <code>MerchantAdminAbstractChainHandler</code></h3><ul><li><strong>接口功能</strong>: 该接口定义了责任链每个处理器所需具备的基本功能。它要求每个实现类都提供两个方法： <ul><li><code>handler(T requestParam)</code>: 执行具体的责任链逻辑。</li><li><code>mark()</code>: 标识责任链的名称或类型，用来在容器中<mark>识别和区分不同的责任链</mark>。</li><li><code>getOrder()</code>: 该方法来自 <code>Ordered</code> 接口，用来定义责任链执行的顺序，<mark>优先级较小的先执行</mark>。</li></ul></li><li><strong>生活场景</strong>：想象你在商店购买商品时，结账需要经过多个环节，比如收银员检查商品、积分卡验证、优惠券核对、支付等等。每个环节就像责任链中的一个处理器，它们分别完成不同的验证或操作。</li></ul><h3 id="_2-实际的处理器类-例如-coupontemplatecreateparamnotnullchainfilter" tabindex="-1"><a class="header-anchor" href="#_2-实际的处理器类-例如-coupontemplatecreateparamnotnullchainfilter" aria-hidden="true">#</a> 2. <strong>实际的处理器类</strong> - 例如 <code>CouponTemplateCreateParamNotNullChainFilter</code></h3><ul><li><strong>功能</strong>: 这是一个<mark>实际的处理器</mark>，负责验证创建优惠券时的参数是否满足必填项。每个具体的责任链处理器都会有自己的校验逻辑，这里主要是检查优惠券模板的各个字段是否为空。如果有必填项为空，它会抛出异常。</li></ul><h3 id="_3-责任链上下文类-merchantadminchaincontext" tabindex="-1"><a class="header-anchor" href="#_3-责任链上下文类-merchantadminchaincontext" aria-hidden="true">#</a> 3. <strong>责任链上下文类</strong> - <code>MerchantAdminChainContext</code></h3><ul><li><strong>功能</strong>: 这个类管理了<mark>所有的责任链处理器</mark>，并负责根据 <code>mark</code> 从 <mark>Spring 容器</mark>中获取和排序这些处理器。<code>run</code> 方法会在应用启动时执行，它会自动扫描 Spring 容器中的所有 <code>MerchantAdminAbstractChainHandler</code> 实现，<mark>按顺序进行初始化并放入容器</mark>。</li></ul><h3 id="_4-责任链上下文容器初始化-run-方法中的核心逻辑" tabindex="-1"><a class="header-anchor" href="#_4-责任链上下文容器初始化-run-方法中的核心逻辑" aria-hidden="true">#</a> 4. <strong>责任链上下文容器初始化</strong> - <code>run</code> 方法中的核心逻辑</h3><ul><li><strong>功能</strong>: <code>run</code> 方法首先从 Spring 容器中获取所有实现了 <code>MerchantAdminAbstractChainHandler</code> 接口的 Bean 实例。然后它按 <code>mark</code> 分类，将相同 <code>mark</code> 的处理器放到同一个列表中，并按照 <code>getOrder</code> 的返回值对它们进行排序，确保优先级小的先执行。</li></ul><p>每个验证步骤都可以作为一个独立的处理器，实现 <code>MerchantAdminAbstractChainHandler</code> 接口，并在 <code>run</code> 方法中执行相应的验证逻辑。 <code>MerchantAdminChainContext</code> 类负责将这些处理器按顺序组织起来，形成责任链。 当收到创建优惠券模板的请求时，调用 <code>handler</code> 方法，传入请求参数，责任链会依次执行各个验证步骤，确保请求参数的合法性。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202502281327292.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后后面想改了，直接新增Filter就行，再改一下order顺序</p><p>Q：为什么需要 Order 接口？</p><p>A：因为实现责任链的话会有多个处理器，创建优惠券业务优先处理性能较好的，然后逐步验证。</p>`,27),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","3.Coupon Flash Sale.html.vue"]]);export{r as default};
