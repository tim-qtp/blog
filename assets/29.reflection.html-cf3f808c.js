const e=JSON.parse('{"key":"v-025a403c","path":"/Java/basic/29.reflection.html","title":"反射","lang":"zh-CN","frontmatter":{"order":2,"author":null,"title":"反射","category":["Java基础"],"description":"📌 反射（Reflection） 允许程序在运行时 动态获取类的信息、创建对象、调用方法、修改字段，而不是在编译时写死代码。 1. 为什么要用反射？ 通常，在编写 Java 代码时，我们都是这样调用类的方法的： 这里，Person 类的 sayHello() 方法是在编译时就已经确定的。 但是，如果我们希望： 1. 在运行时才决定要调用哪个类的方法（...","head":[["meta",{"property":"og:url","content":"https://tim-qtp.github.io/blog/blog/Java/basic/29.reflection.html"}],["meta",{"property":"og:site_name","content":"Qtp"}],["meta",{"property":"og:title","content":"反射"}],["meta",{"property":"og:description","content":"📌 反射（Reflection） 允许程序在运行时 动态获取类的信息、创建对象、调用方法、修改字段，而不是在编译时写死代码。 1. 为什么要用反射？ 通常，在编写 Java 代码时，我们都是这样调用类的方法的： 这里，Person 类的 sayHello() 方法是在编译时就已经确定的。 但是，如果我们希望： 1. 在运行时才决定要调用哪个类的方法（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-09T15:59:15.000Z"}],["meta",{"property":"article:author","content":"tim-qtp"}],["meta",{"property":"article:modified_time","content":"2025-02-09T15:59:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-09T15:59:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"tim-qtp\\",\\"url\\":\\"https://github.com/tim-qtp/\\"}]}"]]},"headers":[{"level":2,"title":"1. 为什么要用反射？","slug":"_1-为什么要用反射","link":"#_1-为什么要用反射","children":[]},{"level":2,"title":"2. 反射的基本操作","slug":"_2-反射的基本操作","link":"#_2-反射的基本操作","children":[{"level":3,"title":"2.1 获取 Class 对象","slug":"_2-1-获取-class-对象","link":"#_2-1-获取-class-对象","children":[]},{"level":3,"title":"2.2 通过反射创建对象","slug":"_2-2-通过反射创建对象","link":"#_2-2-通过反射创建对象","children":[]},{"level":3,"title":"2.3 通过反射调用方法","slug":"_2-3-通过反射调用方法","link":"#_2-3-通过反射调用方法","children":[]},{"level":3,"title":"2.4 通过反射访问字段（属性）","slug":"_2-4-通过反射访问字段-属性","link":"#_2-4-通过反射访问字段-属性","children":[]}]},{"level":2,"title":"3. 反射的应用场景","slug":"_3-反射的应用场景","link":"#_3-反射的应用场景","children":[{"level":3,"title":"3.1 框架的底层实现","slug":"_3-1-框架的底层实现","link":"#_3-1-框架的底层实现","children":[]},{"level":3,"title":"3.2 读取配置文件动态创建对象","slug":"_3-2-读取配置文件动态创建对象","link":"#_3-2-读取配置文件动态创建对象","children":[]}]}],"git":{"createdTime":1739116755000,"updatedTime":1739116755000,"contributors":[{"name":"tim-qtp","email":"2469100031@qq.com","commits":1}]},"readingTime":{"minutes":4.17,"words":1250},"filePathRelative":"Java/basic/29.reflection.md","localizedDate":"2025年2月9日","autoDesc":true,"excerpt":""}');export{e as data};
