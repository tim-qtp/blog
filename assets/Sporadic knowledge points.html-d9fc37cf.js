import{_ as n,W as s,X as a,a2 as e}from"./framework-48328e23.js";const t={},p=e(`<h3 id="_1、去掉请求路径的前缀" tabindex="-1"><a class="header-anchor" href="#_1、去掉请求路径的前缀" aria-hidden="true">#</a> 1、去掉请求路径的前缀</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token comment"># 商品服务路由</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> goods_route
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//seckill<span class="token punctuation">-</span>goods
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> Path=/api/skuAct/<span class="token important">**</span><span class="token punctuation">,</span>/api/activity/<span class="token important">**</span><span class="token punctuation">,</span>/api/brand/<span class="token important">**</span><span class="token punctuation">,</span>/api/category/<span class="token important">**</span><span class="token punctuation">,</span>/api/seckillTime/<span class="token important">**</span><span class="token punctuation">,</span>/api/sku/<span class="token important">**</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> StripPrefix=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>filters</code>: 过滤器链，这里使用 <code>StripPrefix=1</code> 过滤器来去掉请求路径的前缀。<code>StripPrefix=1</code> 意味着去掉请求路径中的第一个部分，防止在转发请求时带有不必要的前缀。</p><h3 id="_2、management-配置" tabindex="-1"><a class="header-anchor" href="#_2、management-配置" aria-hidden="true">#</a> 2、management 配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>management.endpoint.gateway.enabled: true</code></strong>: 启用 Spring Boot Actuator 的网关相关端点，允许通过管理端点监控网关的运行状态。</p><p><strong><code>management.endpoint.web.exposure.include: &#39;\\*&#39;</code></strong>: 暴露所有 Web 相关的管理端点，包括 <code>health</code>、<code>info</code> 等，以便进行健康检查和其他管理任务。</p><h3 id="_3、logging配置" tabindex="-1"><a class="header-anchor" href="#_3、logging配置" aria-hidden="true">#</a> 3、logging配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>
    <span class="token key atrule">console</span><span class="token punctuation">:</span> <span class="token string">&quot;%msg%n&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>console</code></strong>: #定义日志控制台输出的格式，这里仅输出消息体内容 <code>%msg</code> 和换行符 <code>%n</code>。</p><h3 id="_4、设置时区" tabindex="-1"><a class="header-anchor" href="#_4、设置时区" aria-hidden="true">#</a> 4、设置时区</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token comment">#设置全局的 JSON 时间序列化时区为东八区（中国标准时间）。</span>
    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、设置bean" tabindex="-1"><a class="header-anchor" href="#_5、设置bean" aria-hidden="true">#</a> 5、设置Bean</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token comment">#允许多个同名 Bean 定义覆盖，避免 Bean 冲突报错。</span>
    <span class="token key atrule">allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、在intellij-idea中-快速找到控制类-controller类-中所有的方法" tabindex="-1"><a class="header-anchor" href="#_6、在intellij-idea中-快速找到控制类-controller类-中所有的方法" aria-hidden="true">#</a> 6、在IntelliJ IDEA中，快速找到控制类（Controller类）中所有的方法</h3><p>Alt + 7，Ctrl + F12</p><h3 id="_7、为什么要用feign呢" tabindex="-1"><a class="header-anchor" href="#_7、为什么要用feign呢" aria-hidden="true">#</a> 7、为什么要用Feign呢？</h3><p>为了实现不同微服务进行远程调用</p><p><code>seckill-search</code>的ES索引导入调用<code>seckill-goods</code>的<code>list</code>接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1、seckill-search</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> skus <span class="token operator">=</span> skuFeign<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2、seckill-feign-api page和size传到地址参数里</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/sku/list/{page}/{size}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;page&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;size&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3、seckill-goods</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/list/{page}/{size}&quot;</span> <span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span>  <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span>  <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//调用SkuService实现分页条件查询Sku</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> skus <span class="token operator">=</span> skuService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> skus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、计算总页数" tabindex="-1"><a class="header-anchor" href="#_8、计算总页数" aria-hidden="true">#</a> 8、计算总页数</h3><p>正好除尽，就<code>/</code>，不正好，那就再加个<code>1</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//2.根据总记录数计算总页数</span>
<span class="token keyword">int</span> totalpages <span class="token operator">=</span> total <span class="token operator">%</span> size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> total <span class="token operator">/</span> size <span class="token operator">:</span> <span class="token punctuation">(</span>total <span class="token operator">/</span> size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9、将sku数据转换成skuinfo" tabindex="-1"><a class="header-anchor" href="#_9、将sku数据转换成skuinfo" aria-hidden="true">#</a> 9、将Sku数据转换成SkuInfo</h3><p>先将<code>skus</code>List转化为json字符串，再将字符串转成SkuInfo</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> skus <span class="token operator">=</span> skuFeign<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuInfo</span><span class="token punctuation">&gt;</span></span> skuInfos <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>skus<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SkuInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、es为什么频繁刷新-默认1秒-会出问题" tabindex="-1"><a class="header-anchor" href="#_10、es为什么频繁刷新-默认1秒-会出问题" aria-hidden="true">#</a> 10、ES为什么频繁刷新（默认1秒）会出问题？</h3><p><strong>打个比方：</strong></p><ul><li>假设你开一家超市，页面不停地出现新的订单，但是每出现一行，你就立刻把这笔写到账本上（磁盘）。</li><li>账本每次写字都需要翻页、找位置，还要仔细抄写好（写段文件）。</li><li><strong>结果</strong>：你刚写完一两笔就去翻账本了，账本来回折腾，效率很低。</li></ul><p><strong>ES 频繁刷新的问题也类似：</strong></p><ul><li><strong>频繁生成小文件</strong>：每次只刷一小撮数据，磁盘被迫不停写文件，效率很低。</li><li><strong>段合并压力大</strong>：段文件多了，ES 会把这些小文件合并成大文件（段合并），合并过程特别费劲，<mark>抢了大量 CPU</mark> 和<mark>磁盘资源</mark>。</li><li><strong>资源争夺</strong>：写入的同时还要刷新，两边都需要磁盘和CPU，最后谁都干不好。</li></ul><p><strong>那适当延长刷新间隔怎么解决问题？</strong></p><p><strong>再打个比方：</strong></p><ul><li>你可以每天晚上一次性把当天的所有开销写到账本上，这样只翻一次账本，效率就高很多。</li></ul><p><strong>ES 延长刷新间隔也是类似的思路：</strong></p><ul><li><strong>数据在内存里多积累一会儿</strong>：一次性写更多数据到磁盘，这样减少了小文件的生成，磁盘压力更小。</li><li><strong>减少段合并频率</strong>：一次性写入大文件，小文件变少，段合并的次数也少了。</li><li><strong>资源利用更高效</strong>：写入和刷新分开安排时间，避免两者抢磁盘和 CPU。</li></ul><p><strong>总结为什么“写入和刷新”会争夺资源</strong></p><ul><li>写入数据到内存时，不是直接完成后就结束了，它还涉及到倒排索引的创建和更新，这需要 CPU 参与。</li><li>刷新数据到磁盘时，不仅仅是“写磁盘”，它还要进行段文件的创建、索引的（优化）持久化、段合并等复杂操作，这些操作都需要 CPU 和磁盘 I/O。</li><li>刷新过程会触发数据的<strong>同步操作</strong>，需要占用一部分 CPU 和磁盘资源。</li><li>如果刷新频繁，写入和刷新就会相互竞争 <mark>CPU</mark> 和磁盘资源，<mark>导致写入性能下降</mark>。</li></ul><h3 id="_11、for-循环与-countdownlatch-countdown-是否会冲突" tabindex="-1"><a class="header-anchor" href="#_11、for-循环与-countdownlatch-countdown-是否会冲突" aria-hidden="true">#</a> 11、<code>for</code> 循环与 <code>countDownLatch.countDown()</code> 是否会冲突？</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totalpages<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> skus <span class="token operator">=</span> skuFeign<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 数据转换和批量导入</span>
        <span class="token class-name">BulkRequest</span> bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SkuInfo</span> skuInfo <span class="token operator">:</span> skuInfos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将数据添加到 bulkRequest</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            restHighLevelClient<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 每个线程完成后减一</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>不会冲突</mark></p><h4 id="_1-for-循环的作用" tabindex="-1"><a class="header-anchor" href="#_1-for-循环的作用" aria-hidden="true">#</a> <strong>1. <code>for</code> 循环的作用</strong></h4><p>最外层的 <code>for (int i = 0; i &lt; totalpages; i++)</code> 循环用于启动 <code>totalpages</code> 个并发任务。对于每一页数据，都会启动一个新的线程来执行分页查询和数据导入操作。</p><ul><li><strong>每次迭代</strong> 都会通过 <code>pool.execute()</code> 提交一个新任务到线程池中。</li><li>每个任务会从 <code>AtomicInteger page</code> 中获取当前页码并进行分页查询。</li></ul><h4 id="_2-countdownlatch-countdown-的作用" tabindex="-1"><a class="header-anchor" href="#_2-countdownlatch-countdown-的作用" aria-hidden="true">#</a> <strong>2. <code>countDownLatch.countDown()</code> 的作用</strong></h4><ul><li><code>CountDownLatch</code> 用于等待所有分页查询任务完成后才继续执行。</li><li>每个线程在完成分页查询和批量导入任务后，会调用 <code>countDownLatch.countDown()</code> 来减少闭锁的计数。</li><li><strong>主线程通过 <code>await()</code> 阻塞，直到所有线程都完成后，才继续执行后续操作。</strong></li></ul><p><strong>3. 不会发生冲突的原因</strong></p><p><code>for</code>循环和<code>countDownLatch.countDown()</code></p><p>本质上是分别执行的两部分逻辑：</p><ul><li><code>for</code> 循环负责启动并发任务。</li><li><code>countDownLatch.countDown()</code> 在每个线程完成任务后执行，用于通知主线程某个分页查询任务已经完成。</li></ul><p>如果使用普通的 <code>int</code> 类型，多个线程同时读取和修改页码时，会出现数据不一致问题（例如两个线程同时读取相同的值，导致页码被重复使用或丢失）。</p><blockquote><p><code>AtomicInteger</code> 提供原子操作方法（如 <code>getAndIncrement()</code>），保证了页码更新的线程安全。</p><p><code>volatile</code> 确保了变量对所有线程的可见性，使得每个线程读取到的是最新的值。</p></blockquote><p><code>AtomicInteger</code> 的操作是原子性的，不需要显式加锁即可确保线程安全。</p><h3 id="_12、nginx有啥好处" tabindex="-1"><a class="header-anchor" href="#_12、nginx有啥好处" aria-hidden="true">#</a> 12、Nginx有啥好处</h3><p>速度快，高并发，高可靠，内存消耗少，高扩展性</p><p>应用：反向代理+文件服务+静态资源+负载均衡+Tomcat</p><h3 id="_13、什么情况会造成索引失效" tabindex="-1"><a class="header-anchor" href="#_13、什么情况会造成索引失效" aria-hidden="true">#</a> 13、什么情况会造成索引失效</h3><ol><li>条件有or,部分条件没有索引</li><li>复合索引未用左列字段</li><li>like以%开头</li><li>需要类型转换</li><li>where中索引l列有运算</li><li>where中索列使用了函数</li><li>加索引的列，数据重复率较高</li></ol><h3 id="_14、binlog-format-row有啥用" tabindex="-1"><a class="header-anchor" href="#_14、binlog-format-row有啥用" aria-hidden="true">#</a> 14、binlog-format=ROW有啥用</h3><p><code>binlog-format=ROW</code> 表示 <strong>二进制日志记录的格式为行级别（ROW）</strong>，即<strong>记录每一行数据的具体变化</strong>，而不是记录 SQL 语句（STATEMENT 格式）或混合（MIXED 格式）</p><h4 id="row-的作用" tabindex="-1"><a class="header-anchor" href="#row-的作用" aria-hidden="true">#</a> <code>ROW</code> 的作用</h4><p>当 <code>binlog-format=ROW</code> 启用时：</p><ol><li>记录每一行实际的变化数据： <ul><li>INSERT 操作记录的是新增的每一行。</li><li>UPDATE 操作记录的是被修改的每一行的 <strong>旧值和新值</strong>。</li><li>DELETE 操作记录的是被删除的每一行。</li></ul></li><li>精准反映数据变化： <ul><li>能清晰记录数据的变化细节，特别适合 <strong>实时同步、数据监控和恢复场景</strong>。</li></ul></li></ol><hr><h4 id="row-的具体例子" tabindex="-1"><a class="header-anchor" href="#row-的具体例子" aria-hidden="true">#</a> <code>ROW</code> 的具体例子</h4><h4 id="假设有一张表" tabindex="-1"><a class="header-anchor" href="#假设有一张表" aria-hidden="true">#</a> 假设有一张表：</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">sql</span>复制代码<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> products <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    price <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-insert-操作" tabindex="-1"><a class="header-anchor" href="#_1-insert-操作" aria-hidden="true">#</a> <strong>1. INSERT 操作：</strong></h4><p>执行的 SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">sql</span>


复制代码
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> products <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Laptop&#39;</span><span class="token punctuation">,</span> <span class="token number">5000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>binlog-format=ROW</code> 中记录的内容：</strong></p><ul><li>记录的是插入的具体数据：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>plaintext


复制代码
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> products <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Laptop&#39;</span><span class="token punctuation">,</span> <span class="token number">5000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li>它会直接把 <code>id=1, name=&#39;Laptop&#39;, price=5000.00</code> 的数据记录到 binlog 中，精准反映插入操作。</li></ul><hr><h4 id="_2-update-操作" tabindex="-1"><a class="header-anchor" href="#_2-update-操作" aria-hidden="true">#</a> <strong>2. UPDATE 操作：</strong></h4><p>执行的 SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">sql</span>


复制代码
<span class="token keyword">UPDATE</span> products <span class="token keyword">SET</span> price <span class="token operator">=</span> <span class="token number">5500.00</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>binlog-format=ROW</code> 中记录的内容：</strong></p><ul><li>记录的是更新前后的数据变化：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>plaintext复制代码BEFORE: <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Laptop&#39;</span><span class="token punctuation">,</span> <span class="token number">5000.00</span><span class="token punctuation">)</span>
<span class="token keyword">AFTER</span>:  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Laptop&#39;</span><span class="token punctuation">,</span> <span class="token number">5500.00</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li>它会清楚记录该行的旧值和新值，确保数据的正确性。</li><li>如果是多个行的更新，它会记录每一行的变化。</li></ul><hr><h4 id="_3-delete-操作" tabindex="-1"><a class="header-anchor" href="#_3-delete-操作" aria-hidden="true">#</a> <strong>3. DELETE 操作：</strong></h4><p>执行的 SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">sql</span>


复制代码
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>binlog-format=ROW</code> 中记录的内容：</strong></p><ul><li>记录的是被删除行的具体内容：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>plaintext


复制代码
DELETED: <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Laptop&#39;</span><span class="token punctuation">,</span> <span class="token number">5500.00</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li>会完整记录删除的这一行数据，便于数据恢复和同步。</li></ul><h3 id="_15、根据模板名字获取模板对象" tabindex="-1"><a class="header-anchor" href="#_15、根据模板名字获取模板对象" aria-hidden="true">#</a> 15、根据模板名字获取模板对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Template</span> template <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span>templateName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里根据templateName去resources下的templates去获取test.ftl模板文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//模板处理，获取生成的html文件字符串</span>
<span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">FreeMarkerTemplateUtils</span><span class="token punctuation">.</span><span class="token function">processTemplateIntoString</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//生成文件</span>
<span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,97),o=[p];function l(c,i){return s(),a("div",null,o)}const r=n(t,[["render",l],["__file","Sporadic knowledge points.html.vue"]]);export{r as default};
