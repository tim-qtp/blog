import{_ as t,W as r,X as n,$ as e,a0 as o,Z as p,a1 as a,C as s}from"./framework-4e10303a.js";const d={},i=a('<h2 id="先说一下它的优缺点" tabindex="-1"><a class="header-anchor" href="#先说一下它的优缺点" aria-hidden="true">#</a> 先说一下它的优缺点：</h2><p>优点有很多，比如支持多机场同时订阅，兼容多种协议，提供高级策略分流，节点自动选择，负载均衡，故障转移等。</p><p>并配有直观的web界面，可以通过自定义分流规则实现高效的流量管理，例如拥有多个设备，同时在看YouTube和国外游戏浏览国内网站。你可以通过自定义的规则让YouTube走大流量廉价的节点以节省成本。国外游戏走高价低延时的节点，国内走本地，而不需要你进行的手动的切换，虽然<code>passwall</code>也具备简单的分类规则，但是在<code>OpenClash</code>面前那就是弟弟。</p><p>正确配置后还可以做到DNS无污染，无泄漏，它的缺点也是因为功能太过强大，所以配置项比较多。新手容易遇到很多问题，如果第一次使用，最好先从虚拟机练习一下，以免影响你正常的网络环境。</p><p>我这里玩的阶段，使用的都是旁路由结构，也建议大家使用这种结构。这样的优点是即使你折腾出问题，你家里的主路由也不会受到影响，我使用的<code>OpenWrt</code>固件是<code>ImmortalWrt</code>固件，它修改的比较少，非常接近官，使用起来比较稳定，而且还有比较完善的应用商店，免翻墙下载所有的软件和依赖，比如<code>OpenClash</code></p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250115223719835.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',6),l={href:"https://firmware-selector.immortalwrt.org/",target:"_blank",rel:"noopener noreferrer"},h=a('<p>型号这里输入你的软路由的CPU的架构，电脑演示嘛，我这里选<code>X86/64</code>架构了，右边是它的固件版本。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250115225745131.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下面固件镜像有两个版本，<code>EXT4</code>和<code>SQU</code>开头的，</p><p>如果没有经常重置软路由的需求，选择<code>EXT4</code>就可以，因为它后期扩容比较方便。</p><p>如果是虚拟机安装的话，选择<code>VMDK</code>格式，这是 VMware 虚拟机的标准磁盘格式。</p>',5);function m(g,_){const c=s("ExternalLinkIcon");return r(),n("div",null,[i,e("p",null,[o("进入官网，"),e("a",l,[o("https://firmware-selector.immortalwrt.org/"),p(c)])]),h])}const u=t(d,[["render",m],["__file","Openclash.html.vue"]]);export{u as default};
