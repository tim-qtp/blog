import{_ as p,W as c,X as o,$ as s,a1 as n,Z as e,a2 as a,C as i}from"./framework-48328e23.js";const u={},l=a(`<h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503221637775.png" alt="" loading="lazy"></h2><h2 id="一、解决协作冲突" tabindex="-1"><a class="header-anchor" href="#一、解决协作冲突" aria-hidden="true">#</a> 一、解决协作冲突</h2><h3 id="_1、解决方案" tabindex="-1"><a class="header-anchor" href="#_1、解决方案" aria-hidden="true">#</a> 1、解决方案</h3><p>假设这样一种场景：秦一和李蛋同时快速点击了十次旋转，最终的结果会是怎样的呢？</p><p>如果所有事件都是按顺序处理的，那结果就很清晰了，但事实上，为了提高性能和响应速度，事件通常是 <strong>并发</strong> 的，而不是严格的顺序执行。这种并发操作会引发 <strong>协作冲突</strong>，导致其他用户看到的旋转效果是乱序的。</p><p>那么怎么解决协作冲突的问题呢？</p><p>其实可以通过业务设计来减少开发成本，比如约定 <strong>同一时刻只允许一位用户进入编辑图片的状态</strong>，此时其他用户只能实时浏览到修改效果，但不能参与编辑；进入编辑状态的用户可以退出编辑，其他用户才可以进入编辑状态。类似于给图片编辑这个动作加了一把锁，直接从源头上解决了编辑冲突的问题。</p><p>此时，协作编辑的交互流程又要增加 2 个动作 —— 进入编辑状态和退出编辑状态：</p><p>但这种方案的缺点也很明显，减少了实时协作的便利性，对于协作设计、协作编码、协作文档的场景，同一时间只能有一个用户编辑，提高的效率有限。所以这里再分享另外一种实时协同算法作为扩展知识。</p><h3 id="_2、扩展知识-ot-算法" tabindex="-1"><a class="header-anchor" href="#_2、扩展知识-ot-算法" aria-hidden="true">#</a> 2、扩展知识 - OT 算法</h3><p>实时协同 OT 算法（Operational Transformation）是一种支持分布式系统中多个用户实时协作编辑的核心算法，广泛应用于在线文档协作等场景。OT 算法的主要功能是解决并发编辑冲突，<strong>确保编辑结果在所有用户终端一致</strong>。</p><p>OT 算法其实很好理解，先看下 3 个核心概念：</p><ul><li>操作 (Operation)：表示用户对协作内容的修改，比如插入字符、删除字符等。</li><li>转化 (Transformation)：当多个用户同时编辑内容时，OT 会根据操作的上下文将它们转化，使得这些操作可以按照不同的顺序应用而结果保持一致。</li><li>因果一致性：OT 算法确保操作按照用户看到的顺序被正确执行，即每个用户的操作基于最新的内容状态。</li></ul><p>其中，最重要的就是 <strong>转化</strong> 步骤了，相当于有一个负责人统一收集大家的操作，然后按照设定的规则和信息进行排序与合并，最终给大家一个统一的结果。</p><p>举一个简单的例子，假设初始内容是 <code>&quot;abc&quot;</code>，用户 A 和 B 同时进行编辑：</p><ul><li>用户 A 在位置 <code>1</code> 插入 <code>&quot;x&quot;</code></li><li>用户 B 在位置 <code>2</code> 删除 <code>&quot;b&quot;</code></li></ul><p>如果不使用 OT 算法，结果是：</p><ol><li>用户 A 操作后，内容变为 <code>&quot;axbc&quot;</code></li><li>用户 B 操作后，内容变为 <code>&quot;ac&quot;</code></li></ol><p>如果直接应用 B 的操作到 A 的结果，得到的是 <code>&quot;ac&quot;</code>，对于 A 来说，相当于删除了 <code>&quot;b&quot;</code>，A 会感到一脸懵逼。sh73BCt3Qxf5JT1JjRCD/wiXC5EF5J2PadQ+z7zCgT0=</p><p>如果使用 OT 算法，结果是：</p><ol><li>用户 A 的操作，应用后内容为 <code>&quot;axbc&quot;</code></li><li>用户 B 的操作经过 OT 转化为删除 <code>&quot;b&quot;</code> 在 <code>&quot;axbc&quot;</code> 中的新位置</li></ol><p>最终用户 A 和 B 的内容都一致为 <code>&quot;axc&quot;</code>，符合预期。OT 算法确保无论用户编辑的顺序如何，最终内容是一致的。</p><p>当然，具体的 OT 算法还是要根据需求来设计了，协作密度越高，算法设计难度越大。</p><p>此外，还有一种与 OT 类似的协同算法 CRDT（Conflict-free Replicated Data Type），其通过数学模型实现无需中心化转化的冲突解决，在离线协作场景中更具优势。</p><h2 id="二、提高协作实时性" tabindex="-1"><a class="header-anchor" href="#二、提高协作实时性" aria-hidden="true">#</a> 二、提高协作实时性</h2><p>在实时通讯的业务场景中，常用的技术方案包括长轮询、SSE 和 WebSocket。由于我们的业务需求需要实现频繁且高效的双向通信，因此我们选用 WebSocket 来实现即时通讯。</p><h3 id="_1、什么是-websocket" tabindex="-1"><a class="header-anchor" href="#_1、什么是-websocket" aria-hidden="true">#</a> 1、什么是 WebSocket？</h3><p>WebSocket 是一种 <strong>全双工通信协议</strong>，让客户端（比如浏览器）和服务器之间能够保持实时、持续的连接。和传统的 HTTP 请求-响应模式不同，WebSocket 是一条**“常开的隧道”**，连接的双方可以随时发送和接收数据，而不需要不断建立和关闭连接。4AeqD6wp8ZemHEHZXii0QseGHx9Ks4t5/a/SqKw4Xao=</p><p>打个比方：</p><ul><li>HTTP 就像点外卖： 每次下单（请求）- 到货（响应）都是一次独立的操作，完成后连接关闭。</li><li>WebSocket 像是打电话：你打通了电话（建立连接），可以随时聊天（双向通信），直到挂断（关闭连接）。</li></ul><h3 id="_2、websocket-的应用场景" tabindex="-1"><a class="header-anchor" href="#_2、websocket-的应用场景" aria-hidden="true">#</a> 2、WebSocket 的应用场景</h3><p>WebSocket 的主要作用是 <strong>实现实时数据传输</strong>，适用于需要频繁交互或者实时更新数据的场景。比如：</p><ul><li>即时通讯（聊天软件、实时协作工具）</li><li>实时数据更新（股票行情、体育比赛比分）</li><li>在线游戏（多人实时互动）</li><li>物联网（设备状态实时传输）</li><li>协同编辑（像语雀这样的多人协作编辑）</li></ul><p>通过 WebSocket，客户端与服务器之间能够显著减少消息传输的延迟，提高通信效率，同时降低数据传输的开销。</p><h3 id="_3、websocket-和-http-的关系" tabindex="-1"><a class="header-anchor" href="#_3、websocket-和-http-的关系" aria-hidden="true">#</a> 3、WebSocket 和 HTTP 的关系</h3><p>WebSocket 和 HTTP 是两种不同的通信协议，但它们是紧密相关的，都是基于 TCP 协议、都可以在同样的端口上工作（比如 80 和 443）。eSasHSGfWfAWFdHk80qa2pFPfNtK5fDlnveBE/gAkZQ=</p><p>**首先要明确，WebSocket 是建立在 HTTP 基础之上的！**WebSocket 的连接需要通过 HTTP 协议发起一个握手（称为 HTTP Upgrade 请求），这个握手请求是 WebSocket 建立连接的前提，表明希望切换协议；服务器如果支持 WebSocket，会返回一个 HTTP 101 状态码，表示协议切换成功。</p><p>握手完成后，HTTP 协议的作用结束，通信会切换为 WebSocket 协议，双方可以开始全双工通信。</p><p>二者的区别如下，大家了解一下就好：</p><table><thead><tr><th>对比项</th><th>HTTP</th><th>WebSocket</th></tr></thead><tbody><tr><td>通信模式</td><td>请求-响应（单向）</td><td>全双工通信（双向）</td></tr><tr><td>连接状态</td><td>每次请求创建新的连接</td><td>握手后保持持续连接</td></tr><tr><td>数据传输效率</td><td>每次通信都需要带完整头部，开销大</td><td>数据帧小，传输高效</td></tr><tr><td>适用场景</td><td>静态网页加载、API 调用等非实时场景</td><td>实时交互场景，如聊天、游戏、直播等</td></tr></tbody></table><h3 id="_4、websocket-协作编辑的流程" tabindex="-1"><a class="header-anchor" href="#_4、websocket-协作编辑的流程" aria-hidden="true">#</a> 4、WebSocket 协作编辑的流程</h3><p>通过 WebSocket 实时通信的能力，可以将用户的编辑操作发给 WebSocket 服务器，再由服务器转发给其他连接服务器的用户前端，前端就可以根据操作处理图片。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503221700360.png" alt="image-20250322170012287" tabindex="0" loading="lazy"><figcaption>image-20250322170012287</figcaption></figure><p>具体的业务流程：</p><ol><li>建立连接之前，先进行用户权限校验；校验通过后，将登录用户信息、要编辑的图片信息保存到要建立的 WebSocket 连接的会话属性中。</li><li>建立连接成功后，将 WebSocket 会话保存到该图片对应的会话集合中，便于后续分发消息给其他会话。</li><li>前端将消息发送到后端，后端根据消息类型分发到对应的处理器。</li><li>处理器处理消息，将处理结果作为消息发送给需要的 WebSocket 客户端。</li><li>当前端断开连接时，删除会话集合中的 WebSocket 会话，释放资源</li></ol><p>和 HTTP 请求一样，前端和 WebSocket 服务器之间传输信息时，也可以通过 JSON 格式对数据进行序列化。</p><h3 id="_5、websocket-的实现方式" tabindex="-1"><a class="header-anchor" href="#_5、websocket-的实现方式" aria-hidden="true">#</a> 5、WebSocket 的实现方式</h3><p>对于 Java Spring 项目，主要有原生 WebSocket（基于<code>WebSocketHandler</code> 实现）、STOMP、WebFlux 这 3 种实现方式。</p><p>它们之间的对比如下：</p><table><thead><tr><th>实现方式</th><th>特点</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>原生 WebSocket</td><td>低层 API，手动管理连接与消息</td><td>轻量、灵活、适用于简单点对点通信</td><td>需要手动管理会话和分发，不支持 STOMP</td><td>简单的实时推送，低并发场景</td></tr><tr><td>WebSocket + STOMP + SockJS</td><td>基于 STOMP，支持发布/订阅模式</td><td>支持 STOMP、消息代理、适配</td><td>依赖外部代理，配置较复杂</td><td>聊天室、多人协作，高级实时应用</td></tr><tr><td>WebFlux + Reactive WebSocket</td><td>基于 WebFlux 的响应式实现</td><td>高并发、非阻塞、适用于大流量场</td><td>学习曲线高，不支持 STOMP</td><td>高并发场景、大数据流推送</td></tr></tbody></table><p>网上的建议是：对于大多数简单实时推送，选用原生 WebSocket；对于复杂的聊天室和协同系统，选用 WebSocket + STOMP + SockJS；对于高并发、低延迟数据流推送，选用 WebFlux + Reactive WebSocket。</p><p>对于这个歌项目，并发要求不高，选择 Spring 原生的 WebSocket 来降低开发成本。</p><p>明确方案后，进入后端开发。</p><h2 id="三、后端开发" tabindex="-1"><a class="header-anchor" href="#三、后端开发" aria-hidden="true">#</a> 三、后端开发</h2><h3 id="_1、引入-websocket-依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入-websocket-依赖" aria-hidden="true">#</a> 1、引入 WebSocket 依赖</h3><p>引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- websocket --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建 <code>manager.websocket</code> 包，所有和 WebSocket 相关的代码都放到该包下。</p><h3 id="_2、定义数据模型" tabindex="-1"><a class="header-anchor" href="#_2、定义数据模型" aria-hidden="true">#</a> 2、定义数据模型</h3><p>新建 <code>websocket.model</code> 包，存放数据模型，包括请求类、响应类、枚举类。</p><p>1）定义图片编辑请求消息，也就是前端要发送给后端的参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureEditRequestMessage</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 消息类型，例如 &quot;ENTER_EDIT&quot;, &quot;EXIT_EDIT&quot;, &quot;EDIT_ACTION&quot;
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 执行的编辑动作（左旋、右旋）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> editAction<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）定义图片编辑响应消息，也就是后端要发送给前端的信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureEditResponseMessage</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 消息类型，例如 &quot;INFO&quot;, &quot;ERROR&quot;, &quot;ENTER_EDIT&quot;, &quot;EXIT_EDIT&quot;, &quot;EDIT_ACTION&quot;
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 信息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 执行的编辑动作
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> editAction<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 用户信息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">UserVO</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）定义图片编辑<mark>消息类型</mark>枚举，便于后续根据消息类型进行相应的处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PictureEditMessageTypeEnum</span> <span class="token punctuation">{</span>

    <span class="token function">INFO</span><span class="token punctuation">(</span><span class="token string">&quot;发送通知&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;INFO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token string">&quot;发送错误&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ERROR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ENTER_EDIT</span><span class="token punctuation">(</span><span class="token string">&quot;进入编辑状态&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ENTER_EDIT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">EXIT_EDIT</span><span class="token punctuation">(</span><span class="token string">&quot;退出编辑状态&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;EXIT_EDIT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">EDIT_ACTION</span><span class="token punctuation">(</span><span class="token string">&quot;执行编辑操作&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;EDIT_ACTION&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

    <span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 根据 value 获取枚举
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PictureEditMessageTypeEnum</span> <span class="token function">getEnumByValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PictureEditMessageTypeEnum</span> typeEnum <span class="token operator">:</span> <span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>typeEnum<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> typeEnum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）定义图片编辑<mark>操作类型</mark>枚举：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PictureEditActionEnum</span> <span class="token punctuation">{</span>

    <span class="token function">ZOOM_IN</span><span class="token punctuation">(</span><span class="token string">&quot;放大操作&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ZOOM_IN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ZOOM_OUT</span><span class="token punctuation">(</span><span class="token string">&quot;缩小操作&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ZOOM_OUT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ROTATE_LEFT</span><span class="token punctuation">(</span><span class="token string">&quot;左旋操作&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ROTATE_LEFT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ROTATE_RIGHT</span><span class="token punctuation">(</span><span class="token string">&quot;右旋操作&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ROTATE_RIGHT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

    <span class="token class-name">PictureEditActionEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 根据 value 获取枚举
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PictureEditActionEnum</span> <span class="token function">getEnumByValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PictureEditActionEnum</span> actionEnum <span class="token operator">:</span> <span class="token class-name">PictureEditActionEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionEnum<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> actionEnum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、websocket-拦截器-权限校验" tabindex="-1"><a class="header-anchor" href="#_3、websocket-拦截器-权限校验" aria-hidden="true">#</a> 3、WebSocket 拦截器 - 权限校验</h3><p>在 WebSocket 连接前需要进行权限校验，如果发现用户没有团队空间内编辑图片的权限，则拒绝握手，可以通过定义一个 WebSocket <mark>拦截器</mark>实现这个能力。</p><p>此外，由于 HTTP 和 WebSocket 的区别，我们不能在后续收到前端消息时直接从 request 对象中获取到登录用户信息，因此也需要通过 WebSocket 拦截器，为即将建立连接的 WebSocket 会话指定一些属性，比如登录用户信息、编辑的图片 id 等。</p><p>编写拦截器的代码，需要实现 <code>HandshakeInterceptor</code> 接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WsHandshakeInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandshakeInterceptor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">PictureService</span> pictureService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">SpaceService</span> spaceService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">SpaceUserAuthManager</span> spaceUserAuthManager<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">beforeHandshake</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">WebSocketHandler</span> wsHandler<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">ServletServerHttpRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">HttpServletRequest</span> servletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletServerHttpRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取请求参数</span>
            <span class="token class-name">String</span> pictureId <span class="token operator">=</span> servletRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;pictureId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;缺少图片参数，拒绝握手&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;用户未登录，拒绝握手&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 校验用户是否有该图片的权限</span>
            <span class="token class-name">Picture</span> picture <span class="token operator">=</span> pictureService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>picture <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;图片不存在，拒绝握手&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Long</span> spaceId <span class="token operator">=</span> picture<span class="token punctuation">.</span><span class="token function">getSpaceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Space</span> space <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>spaceId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                space <span class="token operator">=</span> spaceService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>spaceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>space <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;空间不存在，拒绝握手&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>space<span class="token punctuation">.</span><span class="token function">getSpaceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">SpaceTypeEnum</span><span class="token punctuation">.</span><span class="token constant">TEAM</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;不是团队空间，拒绝握手&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissionList <span class="token operator">=</span> spaceUserAuthManager<span class="token punctuation">.</span><span class="token function">getPermissionList</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>permissionList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">SpaceUserPermissionConstant</span><span class="token punctuation">.</span><span class="token constant">PICTURE_EDIT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;没有图片编辑权限，拒绝握手&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 设置 attributes</span>
            attributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            attributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            attributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;pictureId&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记得转换为 Long 类型</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterHandshake</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">WebSocketHandler</span> wsHandler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、websocket-处理器" tabindex="-1"><a class="header-anchor" href="#_4、websocket-处理器" aria-hidden="true">#</a> 4、WebSocket 处理器</h3><p>我们需要定义 WebSocket 处理器类，在连接成功、连接关闭、接收到客户端消息时进行相应的处理。</p><p>可以实现 TextWebSocketHandler 接口，这样就能以字符串的方式发送和接受消息了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureEditHandler</span> <span class="token keyword">extends</span> <span class="token class-name">TextWebSocketHandler</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1）首先在处理器类中定义 2 个常量，分别为：</p><ul><li>保存当前正在编辑的用户 id，执行编辑操作、进入或退出编辑时都会校验。</li><li>保存参与编辑图片的用户 WebSocket 会话的集合。</li></ul><p>由于每个图片的协作编辑都是相互独立的，所以需要用 Map 来区分每个图片 id 对应的数据。代码如下：De2I4UrW20CPScxCcSU7uF8KCFatINtQxzkRHs4rQgs=</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 每张图片的编辑状态，key: pictureId, value: 当前正在编辑的用户 ID</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> pictureEditingUsers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存所有连接的会话，key: pictureId, value: 用户会话集合</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketSession</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pictureSessions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，由于可能同时有多个 WebSocket 客户端建立连接和发送消息，集合要使用并发包（JUC）中的 <code>ConcurrentHashMap</code>，来保证线程安全。</p><p>2）由于接下来很多消息都需要传递给所有协作者，所以先编写一个 <strong>广播消息</strong> 的方法。该方法会根据 pictureId，将响应消息发送给编辑该图片的所有会话。考虑到可能会有消息不需要发送给编辑者本人的情况，该方法还可以接受 excludeSession 参数，支持排除掉向某个会话发送消息。4AeqD6wp8ZemHEHZXii0QseGHx9Ks4t5/a/SqKw4Xao=</p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">broadcastToPicture</span><span class="token punctuation">(</span><span class="token class-name">Long</span> pictureId<span class="token punctuation">,</span> <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage<span class="token punctuation">,</span> <span class="token class-name">WebSocketSession</span> excludeSession<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketSession</span><span class="token punctuation">&gt;</span></span> sessionSet <span class="token operator">=</span> pictureSessions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>sessionSet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 ObjectMapper</span>
        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置序列化：将 Long 类型转为 String，解决丢失精度问题</span>
        <span class="token class-name">SimpleModule</span> <span class="token keyword">module</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">module</span><span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">module</span><span class="token punctuation">.</span><span class="token function">addSerializer</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 支持 long 基本类型</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 序列化为 JSON 字符串</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>pictureEditResponseMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TextMessage</span> textMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session <span class="token operator">:</span> sessionSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 排除掉的 session 不发送</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>excludeSession <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> excludeSession<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                session<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>textMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中有个小细节，由于前端 JS 的长整数可能会丢失精度，所以使用 Jackson 自定义序列化器，在将对象转换为 JSON 字符串时，将 Long 类型转换为 String 类型。58IUDBvyDy7G+gVMqAunJfAo72ZBX//2DD/nhaX54Xg=</p><p>再编写一个不排除 Session，给所有会话广播的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 全部广播</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">broadcastToPicture</span><span class="token punctuation">(</span><span class="token class-name">Long</span> pictureId<span class="token punctuation">,</span> <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token function">broadcastToPicture</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">,</span> pictureEditResponseMessage<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）实现连接建立成功后执行的方法，保存会话到集合中，并且给其他会话发送消息：eSasHSGfWfAWFdHk80qa2pFPfNtK5fDlnveBE/gAkZQ=</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterConnectionEstablished</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 保存会话到集合中</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> pictureId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;pictureId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pictureSessions<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">,</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">.</span><span class="token function">newKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pictureSessions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 构造响应</span>
    <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureEditResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s加入编辑&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserVO</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 广播给同一张图片的用户</span>
    <span class="token function">broadcastToPicture</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">,</span> pictureEditResponseMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）编写接收客户端消息的方法，根据消息类别执行不同的处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleTextMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">TextMessage</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将消息解析为 PictureEditMessage</span>
    <span class="token class-name">PictureEditRequestMessage</span> pictureEditRequestMessage <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">PictureEditRequestMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> type <span class="token operator">=</span> pictureEditRequestMessage<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PictureEditMessageTypeEnum</span> pictureEditMessageTypeEnum <span class="token operator">=</span> <span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 从 Session 属性中获取公共参数</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> pictureId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;pictureId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用对应的消息处理方法</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>pictureEditMessageTypeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">ENTER_EDIT</span><span class="token operator">:</span>
            <span class="token function">handleEnterEditMessage</span><span class="token punctuation">(</span>pictureEditRequestMessage<span class="token punctuation">,</span> session<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">EDIT_ACTION</span><span class="token operator">:</span>
            <span class="token function">handleEditActionMessage</span><span class="token punctuation">(</span>pictureEditRequestMessage<span class="token punctuation">,</span> session<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">EXIT_EDIT</span><span class="token operator">:</span>
            <span class="token function">handleExitEditMessage</span><span class="token punctuation">(</span>pictureEditRequestMessage<span class="token punctuation">,</span> session<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureEditResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;消息类型错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserVO</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            session<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMessage</span><span class="token punctuation">(</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>pictureEditResponseMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来依次编写每个处理消息的方法。首先是用户进入编辑状态，要设置当前用户为编辑用户，并且向其他客户端发送消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleEnterEditMessage</span><span class="token punctuation">(</span><span class="token class-name">PictureEditRequestMessage</span> pictureEditRequestMessage<span class="token punctuation">,</span> <span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Long</span> pictureId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 没有用户正在编辑该图片，才能进入编辑</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pictureEditingUsers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置当前用户为编辑用户</span>
        pictureEditingUsers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureEditResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">ENTER_EDIT</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s开始编辑图片&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserVO</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">broadcastToPicture</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">,</span> pictureEditResponseMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户执行编辑操作时，将该操作同步给 <strong>除了当前用户之外</strong> 的其他客户端，也就是说编辑操作不用再同步给自己：LRHaTWpO/TqfSq02pCgjgzFumTJ6kTTHTt+i9QKq4l0=</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleEditActionMessage</span><span class="token punctuation">(</span><span class="token class-name">PictureEditRequestMessage</span> pictureEditRequestMessage<span class="token punctuation">,</span> <span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Long</span> pictureId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Long</span> editingUserId <span class="token operator">=</span> pictureEditingUsers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> editAction <span class="token operator">=</span> pictureEditRequestMessage<span class="token punctuation">.</span><span class="token function">getEditAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PictureEditActionEnum</span> actionEnum <span class="token operator">=</span> <span class="token class-name">PictureEditActionEnum</span><span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span>editAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>actionEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 确认是当前编辑者</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>editingUserId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> editingUserId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureEditResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">EDIT_ACTION</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s执行%s&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actionEnum<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setEditAction</span><span class="token punctuation">(</span>editAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserVO</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 广播给除了当前客户端之外的其他用户，否则会造成重复编辑</span>
        <span class="token function">broadcastToPicture</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">,</span> pictureEditResponseMessage<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户退出编辑操作时，移除当前用户的编辑状态，并且向其他客户端发送消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleExitEditMessage</span><span class="token punctuation">(</span><span class="token class-name">PictureEditRequestMessage</span> pictureEditRequestMessage<span class="token punctuation">,</span> <span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Long</span> pictureId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Long</span> editingUserId <span class="token operator">=</span> pictureEditingUsers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>editingUserId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> editingUserId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 移除当前用户的编辑状态</span>
        pictureEditingUsers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 构造响应，发送退出编辑的消息通知</span>
        <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureEditResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">EXIT_EDIT</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s退出编辑图片&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserVO</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">broadcastToPicture</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">,</span> pictureEditResponseMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5）WebSocket 连接关闭时，需要移除当前用户的编辑状态、并且从集合中删除当前会话，还可以给其他客户端发送消息通知：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterConnectionClosed</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">CloseStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> pictureId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;pictureId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 移除当前用户的编辑状态</span>
    <span class="token function">handleExitEditMessage</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> session<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 删除会话</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketSession</span><span class="token punctuation">&gt;</span></span> sessionSet <span class="token operator">=</span> pictureSessions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sessionSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionSet<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pictureSessions<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 响应</span>
    <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureEditResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s离开编辑&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserVO</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">broadcastToPicture</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">,</span> pictureEditResponseMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>💡 由于处理器的代码并不复杂，而且处理逻辑中使用到了当前类的全局变量，所以鱼皮没有选择将每个处理器封装为单独的类。大家也可以将每个处理器封装为单独的类（相当于设计模式中的策略模式），并且根据消息类别调用不同的处理器类。</p><h3 id="_5、websocket-配置" tabindex="-1"><a class="header-anchor" href="#_5、websocket-配置" aria-hidden="true">#</a> 5、WebSocket 配置</h3><p>类似于编写 Spring MVC 的 Controller 接口，可以为指定的路径配置处理器和拦截器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSocket</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">PictureEditHandler</span> pictureEditHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">WsHandshakeInterceptor</span> wsHandshakeInterceptor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// websocket</span>
        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>pictureEditHandler<span class="token punctuation">,</span> <span class="token string">&quot;/ws/picture/edit&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>wsHandshakeInterceptor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，前端就可以通过 WebSocket 连接项目启动端口的 <code>/ws/picture/edit</code> 路径了。</p><h2 id="四、扩展知识-disruptor-优化" tabindex="-1"><a class="header-anchor" href="#四、扩展知识-disruptor-优化" aria-hidden="true">#</a> 四、扩展知识 - Disruptor 优化</h2><h3 id="_1、现存的系统问题" tabindex="-1"><a class="header-anchor" href="#_1、现存的系统问题" aria-hidden="true">#</a> 1、现存的系统问题</h3><p>WebSocket 通常是长连接，每个客户端都需要占用服务器资源。在 Spring WebSocket 中，每个 WebSocket 连接（客户端）对应一个独立的 <code>WebSocketSession</code>，消息的处理是在该 <code>WebSocketSession</code> 所属的线程中执行。</p><p>如果 <strong>同一个</strong> WebSocket 连接（客户端）连续发送多条消息，服务器会 <strong>按照接收的顺序依次同步处理</strong>，而不是并发执行。这是为了保证每个客户端的消息处理是线程安全的。</p><p>可以在 <code>handleTextMessage</code> 方法中增加 <code>Thread.sleep</code> 来测试一下。连续点击多次编辑操作，会发现每隔一段时间方法才会执行一次。</p><p>虽然多个客户端的消息处理是可以并发执行的，但是接受消息和具体处理某个消息使用的是 <strong>同一个线程</strong>。如果处理消息的耗时比较长，并发量又比较高，可能会导致系统响应时间变长，甚至因为资源耗尽而服务崩溃。</p><p>💡 为了便于理解，可以类比一下调用 Spring MVC 的某个接口时，如果该接口内部的耗时较长，请求线程就会一直阻塞，最终导致 Tomcat 请求连接数耗尽。</p><p>怎么解决这个问题呢？最简单的方法就是开一个线程专门来异步处理消息。但是我们还要保证操作是按照顺序同步给其他客户端的，因此还需要引入一个队列，将任务按照顺序放到队列中，交给线程去处理。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503221705296.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其实上述的异步操作 + 从任务队列取任务执行，使用线程池就可以实现了。</p><p>但对于协同编辑场景，需要尽可能地保证低延迟，因此我们选用一种高级技术 <strong>Disruptor</strong> 无锁队列来减少线程上下文的切换，能够在高并发场景下保持低延迟和高吞吐量。4AeqD6wp8ZemHEHZXii0QseGHx9Ks4t5/a/SqKw4Xao=</p><p>此外，使用 Disruptor 还有一个优点，可以将任务放到队列中，通过优雅停机机制，在服务停止前执行完所有的任务，再退出服务，防止消息丢失。</p><h3 id="_2、disruptor-介绍" tabindex="-1"><a class="header-anchor" href="#_2、disruptor-介绍" aria-hidden="true">#</a> 2、Disruptor 介绍</h3>`,118),k={href:"https://lmax-exchange.github.io/disruptor/#_what_is_the_disruptor",target:"_blank",rel:"noopener noreferrer"},r=s("strong",null,"无锁的环形队列",-1),d=a('<p>它最大的特点就是快、延迟低，非常低！</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503221705303.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Disruptor 的核心思想是基于固定大小的 <strong>环形缓冲区</strong>（Ring Buffer），并通过序列化控制访问，以避免传统队列中常见的</p><p>它主要通过以下几点实现高性能的消息传递机制：</p><ol><li>环形缓冲区：使用固定大小的数组，可以复用内存，避免了频繁的内存分配和垃圾回收。</li><li>无锁设计：依赖 CAS（Compare-And-Swap）和内存屏障，而不是传统的锁，降低了线程切换的开销。</li><li>缓存友好：最大化利用 CPU 的缓存局部性，提高访问速度。</li><li>序列号机制：通过序列号管理生产者和消费者的访问，保证数据一致性。</li><li>多消费者模式：支持多消费者共享同一环形缓冲区，并能配置不同的消费策略（如依赖关系、并行消费等）。</li></ol><p>Disruptor 与传统队列对比：</p><table><thead><tr><th>特性</th><th>Disruptor</th><th>BlockingQueue</th></tr></thead><tbody><tr><td>并发控制</td><td>无锁（CAS + 内存屏障）</td><td>基于锁（ReentrantLock）</td></tr><tr><td>内存管理</td><td>固定长度的环形数组</td><td>动态数组或链表</td></tr><tr><td>性能</td><td>极高（百万级别消息/秒）</td><td>较低（数万消息/秒）</td></tr><tr><td>延迟</td><td>纳秒级别</td><td>毫秒级别</td></tr><tr><td>GC 压力</td><td>极低（数据复用）</td><td>较高（频繁创建新对象）</td></tr><tr><td>适用场景</td><td>高频实时消息处理、金融系统</td><td>一般生产者消费者模型</td></tr></tbody></table><h3 id="_3、disruptor-核心概念与工作流程" tabindex="-1"><a class="header-anchor" href="#_3、disruptor-核心概念与工作流程" aria-hidden="true">#</a> 3、Disruptor 核心概念与工作流程</h3><p>先了解 Disruptor 的核心概念：58IUDBvyDy7G+gVMqAunJfAo72ZBX//2DD/nhaX54Xg=</p><ul><li>RingBuffer（环形缓冲区）：固定大小的循环数组，用于存储数据项，生产者和消费者共享该数据结构。</li><li>Event（事件）：存储在 <code>RingBuffer</code> 中的数据对象，用于表示要传递的消息或数据。</li><li>Producer（生产者）：负责向 <code>RingBuffer</code> 写入数据的角色。</li><li>Consumer（消费者）：从 <code>RingBuffer</code> 中读取并处理数据的角色。</li><li>Sequencer（序列器）：管理生产者与消费者的索引，确保并发安全的序列管理。</li><li>SequenceBarrier（序列屏障）：控制消费者等待数据可用的机制，确保数据完整性。</li><li>WaitStrategy（等待策略）：定义消费者如何等待新的数据（如自旋、自适应等待等）。</li><li>EventProcessor（事件处理器）：集成了 <code>Consumer</code> 和 <code>SequenceBarrier</code>，用于更高级的消费控制。</li></ul><p>而 Disruptor 是封装了 <code>RingBuffer</code>、<code>Producer</code> 和 <code>Consumer</code> 的核心管理类，用于协调所有组件的运行。</p><p>下面我举例来说明 Disruptor 的工作流程：J+5o58b0kn/bTqd/50F76o1L2/PhqvQWrl14ca26WW0=</p><ol><li>环形队列初始化：创建一个固定大小为 8 的 RingBuffer（索引范围 0-7），每个格子存储一个可复用的事件对象，序号初始为 0。</li><li>生产者写入数据：生产者申请索引 0（序号 0），将数据 &quot;A&quot; 写入事件对象，提交后序号递增为 1，下一个写入索引变为 1。</li><li>消费者读取数据：消费者检查索引 0（序号 0），读取数据 &quot;A&quot;，处理后提交，序号递增为 1，下一个读取索引变为 1。</li><li>环形队列循环使用：当生产者写入到索引 7（序号 7）后，索引回到 0（序号 8），形成循环存储，<strong>但序号会持续自增以区分数据的先后顺序。</strong></li><li>防止数据覆盖：如果生产者追上消费者，消费者尚未处理完数据，生产者会等待，确保数据不被覆盖。</li></ol><p>下图是一个 Disruptor 生产者的模型，仅供参考，了解一下即可：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503221705308.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',15),v={href:"https://juejin.cn/post/6844903648875528206",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>下面我们来引入 Disruptor 来优化代码。</p><h3 id="_4、disruptor-实战" tabindex="-1"><a class="header-anchor" href="#_4、disruptor-实战" aria-hidden="true">#</a> 4、Disruptor 实战</h3><p>1）引入 Disruptor 依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 高性能无锁队列 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.lmax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>disruptor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）定义事件</p><p>事件是 Disruptor 执行的核心单位，在 <code>websocket.disruptor</code> 包中新建 PictureEditEvent 类，充当了上下文容器，所有处理消息所需的数据都被封装在其中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureEditEvent</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 消息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">PictureEditRequestMessage</span> pictureEditRequestMessage<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 当前用户的 session
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">WebSocketSession</span> session<span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 当前用户
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 图片 id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> pictureId<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）定义事件处理器（消费者）</p><p>这里基本上是把 <code>PictureEditHandler</code> 分发消息的逻辑搬了过来，它的作用就是将不同类型的消息分发到对应的处理器中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureEditEventWorkHandler</span> <span class="token keyword">implements</span> <span class="token class-name">WorkHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PictureEditEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token annotation punctuation">@Lazy</span>
    <span class="token keyword">private</span> <span class="token class-name">PictureEditHandler</span> pictureEditHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">PictureEditEvent</span> event<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">PictureEditRequestMessage</span> pictureEditRequestMessage <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getPictureEditRequestMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WebSocketSession</span> session <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> pictureId <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getPictureId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取到消息类别</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> pictureEditRequestMessage<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PictureEditMessageTypeEnum</span> pictureEditMessageTypeEnum <span class="token operator">=</span> <span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用对应的消息处理方法</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>pictureEditMessageTypeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">ENTER_EDIT</span><span class="token operator">:</span>
                pictureEditHandler<span class="token punctuation">.</span><span class="token function">handleEnterEditMessage</span><span class="token punctuation">(</span>pictureEditRequestMessage<span class="token punctuation">,</span> session<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">EDIT_ACTION</span><span class="token operator">:</span>
                pictureEditHandler<span class="token punctuation">.</span><span class="token function">handleEditActionMessage</span><span class="token punctuation">(</span>pictureEditRequestMessage<span class="token punctuation">,</span> session<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">EXIT_EDIT</span><span class="token operator">:</span>
                pictureEditHandler<span class="token punctuation">.</span><span class="token function">handleExitEditMessage</span><span class="token punctuation">(</span>pictureEditRequestMessage<span class="token punctuation">,</span> session<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token class-name">PictureEditResponseMessage</span> pictureEditResponseMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureEditResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PictureEditMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;消息类型错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pictureEditResponseMessage<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserVO</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                session<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMessage</span><span class="token punctuation">(</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>pictureEditResponseMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）添加 Disruptor 配置类，将我们刚定义的事件及处理器关联到 Disruptor 实例中：4AeqD6wp8ZemHEHZXii0QseGHx9Ks4t5/a/SqKw4Xao=</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureEditEventDisruptorConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">PictureEditEventWorkHandler</span> pictureEditEventWorkHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;pictureEditEventDisruptor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PictureEditEvent</span><span class="token punctuation">&gt;</span></span> <span class="token function">messageModelRingBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ringBuffer 的大小</span>
        <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">;</span>
        <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PictureEditEvent</span><span class="token punctuation">&gt;</span></span> disruptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
                <span class="token class-name">PictureEditEvent</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span>
                bufferSize<span class="token punctuation">,</span>
                <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNamePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;pictureEditEventDisruptor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置消费者</span>
        disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWithWorkerPool</span><span class="token punctuation">(</span>pictureEditEventWorkHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 开启 disruptor</span>
        disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> disruptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、定义事件生产者</p><p>生产者负责将数据（事件）发到 Disruptor 的环形缓冲区中。为了保证在停机时所有的消息都能够被处理，我们通过 <code>shutdown</code> 方法完成 Disruptor 的优雅停机。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureEditEventProducer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PictureEditEvent</span><span class="token punctuation">&gt;</span></span> pictureEditEventDisruptor<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token class-name">PictureEditRequestMessage</span> pictureEditRequestMessage<span class="token punctuation">,</span> <span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">Long</span> pictureId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RingBuffer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PictureEditEvent</span><span class="token punctuation">&gt;</span></span> ringBuffer <span class="token operator">=</span> pictureEditEventDisruptor<span class="token punctuation">.</span><span class="token function">getRingBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取可以生成的位置</span>
        <span class="token keyword">long</span> next <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PictureEditEvent</span> pictureEditEvent <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditEvent<span class="token punctuation">.</span><span class="token function">setSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditEvent<span class="token punctuation">.</span><span class="token function">setPictureEditRequestMessage</span><span class="token punctuation">(</span>pictureEditRequestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditEvent<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pictureEditEvent<span class="token punctuation">.</span><span class="token function">setPictureId</span><span class="token punctuation">(</span>pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发布事件</span>
        ringBuffer<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 优雅停机
     */</span>
    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pictureEditEventDisruptor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、修改 PictureEditHandler 的原有逻辑，改为使用事件生产者：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">PictureEditEventProducer</span> pictureEditEventProducer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleTextMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">TextMessage</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将消息解析为 PictureEditMessage</span>
    <span class="token class-name">PictureEditRequestMessage</span> pictureEditRequestMessage <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">PictureEditRequestMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从 Session 属性中获取公共参数</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> pictureId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;pictureId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 生产消息</span>
    pictureEditEventProducer<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>pictureEditRequestMessage<span class="token punctuation">,</span> session<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pictureId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就实现了基于 Disruptor 的异步消息处理机制，将原有的同步消息分发逻辑改造为高效解耦的异步处理模型，也更有利于代码的扩展。</p><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><p>1、为防止消息丢失，可以使用 Redis 等高性能存储保存执行的操作记录。</p><p>目前如果图片已经被编辑了，新用户加入编辑时没办法查看到已编辑的状态，这一点也可以利用 Redis 保存操作记录来解决，新用户加入编辑时读取 Redis 的操作记录即可。</p><p>2、每种类型的消息处理可以封装为独立的 Handler 处理器类，也就是采用策略模式。</p><p>3、支持分布式 WebSocket。实现思路很简单，只需要保证要编辑同一图片的用户连接的是相同的服务器即可，和游戏分服务器大区、聊天室分房间是类似的原理。</p><p>4、一些小问题的优化：比如 WebSocket 连接建立之后，如果用户退出了登录，这时 WebSocket 的连接是没有断开的。不过影响并不大，大家可以思考下怎么处理。</p>`,24);function b(g,f){const t=i("ExternalLinkIcon");return c(),o("div",null,[l,s("p",null,[s("a",k,[n("Disruptor"),e(t)]),n(" 是一种高性能的并发框架，由 LMAX（一个金融交易系统公司）开发，它是一种 "),r,n(" 数据结构，用于解决高吞吐量和低延迟场景中的并发问题。支持生产者-消费者模式，可作为消息队列使用，适用于金融交易、实时数据处理、游戏事件等对并发和实时性要求较高的场景。")]),d,s("p",null,[n("其实对大家来说，先将 Disruptor 当做一个高性能的队列来使用就可以了，可以向队列中添加事件并定义处理方式。感兴趣的同学可以阅读 "),s("a",v,[n("这篇文章"),e(t)]),n(" 深入了解 Disruptor 性能高的原因。")]),m])}const y=p(u,[["render",b],["__file","11.Collaborative photo editing.html.vue"]]);export{y as default};
