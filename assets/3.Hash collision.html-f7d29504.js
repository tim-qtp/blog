const t=JSON.parse('{"key":"v-0fa71413","path":"/Java/collections/3.Hash%20collision.html","title":"Hash冲突","lang":"zh-CN","frontmatter":{"order":3,"author":null,"title":"Hash冲突","category":["Java基础","集合"],"description":"什么是hash冲突： 总会出现不同的数据经过计算后得到的hash值，然后再取模以后的值是一样的情况，因为你的初始化空间是有限的。 怎么解决呢？ 开放定址法：从发生冲突的地方按照一定次序，从hash表中找到一个空闲的位置，然后把发生冲突的元素存入到这个位置；在java中ThreadLocal就用到了线性探针法；; 链式寻址法：对存在hash冲突的key，...","head":[["meta",{"property":"og:url","content":"https://tim-qtp.github.io/blog/blog/Java/collections/3.Hash%20collision.html"}],["meta",{"property":"og:site_name","content":"Qtp"}],["meta",{"property":"og:title","content":"Hash冲突"}],["meta",{"property":"og:description","content":"什么是hash冲突： 总会出现不同的数据经过计算后得到的hash值，然后再取模以后的值是一样的情况，因为你的初始化空间是有限的。 怎么解决呢？ 开放定址法：从发生冲突的地方按照一定次序，从hash表中找到一个空闲的位置，然后把发生冲突的元素存入到这个位置；在java中ThreadLocal就用到了线性探针法；; 链式寻址法：对存在hash冲突的key，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-18T07:23:14.000Z"}],["meta",{"property":"article:author","content":"tim-qtp"}],["meta",{"property":"article:modified_time","content":"2025-03-18T07:23:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hash冲突\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-18T07:23:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"tim-qtp\\",\\"url\\":\\"https://github.com/tim-qtp/\\"}]}"]]},"headers":[],"git":{"createdTime":1742282594000,"updatedTime":1742282594000,"contributors":[{"name":"tim-qtp","email":"2469100031@qq.com","commits":1}]},"readingTime":{"minutes":0.81,"words":243},"filePathRelative":"Java/collections/3.Hash collision.md","localizedDate":"2025年3月18日","autoDesc":true,"excerpt":""}');export{t as data};
