import{_ as e,W as o,X as p,$ as s,a0 as a,Z as t,a2 as l,C as i}from"./framework-6a3aa88c.js";const c={},r=s("h3",{id:"mysql-事务的四大特性",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#mysql-事务的四大特性","aria-hidden":"true"},"#"),a(" MySQL 事务的四大特性？")],-1),d={href:"https://tim-qtp.github.io/blog/Java/mysql/5.ACID.html",target:"_blank",rel:"noopener noreferrer"},u=l(`<h3 id="事务的基本操作" tabindex="-1"><a class="header-anchor" href="#事务的基本操作" aria-hidden="true">#</a> 事务的基本操作</h3><p>MySQL 中通过以下语句控制事务：</p><ul><li><p><strong>开启事务</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>提交事务</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>回滚事务</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>转账案例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开启事务</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span>
<span class="token comment">-- 1. 查询张三余额</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 2. 张三的余额减少1000</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 3. 李四的余额增加1000</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 如果正常执行完毕, 则提交事务</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
<span class="token comment">-- 如果执行过程中报错, 则回滚事务</span>
<span class="token keyword">rollback</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql-是如何实现事务的" tabindex="-1"><a class="header-anchor" href="#mysql-是如何实现事务的" aria-hidden="true">#</a> MySQL 是如何实现事务的？</h3><p>MySQL 主要是通过：<strong>锁、Redo Log 、Undo Log、MVCC</strong> 来实现事务。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503181152828.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>MySQL 隔离性 利用MVCC(多版本并发控制)或锁机制来保证的。</p><p>Redo Log（重做日志），它会记录事务对数据库的所有修改，当 MySQL 发生宕机或崩溃时，通过重放 redolog 就可以恢复数据，用来满足事务的持久性。</p><p>Undo Log（回滚日志），它会记录事务的反向操作，简单地说就是保存数据的历史版本，用于事务的回滚，使得事务执行失败之后可以恢复之前的样子。实现原子性和隔离性</p><p>MVCC（多版本并发控制），满足了非锁定读的需求，提高了并发度，实现了读已提交和可重复读两种隔离级别，实现了事务的隔离性。</p><blockquote><p>那一致性呢？</p></blockquote><p>其实事务主要是为了实现一致性，具体是通过 AID，即原子性、隔离性和持久性来达到一致性的目的。</p><h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别：</h3><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250206173224178.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/4e98ea2e60923b969790898565b4d643.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看事务隔离级别：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250206173513426.png" alt="image-20250206173513426" tabindex="0" loading="lazy"><figcaption>image-20250206173513426</figcaption></figure><p>设置事务隔离级别：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> { <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token operator">|</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span> <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span> }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250206173617486.png" alt="image-20250206173617486" tabindex="0" loading="lazy"><figcaption>image-20250206173617486</figcaption></figure><p>从上到下，隔离级别越来越高，但是，事务隔离级别越高，数据越安全，但是性能越低。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/cce766a69dea725cd8f19b90db2d0430.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>串行化，相当于队列形式，一个一个来，一个事务没有提交，那另一个事务就不能操作。</p>`,26);function g(k,m){const n=i("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[s("a",d,[a("ACID"),t(n)])]),u])}const b=e(c,[["render",g],["__file","9.Transactions.html.vue"]]);export{b as default};
