import{_ as n,W as a,X as s,a2 as e}from"./framework-6a3aa88c.js";const t={},i=e(`<h3 id="string-是-java-基本数据类型吗-可以被继承吗" tabindex="-1"><a class="header-anchor" href="#string-是-java-基本数据类型吗-可以被继承吗" aria-hidden="true">#</a> String 是 Java 基本数据类型吗？可以被继承吗？</h3><p>不是，<code>String</code> 是一个类，属于引用数据类型。</p><h3 id="string-类可以继承吗" tabindex="-1"><a class="header-anchor" href="#string-类可以继承吗" aria-hidden="true">#</a> String 类可以继承吗？</h3><p>不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。</p><h3 id="string-有哪些常用方法" tabindex="-1"><a class="header-anchor" href="#string-有哪些常用方法" aria-hidden="true">#</a> String 有哪些常用方法？</h3><p>我自己常用的有：</p><ol><li><code>length()</code> - 返回字符串的长度。</li><li><code>charAt(int index)</code> - 返回指定位置的字符。</li><li><code>substring(int beginIndex, int endIndex)</code> - 返回字符串的一个子串，从 <code>beginIndex</code> 到 <code>endIndex-1</code>。</li><li><code>contains(CharSequence s)</code> - 检查字符串是否包含指定的字符序列。</li><li><code>equals(Object anotherObject)</code> - 比较两个字符串的内容是否相等。</li><li><code>indexOf(int ch)</code> 和 <code>indexOf(String str)</code> - 返回指定字符或字符串首次出现的位置。</li><li><code>replace(char oldChar, char newChar)</code> 和 <code>replace(CharSequence target, CharSequence replacement)</code> - 替换字符串中的字符或字符序列。</li><li><code>trim()</code> - 去除字符串两端的空白字符。</li><li><code>split(String regex)</code> - 根据给定正则表达式的匹配拆分此字符串。</li></ol><h3 id="string-和-stringbuilder、stringbuffer-的区别" tabindex="-1"><a class="header-anchor" href="#string-和-stringbuilder、stringbuffer-的区别" aria-hidden="true">#</a> String 和 StringBuilder、StringBuffer 的区别？</h3><p>String是不可变的，一旦创建就不能再原字符串上修改，你的后续修改操作（如拼接、替换等）实际上都会生成一个新的<code>String</code>对象,适用于少量的字符串修改操作；</p><p>Stringbuilder可以直接在原字符串上进行增删改；适用于单线程下频繁修改操作，性能更好；但是线程不安全的（<strong>推荐</strong>）；</p><p>StringBuffer 和 StringBuilder 类似，但每个方法上都加了 synchronized 关键字，所以是线程安全的（不常用）。</p><h3 id="string-s-new-string-abc-创建了几个对象" tabindex="-1"><a class="header-anchor" href="#string-s-new-string-abc-创建了几个对象" aria-hidden="true">#</a> String s = new String(&quot;abc&quot;)创建了几个对象？</h3><p>会创建 1 或 2 个字符串对象。</p><p>主要有两种情况：</p><ol><li>如果常量池中没有 <code>&quot;yupi&quot;</code>，则 <code>new String(&quot;yupi&quot;)</code> 会创建 <strong>2 个对象</strong>：一个在常量池中，一个在堆中。</li><li>如果常量池中已有 <code>&quot;yupi&quot;</code>，则只会在堆中创建 <strong>1 个新的字符串对象</strong>（其内容引用常量池中的 <code>&quot;yupi&quot;</code>）。</li></ol><p>可以看下这个图再理解一下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250209141019070.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>怎么拼接字符串：</p><ol><li><ul><li></li></ul></li><li><p><code>String.concat()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> qinyi <span class="token operator">=</span> <span class="token string">&quot;秦一&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> zuishuai <span class="token operator">=</span> <span class="token string">&quot;最帅&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>qinyi<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>zuishuai<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>StringBuilder</code>，<code>builder.append(&quot;Hello, &quot;); builder.append(&quot;World!&quot;);</code></p></li><li><p><code>String.format()</code></p></li><li><p><code>String.join()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> qinyi <span class="token operator">=</span> <span class="token string">&quot;秦一&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> zuishuai <span class="token operator">=</span> <span class="token string">&quot;最帅&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> cmower <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> qinyi<span class="token punctuation">,</span> zuishuai<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>StringUtil.join</code></p></li></ol>`,19),o=[i];function c(r,p){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","22.String.html.vue"]]);export{d as default};
