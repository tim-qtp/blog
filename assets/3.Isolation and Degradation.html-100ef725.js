import{_ as p,W as i,X as o,$ as n,a1 as a,Z as t,a2 as e,C as l}from"./framework-48328e23.js";const c={},r=e(`<p>限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。</p><p>而要将这些故障控制在一定范围，避免雪崩，就要靠<strong>线程隔离</strong>（舱壁模式）和<strong>熔断降级</strong>手段了。</p><p><strong>线程隔离</strong>之前讲到过：调用者在调用服务提供者时，给每个调用的请求分配独立线程池，出现故障时，最多消耗这个线程池内资源，避免把调用者的所有资源耗尽。（<mark>把故障隔离在业务2的线程内，服务B还能正常使用</mark>）</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552043.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>熔断降级</strong>：是在调用方这边加入断路器，统计对服务提供者的调用，如果调用的失败比例过高，则熔断该业务，不允许访问该服务的提供者了。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552041.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，不管是线程隔离还是熔断降级，都是对<strong>客户端</strong>（调用方）的保护。需要在<strong>调用方</strong> 发起远程调用时做线程隔离、或者服务熔断。</p><p>而我们的微服务远程调用都是基于Feign来完成的，因此我们需要将Feign与Sentinel整合，在Feign里面实现线程隔离和服务熔断。</p><h2 id="_1-feignclient整合sentinel" tabindex="-1"><a class="header-anchor" href="#_1-feignclient整合sentinel" aria-hidden="true">#</a> 1.FeignClient整合Sentinel</h2><p>SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端保护必须整合Feign和Sentinel。</p><h3 id="_1-1-修改配置-开启sentinel功能" tabindex="-1"><a class="header-anchor" href="#_1-1-修改配置-开启sentinel功能" aria-hidden="true">#</a> 1.1.修改配置，开启sentinel功能</h3><p>修改OrderService的application.yml文件，开启Feign的Sentinel功能：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启feign对sentinel的支持</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-编写失败降级逻辑" tabindex="-1"><a class="header-anchor" href="#_1-2-编写失败降级逻辑" aria-hidden="true">#</a> 1.2.编写失败降级逻辑</h3><p>业务失败后，不能直接报错，而应该返回用户一个友好提示或者默认结果，这个就是失败降级逻辑。</p><p>给FeignClient编写失败后的降级逻辑</p><p>①方式一：FallbackClass，无法对远程调用的异常做处理</p><p>②方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种</p><p>这里我们演示方式二的失败降级处理。</p><p><strong>步骤一</strong>：在feing-api项目中定义类，实现FallbackFactory：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552045.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>fallback</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>clients<span class="token punctuation">.</span></span><span class="token class-name">UserClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span></span><span class="token class-name">FallbackFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserClientFallbackFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserClient</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserClient</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建Jserclient接口实现类，实现其中的方法，编写失败降级的处理逻辑</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//记录异常信息</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户异常&quot;</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//根据业务需求返回默认的数据，这里是空用户</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤二</strong>：在feing-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">UserClientFallbackFactory</span> <span class="token function">userClientFallbackFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserClientFallbackFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤三</strong>：在feing-api项目中的UserClient接口中使用UserClientFallbackFactory：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>fallback<span class="token punctuation">.</span></span><span class="token class-name">UserClientFallbackFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userservice&quot;</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> <span class="token class-name">UserClientFallbackFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启后，访问一次订单查询业务，然后查看sentinel控制台，可以看到新的簇点链路：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552050.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-3-总结" tabindex="-1"><a class="header-anchor" href="#_1-3-总结" aria-hidden="true">#</a> 1.3.总结</h3><p>Sentinel支持的雪崩解决方案：</p><ul><li>线程隔离（仓壁模式）</li><li>降级熔断</li></ul><p>Feign整合Sentinel的步骤：</p><ul><li>在application.yml中配置：feign.sentienl.enable=true</li><li>给FeignClient编写FallbackFactory并注册为Bean</li><li>将FallbackFactory配置到FeignClient</li></ul><h2 id="_2-线程隔离-舱壁模式" tabindex="-1"><a class="header-anchor" href="#_2-线程隔离-舱壁模式" aria-hidden="true">#</a> 2.线程隔离（舱壁模式）</h2><h3 id="_2-1-线程隔离的实现方式" tabindex="-1"><a class="header-anchor" href="#_2-1-线程隔离的实现方式" aria-hidden="true">#</a> 2.1.线程隔离的实现方式</h3><p>线程隔离有两种方式实现：</p><ul><li><p>线程池隔离</p></li><li><p>信号量隔离（Sentinel默认采用）</p></li></ul><p>如图：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552046.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>线程池隔离</strong>：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</p><p><strong>信号量隔离</strong>：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求。</p><p>两者的优缺点：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552070.png" alt="image-20210716123240518" tabindex="0" loading="lazy"><figcaption>image-20210716123240518</figcaption></figure><h3 id="_2-2-sentinel的线程隔离" tabindex="-1"><a class="header-anchor" href="#_2-2-sentinel的线程隔离" aria-hidden="true">#</a> 2.2.sentinel的线程隔离</h3><p><strong>用法说明</strong>：</p><p>在添加限流规则时，可以选择两种阈值类型：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552629.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>QPS：就是每秒的请求数，在快速入门中已经演示过</p></li><li><p>线程数：是该资源能使用用的tomcat线程数的最大值。也就是通过限制线程数量，实现<strong>线程隔离</strong>（舱壁模式）。</p></li></ul><p><strong>案例需求</strong>：给 order-service服务中的UserClient的查询用户接口设置流控规则，线程数不能超过 2。然后利用jemeter测试。</p><h4 id="_1-配置隔离规则" tabindex="-1"><a class="header-anchor" href="#_1-配置隔离规则" aria-hidden="true">#</a> 1）配置隔离规则</h4><p>选择feign接口后面的流控按钮：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552709.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>填写表单：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552746.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-jmeter测试" tabindex="-1"><a class="header-anchor" href="#_2-jmeter测试" aria-hidden="true">#</a> 2）Jmeter测试</h4><p>选择---阈值类型-线程数&lt;2：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121643007.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一次发生10个请求，有较大概率并发线程数超过2，而超出的请求会走之前定义的失败降级逻辑。</p><p>查看运行结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121644365.png" alt="image-20250312164421288" tabindex="0" loading="lazy"><figcaption>image-20250312164421288</figcaption></figure><p>发现虽然结果都是通过了，不过部分请求得到的响应是降级返回的null信息。</p><h3 id="_2-3-总结" tabindex="-1"><a class="header-anchor" href="#_2-3-总结" aria-hidden="true">#</a> 2.3.总结</h3><p>线程隔离的两种手段是？</p><ul><li><p>信号量隔离</p></li><li><p>线程池隔离</p></li></ul><p>信号量隔离的特点是？</p><ul><li>基于计数器模式，简单，开销小</li></ul><p>线程池隔离的特点是？</p><ul><li>基于线程池模式，有额外开销，但隔离控制更强</li></ul><h2 id="_3-熔断降级" tabindex="-1"><a class="header-anchor" href="#_3-熔断降级" aria-hidden="true">#</a> 3.熔断降级</h2><p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p><p>断路器控制熔断和放行是通过状态机来完成的：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552843.png" alt="image-20210716130958518" tabindex="0" loading="lazy"><figcaption>image-20210716130958518</figcaption></figure><p>状态机包括三个状态：</p><ul><li>closed：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态</li><li>open：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态5秒后会进入half-open状态</li><li>half-open：半开状态，放行一次请求，根据执行结果来判断接下来的操作。 <ul><li>请求成功：则切换到closed状态</li><li>请求失败：则切换到open状态</li></ul></li></ul><p>断路器熔断策略有三种：慢调用、异常比例、异常数</p><h3 id="_3-1-慢调用" tabindex="-1"><a class="header-anchor" href="#_3-1-慢调用" aria-hidden="true">#</a> 3.1.慢调用</h3><p><strong>慢调用</strong>：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。</p><p>例如：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552065.png" alt="image-20210716145934347" tabindex="0" loading="lazy"><figcaption>image-20210716145934347</figcaption></figure><p>解读：RT超过500ms的调用是慢调用，统计最近10000ms内的请求，如果请求量超过10次，并且慢调用比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</p><p><strong>案例</strong></p><p>需求：给 UserClient的查询用户接口设置降级规则，慢调用的RT阈值为50ms，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5</p><h4 id="_1-设置慢调用" tabindex="-1"><a class="header-anchor" href="#_1-设置慢调用" aria-hidden="true">#</a> 1）设置慢调用</h4><p>修改user-service中的/user/{id}这个接口的业务。通过休眠模拟一个延迟时间：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552266.png" alt="image-20210716150234787" tabindex="0" loading="lazy"><figcaption>image-20210716150234787</figcaption></figure><p>此时，orderId=101的订单，关联的是id为1的用户，调用时长为60ms：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121659210.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>orderId=102的订单，关联的是id为2的用户，调用时长为非常短；</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121659333.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-设置熔断规则" tabindex="-1"><a class="header-anchor" href="#_2-设置熔断规则" aria-hidden="true">#</a> 2）设置熔断规则</h4><p>下面，给feign接口设置降级规则：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552796.png" alt="image-20210716150654094" tabindex="0" loading="lazy"><figcaption>image-20210716150654094</figcaption></figure><p>规则：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552823.png" alt="image-20210716150740434" tabindex="0" loading="lazy"><figcaption>image-20210716150740434</figcaption></figure><p>超过50ms的请求都会被认为是慢请求</p><h4 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3）测试</h4>`,97),u={href:"http://localhost:8088/order/101%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B05%E6%AC%A1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},d=n("figure",null,[n("img",{src:"https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121659985.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),g=n("p",null,"触发了熔断，请求时长缩短至5ms，快速失败了，并且走降级逻辑，返回的null",-1),k={href:"http://localhost:8088/order/102%EF%BC%8C%E7%AB%9F%E7%84%B6%E4%B9%9F%E8%A2%AB%E7%86%94%E6%96%AD%E4%BA%86%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},m=e('<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121703886.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-异常比例、异常数" tabindex="-1"><a class="header-anchor" href="#_3-2-异常比例、异常数" aria-hidden="true">#</a> 3.2.异常比例、异常数</h3><p><strong>异常比例或异常数</strong>：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。</p><p>例如，一个异常比例设置：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552342.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于0.4，则触发熔断。</p><p>一个异常数设置：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552426.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于2次，则触发熔断。</p><p><strong>案例</strong></p><p>需求：给 UserClient的查询用户接口设置降级规则，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5s</p><h4 id="_1-设置异常请求" tabindex="-1"><a class="header-anchor" href="#_1-设置异常请求" aria-hidden="true">#</a> 1）设置异常请求</h4><p>首先，修改user-service中的/user/{id}这个接口的业务。手动抛出异常，以触发异常比例的熔断：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121736187.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>也就是说，id 为 2时，就会触发异常</p><h4 id="_2-设置熔断规则-1" tabindex="-1"><a class="header-anchor" href="#_2-设置熔断规则-1" aria-hidden="true">#</a> 2）设置熔断规则</h4><p>下面，给feign接口设置降级规则：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552796.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>规则：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121552890.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在5次请求中，只要异常比例超过0.4，也就是有2次以上的异常，就会触发熔断。</p><h4 id="_3-测试-1" tabindex="-1"><a class="header-anchor" href="#_3-测试-1" aria-hidden="true">#</a> 3）测试</h4>',22),h={href:"http://localhost:8088/order/102%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B05%E6%AC%A1%EF%BC%8C%E8%A7%A6%E5%8F%91%E7%86%94%E6%96%AD%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},f=n("figure",null,[n("img",{src:"https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121733474.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),b=n("p",null,"此时，我们去访问本来应该正常的103：",-1),v=n("figure",null,[n("img",{src:"https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121909850.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function y(_,q){const s=l("ExternalLinkIcon");return i(),o("div",null,[r,n("p",null,[a("在浏览器访问："),n("a",u,[a("http://localhost:8088/order/101，快速刷新5次，可以发现："),t(s)])]),d,g,n("p",null,[a("在浏览器访问："),n("a",k,[a("http://localhost:8088/order/102，竟然也被熔断了："),t(s)])]),m,n("p",null,[a("在浏览器快速访问："),n("a",h,[a("http://localhost:8088/order/102，快速刷新5次，触发熔断："),t(s)])]),f,b,v])}const x=p(c,[["render",y],["__file","3.Isolation and Degradation.html.vue"]]);export{x as default};
