import{_ as n,W as s,X as a,a1 as e}from"./framework-4e10303a.js";const t={},o=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.xuecheng.content.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 新的分页插件
     * 需要设置 MybatisConfiguration#useDeprecatedExecutor = false
     * 避免缓存出现问题(该属性会在旧插件移除后一同移除)
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>作用</strong></p><ol><li><strong>自动扫描 Mapper 接口</strong><code>@MapperScan</code> 可以指定一个或多个包路径，Spring 会自动扫描这些包下的 Mapper 接口，并将它们注册为 Bean。</li><li><strong>简化配置</strong> 如果没有 <code>@MapperScan</code>，你需要为每个 Mapper 接口添加 <code>@Mapper</code> 注解。而使用 <code>@MapperScan</code> 后，可以一次性扫描整个包，避免手动为每个 Mapper 接口添加注解。</li><li><strong>与 Spring 集成</strong> 从而可以在 Service 层或其他组件中通过 <code>@Autowired</code> 注入使用。</li></ol><p><strong>分页插件的原理是什么</strong></p><p>MyBatis-Plus 的分页插件基于 MyBatis 的 <code>Interceptor</code>（拦截器）实现。它会拦截 sql语句，根据分页参数（如 <code>page</code> 和 <code>size</code>）对原始 SQL 进行改造，比如在 MySQL 中，会在 SQL 后面追加 <code>LIMIT</code> 和 <code>OFFSET</code></p><p>为了实现分页功能，插件会自动生成一条统计总记录数的 SQL（<code>SELECT COUNT(*) ...</code>）</p><p>查询完成后，分页插件会将数据封装到 <code>IPage</code> 接口的实现类中（如 <code>Page</code> 对象），方便开发者直接使用。</p><p><strong>自动生成的 SQL</strong></p><p>在执行 <code>selectPage</code> 时，分页插件会改造 SQL：</p><ol><li><p><strong>统计总记录数：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>分页查询：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">LIMIT</span> <span class="token number">2</span> <span class="token keyword">OFFSET</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,10),p=[o];function c(i,l){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","2.Mybatis-Plus paging plugin configuration.html.vue"]]);export{u as default};
