import{_ as a,W as n,X as s,a1 as e}from"./framework-4e10303a.js";const t={},l=e(`<h3 id="_1-tablefield" tabindex="-1"><a class="header-anchor" href="#_1-tablefield" aria-hidden="true">#</a> 1. @TableField</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createDate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT_UPDATE</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> changeDate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@TableField(fill = FieldFill.INSERT)</code>：表示 <code>createDate</code> 字段在插入（<code>INSERT</code>）时会自动填充。也就是说，当执行插入操作时，MyBatis-Plus 会自动填充该字段的值，通常是当前的时间（<code>LocalDateTime.now()</code>），而不需要手动设置这个字段的值。</p><p><code>@TableField(fill = FieldFill.INSERT_UPDATE)</code>：表示在插入和更新时都填充。</p><h3 id="_2-mybatis-plus主键返回" tabindex="-1"><a class="header-anchor" href="#_2-mybatis-plus主键返回" aria-hidden="true">#</a> 2.MyBatis-Plus主键返回</h3><p>代码中有一段这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> insert <span class="token operator">=</span> courseBaseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>courseBaseNew<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span> courseId <span class="token operator">=</span> courseBaseNew<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>刚插进去就可以获取到id，这是因为专门在实体类的主键字段上使用了 <code>@TableId</code> 注解来指定主键策略。</p><ul><li>如果你的表主键是自增的（如 MySQL 的 <code>AUTO_INCREMENT</code>），MyBatis-Plus 会自动将生成的主键值回填到实体类的主键字段中。</li><li>如果你的主键策略是其他类型（如 UUID、雪花算法等），MyBatis-Plus 也会自动处理<mark>主键生成</mark>和<mark>回填</mark>。</li></ul><h3 id="_3-系统如何处理异常" tabindex="-1"><a class="header-anchor" href="#_3-系统如何处理异常" aria-hidden="true">#</a> 3. 系统如何处理异常？</h3><p>我们自定义一个统一的异常处理器去捕获并处理异常。 使用控制器增加注解<code>@ControllerAdvice</code>和异常处理注解<code>@ExceptionHandler</code>来实现。</p><ul><li>处理自定义异常 程序在编写代码时根据校验结果主动抛出自定义异常类对象，抛出异常时指定详细的异常信息，异常处理器捕获异 常信息记录异常日志并响应给用户。</li><li>处理未知异常 接口执行过程中的一些运行时异常也会由异常处理器统一捕获，记录异常日志，统一响应给用户500错误。 在异常处理器中还可以针对某个异常类型进行单独处理。</li></ul>`,12),c=[l];function o(i,p){return n(),s("div",null,c)}const r=a(t,[["render",o],["__file","Sporadic knowledge points.html.vue"]]);export{r as default};
