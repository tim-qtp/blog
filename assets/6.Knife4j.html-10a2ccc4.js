import{_ as t,W as p,X as e,$ as s,a1 as n,Z as o,a2 as l,C as c}from"./framework-48328e23.js";const i={},u=l(`<p>Knife4j完全遵循了Swagger的使用方式，所以可以无缝切换。</p><p>第一步，在pom.Xml文件中添加Knife4的依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-openapi2-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>$knife4j.version]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不需要再引入 Swagger 所需的 springfox-boot-starter了，因为 Knife4j 的 starter 里面已经加入过了。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/image-20250208171441496.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第二步，创建一个 Java 配置类（例如 Knife4jConfig.java），并使用 <code>@EnableKnife4j</code> 注解启用 Knife4j。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableOpenApi</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Docket</span> docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">OAS_30</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//apis： 添加swagger接口提取范围</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">&quot;www.xxx.controller&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;技术接口文档&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;采用主流的互联网技术架构、全新的UI设计&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">&quot;qtp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://tim-qtp.github.io/blog&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;linkstim23@gmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;v1.0&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者你也可以不创建 Java 配置类，通过在 application.yml 文件中设置属性来达到相同的目的。</p><p>这里是技术派中配置 Knife4j 的示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">knife4j</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">openapi</span><span class="token punctuation">:</span>
    <span class="token key atrule">title</span><span class="token punctuation">:</span> 技术接口文档
    <span class="token key atrule">description</span><span class="token punctuation">:</span> 采用主流的互联网技术架构、全新的UI设计
    <span class="token key atrule">version</span><span class="token punctuation">:</span> 1.0.0
    <span class="token key atrule">concat</span><span class="token punctuation">:</span> qtp
    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//tim<span class="token punctuation">-</span>qtp.github.io/blog
    <span class="token key atrule">license</span><span class="token punctuation">:</span> Apache License 2.0
    <span class="token key atrule">license-url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//stackoverflow.com/
    <span class="token key atrule">email</span><span class="token punctuation">:</span> linkstim23@gmail.com
    <span class="token key atrule">group</span><span class="token punctuation">:</span>
      <span class="token key atrule">admin</span><span class="token punctuation">:</span>
        <span class="token key atrule">group-name</span><span class="token punctuation">:</span> 后台接口分组
        <span class="token key atrule">api-rule</span><span class="token punctuation">:</span> package
        <span class="token key atrule">api-rule-resources</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> com.github.qtp.forum.web.admin
      <span class="token key atrule">front</span><span class="token punctuation">:</span>
        <span class="token key atrule">group-name</span><span class="token punctuation">:</span> 前台接口分组
        <span class="token key atrule">api-rule</span><span class="token punctuation">:</span> package
        <span class="token key atrule">api-rule-resources</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> com.github.qtp.forum.web.front
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以前的版本中，我们需要在配置文件中手动使用 @EnableKnife4j 来使用增强，自 2.0.6 版本后，只需要在配置文件中配置 knife4j.enable=true 即可。</p><p>逐一解释下这些属性的作用：</p><p>①、knife4j.enable: 设置为 true 以启用 Knife4j，将在应用程序中启用 Knife4j UI。</p><p>②、knife4j.openapi: 这个属性包含了 Swagger API 文档的基本元数据信息，例如标题、描述、版本等。</p><ul><li>title: API 文档的标题。</li><li>description: API 文档的详细描述。</li><li>version: API 文档的版本号。</li><li>concat: API 文档的作者信息。</li><li>license: API 文档的许可证类型。</li><li>license-url: API 文档许可证的链接。</li><li>email: API 文档作者的联系邮箱。</li></ul><p>③、knife4j.group: 定义 API 分组。这里有两个分组：admin 和 front。</p><p>admin: 后台接口分组。</p><ul><li>group-name: 分组名称。</li><li>api-rule: 分组规则，这里使用的是包规则。</li><li>api-rule-resources: 指定包名，Knife4j 将扫描此包下的所有 API 接口并将它们添加到此分组。</li></ul><p>第三步，在测试类中添加 knife4j 的接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;测试 Knife4j&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">&quot;/testKnife4j&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testKnife4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;秦一又帅又丑&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①、@ApiOperation：用于描述一个具体的 API 操作。通常用于标注在 Controller 类的方法上。它有以下三个主要属性：</p><ul><li>value：API 操作的简短描述，会显示在 API 文档中。</li><li>notes：API 操作的详细描述</li><li>tags：API 操作的标签，用于对 API 进行分类和分组。</li></ul><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;获取用户信息&quot;</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">&quot;根据用户 ID 获取用户详细信息&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②、@ApiParam：用于描述 API 操作的参数。通常用于标注在 Controller 类的方法参数上。它有以下主要属性：</p><ul><li>name：参数名称。</li><li>value：参数描述。</li><li>required：指示参数是否是必需的，默认为 false。</li><li>defaultValue：参数的默认值。</li><li>allowableValues：允许的参数值范围。</li></ul><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;用户 ID&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③、@ApiModel：用于描述一个 API 操作返回的数据模型或请求数据模型。通常用于标注在实体类或 DTO 类上。它有以下主要属性：</p><ul><li>value：模型名称。</li><li>description：模型描述。</li></ul><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;用户&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;用户详细信息&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),k={href:"http://localhost:8080/doc.html",target:"_blank",rel:"noopener noreferrer"};function r(d,v){const a=c("ExternalLinkIcon");return p(),e("div",null,[u,s("p",null,[n("第四步，运行项目，然后在浏览器地址栏输入 "),s("a",k,[n("http://localhost:8080/doc.html"),o(a)]),n(" 就可以看到 API 文档了。")])])}const g=t(i,[["render",r],["__file","6.Knife4j.html.vue"]]);export{g as default};
