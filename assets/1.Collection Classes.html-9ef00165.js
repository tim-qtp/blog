import{_ as e,W as a,X as i,a2 as l}from"./framework-48328e23.js";const t={},r=l('<p>前者是存储对象的集合类，后者存储的是键值对（key-value）。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503172214020.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Collection 接口下又分为 List、Set 和 Queue 接口。每个接口有其具体实现类。以下是主要的集合类：</p><h4 id="list-接口" tabindex="-1"><a class="header-anchor" href="#list-接口" aria-hidden="true">#</a> List 接口：</h4><ul><li>ArrayList：基于动态数组，查询速度快，插入、删除慢。</li><li>LinkedList：基于双向链表，插入、删除快，查询速度慢。</li><li>Vector：线程安全的动态数组，类似于 ArrayList，但开销较大。</li></ul><h4 id="set-接口" tabindex="-1"><a class="header-anchor" href="#set-接口" aria-hidden="true">#</a> Set 接口：</h4><ul><li>HashSet：基于哈希表，元素无序，不允许重复。</li><li>LinkedHashSet：基于链表和哈希表，维护插入顺序，不允许重复。</li><li>TreeSet：基于红黑树，元素有序，不允许重复。</li></ul><p>所以网上有些说 Set 是无序集合非常不准确，因为需要看具体的实现类。</p><h4 id="queue-接口" tabindex="-1"><a class="header-anchor" href="#queue-接口" aria-hidden="true">#</a> Queue 接口：</h4><ul><li>PriorityQueue：基于优先级堆，元素按照自然顺序或指定比较器排序。</li><li>LinkedList：可以作为队列使用，支持 FIFO（先进先出）操作。</li></ul><h4 id="map-接口" tabindex="-1"><a class="header-anchor" href="#map-接口" aria-hidden="true">#</a> Map 接口：</h4><p>存储的是键值对，也就是给对象（value）设置了一个 key，这样通过 key 可以找到那个 value。</p><ul><li>HashMap：基于哈希表，键值对无序，不允许键重复。</li><li>LinkedHashMap：基于链表和哈希表，<mark>维护插入顺序</mark>，不允许键重复。</li><li>TreeMap：基于红黑树，<mark>键值对有序</mark>，不允许键重复。</li><li>Hashtable：线程安全的哈希表，不允许键或值为 null。</li><li>ConcurrentHashMap：线程安全的哈希表，适合高并发环境，不允许键或值为 null。</li></ul>',13),s=[r];function n(h,u){return a(),i("div",null,s)}const o=e(t,[["render",n],["__file","1.Collection Classes.html.vue"]]);export{o as default};
