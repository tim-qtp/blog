import{_ as n,W as s,X as a,a2 as e}from"./framework-6a3aa88c.js";const t={},p=e(`<h2 id="_1-spring-事务" tabindex="-1"><a class="header-anchor" href="#_1-spring-事务" aria-hidden="true">#</a> 1.Spring 事务</h2><h3 id="spring-事务的核心注解" tabindex="-1"><a class="header-anchor" href="#spring-事务的核心注解" aria-hidden="true">#</a> Spring 事务的核心注解</h3><p><strong>（1）@Transactional</strong></p><p>Spring 通过 <code>@Transactional</code> 来管理事务。</p><ul><li>通过 AOP（面向切面编程）机制，拦截带有 <code>@Transactional</code> 的方法。</li><li>在方法执行前开启事务，执行成功后提交事务，执行失败后回滚事务。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferMoney</span><span class="token punctuation">(</span><span class="token class-name">String</span> fromUser<span class="token punctuation">,</span> <span class="token class-name">String</span> toUser<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从fromUser账户扣除金额</span>
    accountDao<span class="token punctuation">.</span><span class="token function">debit</span><span class="token punctuation">(</span>fromUser<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 向toUser账户增加金额</span>
    accountDao<span class="token punctuation">.</span><span class="token function">credit</span><span class="token punctuation">(</span>toUser<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>（2）@EnableTransactionManagement</strong></p><ul><li>启用 Spring 事务管理功能。</li><li>一般在配置类或启动类中使用：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-spring-事务的传播机制" tabindex="-1"><a class="header-anchor" href="#_2-spring-事务的传播机制" aria-hidden="true">#</a> 2.Spring 事务的传播机制</h2><p>从源码来看，一共有 7 种事务传播行为：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503141133719.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>REQUIRED：如果当前有事务，就加入；如果没有，就新建一个事务。</p><p>REQUIRES_NEW：不管当前有没有事务，都新建一个事务。如果当前有事务，就把当前事务挂起。</p><blockquote><p>如果 <code>methodA</code> 调用 <code>methodB</code>，即使 <code>methodA</code> 已经在一个事务中，<code>methodB</code> 也会开启一个新事务，并且 <code>methodA</code> 的事务会被挂起，等 <code>methodB</code> 的事务完成后，<code>methodA</code> 的事务再继续。</p></blockquote><p>SUPPORTS：如果当前有事务，就加入；如果没有，就以非事务方式执行。</p><p>NOT_SUPPORTED：以非事务方式执行，如果当前有事务，就挂起。</p><p>MANDATORY：必须在一个已有的事务中执行，否则抛出异常。</p><p>NEVER：不能在事务中执行，否则抛出异常。</p><p>NESTED：有事务就开嵌套事务，没有就新建。</p><h2 id="_3-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-应用场景" aria-hidden="true">#</a> 3.应用场景</h2><p><strong>REQUIRED</strong>：</p><ul><li>应用场景：常见的业务逻辑调用。比如，在订单创建时调用库存减少的方法，它们都应该共享同一个事务。</li><li>优点：事务复用，性能开销较小，适用于大多数业务逻辑。</li></ul><p><strong>REQUIRES_NEW</strong>：</p><ul><li>应用场景：日志记录、通知服务等。即使主事务失败，独立事务的操作也应该成功执行。</li><li>优点：事务隔离，防止主要事务的失败影响到辅助操作。</li></ul><p><strong>SUPPORTS</strong>：</p><ul><li>应用场景：可选的事务支持。比如，某个方法可以在事务外部或内部执行。</li><li>优点：灵活处理事务的加入或不加入。</li></ul><p><strong>NOT_SUPPORTED</strong>：</p><ul><li>应用场景：需要明确禁止事务的场景，比如读取配置信息、不需要事务控制的数据查询。</li><li>优点：避免不必要的事务开销。</li></ul><p><strong>MANDATORY</strong>：</p><ul><li>应用场景：必须在现有事务中执行的场景。常用于确保方法调用链的一致性。</li><li>缺点：强依赖外部事务，如果没有事务，则会失败。</li></ul><p><strong>NEVER</strong>：</p><ul><li>应用场景：需要保证绝对没有事务的场景，比如某些不允许在事务中执行的数据库操作。</li><li>缺点：与 <code>MANDATORY</code> 相反，依赖于没有事务的环境。</li></ul><p><strong>NESTED</strong>：</p><ul><li>应用场景：需要部分回滚或局部事务的业务逻辑。比如，订单中的部分操作可能会失败，但不希望整个订单回滚。</li><li>优点：灵活处理子事务，局部回滚而不影响整体事务。</li></ul><h2 id="_4-事务传播行为使用示例" tabindex="-1"><a class="header-anchor" href="#_4-事务传播行为使用示例" aria-hidden="true">#</a> 4.事务传播行为使用示例</h2><h3 id="required-默认行为" tabindex="-1"><a class="header-anchor" href="#required-默认行为" aria-hidden="true">#</a> <strong>REQUIRED（默认行为）</strong></h3><p><code>REQUIRED</code> 是 Spring 的默认事务传播行为，意味着方法会加入现有事务中，如果没有事务就创建一个新事务。通常用于大多数业务逻辑中，确保整个业务过程处于同一个事务中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">InventoryService</span> inventoryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 保存订单</span>
        <span class="token function">saveOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 调用库存减少操作，使用同一个事务</span>
        inventoryService<span class="token punctuation">.</span><span class="token function">reduceInventory</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 保存订单逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InventoryService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduceInventory</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 减少库存的逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>OrderService</code> 和 <code>InventoryService</code> 使用了 <code>REQUIRED</code>，意味着 <code>reduceInventory()</code> 方法和 <code>placeOrder()</code> 方法运行在同一个事务中。如果其中一个方法抛出异常，整个事务都会回滚。</p><h3 id="requires-new" tabindex="-1"><a class="header-anchor" href="#requires-new" aria-hidden="true">#</a> <strong>REQUIRES_NEW</strong></h3><p><code>REQUIRES_NEW</code> 强制启动一个新事务，无论是否存在当前事务。如果有现有事务，它将被挂起，直到新事务完成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">LogService</span> logService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processPayment</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行支付逻辑</span>
        <span class="token function">process</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 记录日志，独立事务</span>
        logService<span class="token punctuation">.</span><span class="token function">logPayment</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 支付处理逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logPayment</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 记录支付日志逻辑，使用独立事务</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>PaymentService</code> 的 <code>processPayment()</code> 和 <code>LogService</code> 的 <code>logPayment()</code> 在不同的事务中执行。如果 <code>processPayment()</code> 方法抛出异常，<code>logPayment()</code> 仍然会提交，因为它运行在独立的事务中。</p><h3 id="supports" tabindex="-1"><a class="header-anchor" href="#supports" aria-hidden="true">#</a> <strong>SUPPORTS</strong></h3><p><code>SUPPORTS</code> 表示方法可以支持事务，但不强制要求。如果当前有事务，它将在事务中执行；如果没有事务，它将以非事务方式执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferFunds</span><span class="token punctuation">(</span><span class="token class-name">Account</span> fromAccount<span class="token punctuation">,</span> <span class="token class-name">Account</span> toAccount<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 转账逻辑</span>
        <span class="token function">withdraw</span><span class="token punctuation">(</span>fromAccount<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">deposit</span><span class="token punctuation">(</span>toAccount<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">SUPPORTS</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取余额，如果存在事务，则在事务中执行；否则无事务执行</span>
        <span class="token keyword">return</span> account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">Account</span> fromAccount<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 扣款逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token class-name">Account</span> toAccount<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 存款逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getBalance()</code> 方法可以在事务内或非事务中执行。如果 <code>transferFunds()</code> 调用了 <code>getBalance()</code>，它将在 <code>REQUIRED</code> 事务中执行；否则，它以非事务方式执行。</p><h3 id="not-supported" tabindex="-1"><a class="header-anchor" href="#not-supported" aria-hidden="true">#</a> <strong>NOT_SUPPORTED</strong></h3><p><code>NOT_SUPPORTED</code> 表示该方法不支持事务，如果当前有事务，它将挂起该事务，并在非事务环境中执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReportService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generateMonthlyReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成月度报告，支持事务</span>
        <span class="token function">generateReportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 发送报告邮件，无事务</span>
        <span class="token function">sendReportEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">generateReportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成报告数据逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">NOT_SUPPORTED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendReportEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送邮件逻辑，挂起现有事务</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>generateMonthlyReport()</code> 方法中的 <code>generateReportData()</code> 运行在事务中，而 <code>sendReportEmail()</code> 运行在非事务环境中，即使 <code>generateMonthlyReport()</code> 已经有事务，它也会挂起现有事务。</p><h3 id="mandatory" tabindex="-1"><a class="header-anchor" href="#mandatory" aria-hidden="true">#</a> <strong>MANDATORY</strong></h3><p><code>MANDATORY</code> 表示该方法必须在已有事务中运行，如果没有现有事务则抛出异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionalService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行主要操作</span>
        <span class="token function">performSecondaryAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">MANDATORY</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performSecondaryAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 必须在事务内执行</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>performSecondaryAction()</code> 必须在一个事务中运行。如果它被独立调用而没有事务，则抛出异常。如果 <code>performAction()</code> 方法已经启动了一个事务，那么 <code>performSecondaryAction()</code> 可以正常运行。</p><h3 id="never" tabindex="-1"><a class="header-anchor" href="#never" aria-hidden="true">#</a> <strong>NEVER</strong></h3><p><code>NEVER</code> 表示该方法不允许在事务中运行，如果当前存在事务，则抛出异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionFreeService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">NEVER</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeWithoutTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行逻辑，不能在事务中执行</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在事务上下文中调用 <code>executeWithoutTransaction()</code> 方法，会抛出异常，因为它要求不在任何事务中执行。</p><h3 id="nested" tabindex="-1"><a class="header-anchor" href="#nested" aria-hidden="true">#</a> <strong>NESTED</strong></h3><p><code>NESTED</code> 表示如果当前存在事务，则在该事务中创建一个嵌套事务（支持保存点），子事务可以独立回滚而不影响主事务。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NestedTransactionService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mainOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行主操作</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">nestedOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 嵌套事务回滚，不影响主事务</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">NESTED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nestedOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 嵌套事务操作</span>
        <span class="token comment">// 可以在这里回滚嵌套事务</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;嵌套事务回滚&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>mainOperation()</code> 是主事务，而 <code>nestedOperation()</code> 是嵌套事务。如果 <code>nestedOperation()</code> 失败，它只会回滚嵌套事务，主事务 <code>mainOperation()</code> 不会受影响。</p><h2 id="_5-事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_5-事务的隔离级别" aria-hidden="true">#</a> 5.事务的隔离级别</h2><p>①、DEFAULT：使用数据库默认的隔离级别（你们爱咋咋滴 😁），MySQL 默认的是可重复读，Oracle 默认的读已提交。</p><p>②、READ_UNCOMMITTED：读未提交，允许事务读取未被其他事务提交的更改。这是隔离级别最低的设置，可能会导致“脏读”问题。</p><p>③、READ_COMMITTED：读已提交，确保事务只能读取已经被其他事务提交的更改。这可以防止“脏读”，但仍然可能发生“不可重复读”和“幻读”问题。</p><p>④、REPEATABLE_READ：可重复读，确保事务可以多次从一个字段中读取相同的值，即在这个事务内，其他事务无法更改这个字段，从而避免了“不可重复读”，但仍可能发生“幻读”问题。</p><p>⑤、SERIALIZABLE：<span style="color:MediumPurple;">串行化，这是最高的隔离级别</span>，它完全隔离了事务，确保事务序列化执行，以此来避免“脏读”、“不可重复读”和“幻读”问题，但性能影响也最大。</p><p>它们定义在 TransactionDefinition 接口中。</p><h3 id="隔离级别与脏读、不可重复读、幻读表格汇总" tabindex="-1"><a class="header-anchor" href="#隔离级别与脏读、不可重复读、幻读表格汇总" aria-hidden="true">#</a> 隔离级别与脏读、不可重复读、幻读表格汇总</h3><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ_UNCOMMITTED</td><td>是</td><td>是</td><td>是</td></tr><tr><td>READ_COMMITTED</td><td>否</td><td>是</td><td>是</td></tr><tr><td>REPEATABLE_READ</td><td>否</td><td>否</td><td>是</td></tr><tr><td>SERIALIZABLE</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>在 Spring 中，使用 <code>@Transactional</code> 注解可以方便地设置事务的隔离级别。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">REPEATABLE_READ</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 事务逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选择隔离级别需要根据应用的具体需求进行权衡" tabindex="-1"><a class="header-anchor" href="#选择隔离级别需要根据应用的具体需求进行权衡" aria-hidden="true">#</a> 选择隔离级别需要根据应用的具体需求进行权衡：</h3><ul><li><strong>低隔离级别（READ_UNCOMMITTED 和 READ_COMMITTED）</strong>：性能高，但可能存在并发问题，适合数据一致性要求不高的场景。</li><li><strong>高隔离级别（REPEATABLE_READ 和 SERIALIZABLE）</strong>：数据一致性强，但性能较差，适合高数据一致性要求的场景。</li></ul>`,78),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","12.Spring Transactions.html.vue"]]);export{d as default};
