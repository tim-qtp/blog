const t=JSON.parse('{"key":"v-fa41355e","path":"/framework/spring/4.BeanFactory.html","title":"BeanFactory","lang":"zh-CN","frontmatter":{"order":4,"author":null,"title":"BeanFactory","category":["Spring","框架"],"description":"都是容器，只不过ApplicationContext继承了BeanFactory； BeanFactory是所有Spring Bean容器的顶级接口，它为Spring的容器定义了一套规范，并提供像getBean这样的方法从容器中获取指定的Bean。BeanFactory采用懒加载策略，即只有在第一次调用getBean()方法时，才会实例化相应的Bean...","head":[["meta",{"property":"og:url","content":"https://tim-qtp.github.io/blog/blog/framework/spring/4.BeanFactory.html"}],["meta",{"property":"og:site_name","content":"Qtp"}],["meta",{"property":"og:title","content":"BeanFactory"}],["meta",{"property":"og:description","content":"都是容器，只不过ApplicationContext继承了BeanFactory； BeanFactory是所有Spring Bean容器的顶级接口，它为Spring的容器定义了一套规范，并提供像getBean这样的方法从容器中获取指定的Bean。BeanFactory采用懒加载策略，即只有在第一次调用getBean()方法时，才会实例化相应的Bean..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-07T16:51:14.000Z"}],["meta",{"property":"article:author","content":"tim-qtp"}],["meta",{"property":"article:modified_time","content":"2025-03-07T16:51:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BeanFactory\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-07T16:51:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"tim-qtp\\",\\"url\\":\\"https://github.com/tim-qtp/\\"}]}"]]},"headers":[],"git":{"createdTime":1741366274000,"updatedTime":1741366274000,"contributors":[{"name":"tim-qtp","email":"2469100031@qq.com","commits":1}]},"readingTime":{"minutes":0.6,"words":180},"filePathRelative":"framework/spring/4.BeanFactory.md","localizedDate":"2025年3月7日","autoDesc":true,"excerpt":""}');export{t as data};
