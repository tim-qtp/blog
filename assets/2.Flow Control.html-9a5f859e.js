import{_ as s,W as i,X as p,$ as a,a1 as n,a2 as t}from"./framework-48328e23.js";const e={},o=a("h2",{id:"簇点链路",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#簇点链路","aria-hidden":"true"},"#"),n(" 簇点链路")],-1),c=a("p",null,[n("当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，这样的一个调用链就叫做"),a("strong",null,"簇点链路"),n("。簇点链路中被监控的每一个接口就是一个"),a("strong",null,"资源"),n("。")],-1),r=a("p",null,"说白了，就是controller。",-1),l=a("p",{orderId:""},"例如，我们刚才访问的order-service中的OrderController中的端点：/order/",-1),g=t(`<figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121318918.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：</p><ul><li>流控：流量控制</li><li>降级：降级熔断</li><li>热点：热点参数限流，是限流的一种</li><li>授权：请求的权限控制</li></ul><h2 id="_1-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-快速入门" aria-hidden="true">#</a> 1.快速入门</h2><h3 id="_1-示例" tabindex="-1"><a class="header-anchor" href="#_1-示例" aria-hidden="true">#</a> 1.示例</h3><p>点击资源/order/{orderId}后面的流控按钮，就可以弹出表单。</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317234.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>表单中可以填写限流规则，如下：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317244.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其含义是限制 /order/{orderId}这个资源的单机QPS为1，即每秒只允许1次请求，超出的请求会被拦截并报错。</p><h3 id="_1-2-练习" tabindex="-1"><a class="header-anchor" href="#_1-2-练习" aria-hidden="true">#</a> 1.2.练习：</h3><p>需求：给 /order/{orderId}这个资源设置流控规则，QPS不能超过 5，然后测试。</p><p>1）首先在sentinel控制台添加限流规则</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317242.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2）利用jmeter测试</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317869.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>20个用户，2秒内运行完，QPS是10，超过了5.</p><p>选中<code>流控入门，QPS&lt;5</code>右键运行：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121325052.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>注意，不要点击菜单中的执行按钮来运行。</p></blockquote><p>结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121330240.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，成功的请求每次只有5个</p><h2 id="_2-流控模式" tabindex="-1"><a class="header-anchor" href="#_2-流控模式" aria-hidden="true">#</a> 2.流控模式</h2><p>在添加限流规则时，点击高级选项，可以选择三种<strong>流控模式</strong>：</p><ul><li>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</li><li>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</li></ul><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317976.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>快速入门测试的就是直接模式。</p><h3 id="_2-1-关联模式" tabindex="-1"><a class="header-anchor" href="#_2-1-关联模式" aria-hidden="true">#</a> 2.1.关联模式</h3><p><strong>配置规则</strong>：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317010.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>语法说明</strong>：当/write资源访问量触发阈值时，就会对/read资源限流，避免影响/write资源。</p><p><strong>使用场景</strong>：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p><p><strong>需求说明</strong>：</p><ul><li><p>在OrderController新建两个端点：/order/query和/order/update，无需实现业务</p></li><li><p>配置流控规则，当/order/ update资源被访问的QPS超过5时，对/order/query请求限流</p></li></ul><p>1）定义/order/query端点，模拟订单查询</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/query&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;查询订单成功&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）定义/order/update端点，模拟订单更新</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;更新订单成功&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启服务，查看sentinel控制台的簇点链路：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317045.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3）配置流控规则</p><p>对哪个端点限流，就点击哪个端点后面的按钮。我们是对订单查询/order/query限流，因此点击它后面的按钮：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317277.png" alt="image-20210716101934499" tabindex="0" loading="lazy"><figcaption>image-20210716101934499</figcaption></figure><p>在表单中填写流控规则：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121343645.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>4）在Jmeter测试</p><p>选择---流控模式-关联：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317506.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到1000个用户，100秒，因此QPS为10，超过了我们设定的阈值：5</p><p>查看http请求：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317545.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请求的目标是/order/update，这样这个断点就会触发阈值。</p><p>但限流的目标是/order/query，我们在浏览器访问，可以发现：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121345857.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>确实被限流了。</p><p>5）总结</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317615.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-链路模式" tabindex="-1"><a class="header-anchor" href="#_2-2-链路模式" aria-hidden="true">#</a> 2.2.链路模式</h3><p><strong>链路模式</strong>：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。</p><p><strong>配置示例</strong>：</p><p>例如有两条请求链路：</p><ul><li><p>/test1 --&gt; /common</p></li><li><p>/test2 --&gt; /common</p></li></ul><p>如果只希望统计从/test2进入到/common的请求，则可以这样配置：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317057.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>实战案例</strong></p><p>需求：有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。</p><p>步骤：</p><ol><li><p>在OrderService中添加一个queryGoods方法，不用实现业务</p></li><li><p>在OrderController中，改造/order/query端点，调用OrderService中的queryGoods方法</p></li><li><p>在OrderController中添加一个/order/save的端点，调用OrderService的queryGoods方法</p></li><li><p>给queryGoods设置限流规则，从/order/query进入queryGoods的方法限制QPS必须小于2</p></li></ol><p>实现：</p><h4 id="_1-添加查询商品方法" tabindex="-1"><a class="header-anchor" href="#_1-添加查询商品方法" aria-hidden="true">#</a> 1）添加查询商品方法</h4><p>在order-service服务中，给OrderService类添加一个queryGoods方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询商品&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-查询订单时-查询商品" tabindex="-1"><a class="header-anchor" href="#_2-查询订单时-查询商品" aria-hidden="true">#</a> 2）查询订单时，查询商品</h4><p>在order-service的OrderController中，修改/order/query端点的业务逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/query&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询商品</span>
    orderService<span class="token punctuation">.</span><span class="token function">queryGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查询订单</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询订单&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;查询订单成功&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-新增订单-查询商品" tabindex="-1"><a class="header-anchor" href="#_3-新增订单-查询商品" aria-hidden="true">#</a> 3）新增订单，查询商品</h4><p>在order-service的OrderController中，修改/order/save端点，模拟新增订单：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询商品</span>
    orderService<span class="token punctuation">.</span><span class="token function">queryGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查询订单</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;新增订单&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;新增订单成功&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-给查询商品添加资源标记" tabindex="-1"><a class="header-anchor" href="#_4-给查询商品添加资源标记" aria-hidden="true">#</a> 4）给查询商品添加资源标记</h4><p>默认情况下，OrderService中的方法是不被Sentinel监控的，需要我们自己通过注解来标记要监控的方法。</p><p>给OrderService的queryGoods方法添加@SentinelResource注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span><span class="token string">&quot;goods&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询商品&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会</p><p>导致链路模式失效。</p><p>我们需要关闭这种对SpringMVC的资源聚合，修改order-service服务的application.yml文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">web-context-unify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 关闭context整合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启服务，访问/order/query和/order/save，可以查看到sentinel的簇点链路规则中，出现了新的资源：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317094.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-添加流控规则" tabindex="-1"><a class="header-anchor" href="#_5-添加流控规则" aria-hidden="true">#</a> 5）添加流控规则</h4><p>随便点击一个goods资源后面的流控按钮，在弹出的表单中填写下面信息：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317135.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>只统计从/order/query进入/goods的资源，QPS阈值为2，超出则被限流。</p><h4 id="_6-jmeter测试" tabindex="-1"><a class="header-anchor" href="#_6-jmeter测试" aria-hidden="true">#</a> 6）Jmeter测试</h4><p>选择《流控模式-链路》：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317168.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到这里200个用户，50秒内发完，QPS为4，超过了我们设定的阈值2</p><p>一个http请求是访问/order/save：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317202.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>运行的结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121400208.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>完全不受影响。</p><p>另一个是访问/order/query：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121401335.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每次只有2个通过。</p><h3 id="_2-3-总结" tabindex="-1"><a class="header-anchor" href="#_2-3-总结" aria-hidden="true">#</a> 2.3.总结</h3><p>流控模式有哪些？</p><ul><li><p>直接：对当前资源限流</p></li><li><p>关联：高优先级资源触发阈值，对低优先级资源限流。</p></li><li><p>链路：阈值统计时，只统计从指定资源进入当前资源的请求，是对请求来源的限流</p></li></ul><h2 id="_3-流控效果" tabindex="-1"><a class="header-anchor" href="#_3-流控效果" aria-hidden="true">#</a> 3.流控效果</h2><p>在流控的高级选项中，还有一个流控效果选项：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317643.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p><ul><li><p>快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。</p></li><li><p>warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。</p></li><li><p>排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长</p></li></ul><h3 id="_3-1-warm-up" tabindex="-1"><a class="header-anchor" href="#_3-1-warm-up" aria-hidden="true">#</a> 3.1.warm up</h3><p>阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。</p><p>warm up也叫<strong>预热模式</strong>，是应对服务冷启动的一种方案。请求阈值初始值是 maxThreshold / coldFactor，持续指定时长后，逐渐提高到maxThreshold值。而coldFactor的默认值是3.</p><p>例如，我设置QPS的maxThreshold为10，预热时间为5秒，那么初始阈值就是 10 / 3 ，也就是3，然后在5秒后逐渐增长到10.</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317680.png" alt="image-20210716110629796" tabindex="0" loading="lazy"><figcaption>image-20210716110629796</figcaption></figure><p><strong>案例</strong></p><p>需求：给/order/{orderId}这个资源设置限流，最大QPS为10，利用warm up效果，预热时长为5秒</p><h4 id="_1-配置流控规则" tabindex="-1"><a class="header-anchor" href="#_1-配置流控规则" aria-hidden="true">#</a> 1）配置流控规则：</h4><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317717.png" alt="image-20210716111012387" tabindex="0" loading="lazy"><figcaption>image-20210716111012387</figcaption></figure><h4 id="_2-jmeter测试" tabindex="-1"><a class="header-anchor" href="#_2-jmeter测试" aria-hidden="true">#</a> 2）Jmeter测试</h4><p>选择---流控效果，warm up：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121317119.png" alt="image-20210716111136699" tabindex="0" loading="lazy"><figcaption>image-20210716111136699</figcaption></figure><p>QPS为10.</p><p>刚刚启动时，大部分请求失败，成功的只有3个，说明QPS被限定在3：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121407629.png" alt="=" tabindex="0" loading="lazy"><figcaption>=</figcaption></figure><p>随着时间推移，成功比例越来越高：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121407975.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到Sentinel控制台查看实时监控：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121407084.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一段时间后：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121408979.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-排队等待" tabindex="-1"><a class="header-anchor" href="#_3-2-排队等待" aria-hidden="true">#</a> 3.2.排队等待</h3><p>当请求超过QPS阈值时，快速失败和warm up 会拒绝新的请求并抛出异常。</p><p>而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的<mark>时间间隔</mark>依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。</p><p>工作原理</p><p>例如：QPS = 5，意味着每200ms处理一个队列中的请求（<mark>严格执行200ms</mark>）；timeout = 2000，意味着<strong>预期等待时长</strong>超过2000ms的请求会被拒绝并抛出异常。</p><p>那什么叫做预期等待时长呢？</p><p>比如现在一下子来了12 个请求，因为每200ms执行一个请求，那么：</p><ul><li>第6个请求的<strong>预期等待时长</strong> = 200 * （6 - 1） = 1000ms</li><li>第12个请求的预期等待时长 = 200 * （12-1） = 2200ms</li></ul><p>现在，第1秒同时接收到10个请求，但第2秒只有1个请求，此时QPS的曲线这样的：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121457832.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果使用队列模式做流控，所有进入的请求都要排队，以固定的200ms的间隔执行，QPS会变的很平滑：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121457066.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>平滑的QPS曲线，对于服务器来说是更友好的。</p><p><strong>案例</strong></p><p>需求：给/order/{orderId}这个资源设置限流，最大QPS为10，利用排队的流控效果，超时时长设置为5s</p><h4 id="_1-添加流控规则" tabindex="-1"><a class="header-anchor" href="#_1-添加流控规则" aria-hidden="true">#</a> 1）添加流控规则</h4><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121457002.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-jmeter测试-1" tabindex="-1"><a class="header-anchor" href="#_2-jmeter测试-1" aria-hidden="true">#</a> 2）Jmeter测试</h4><p>选择---流控效果，队列：</p><p>QPS为15，已经超过了我们设定的10。</p><p>如果是之前的 快速失败、warmup模式，超出的请求应该会直接报错。</p><p>但是我们看看队列模式的运行结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121450633.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>全部都通过了。</p><p>再去sentinel查看实时监控的QPS曲线：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458174.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>QPS非常平滑，一致保持在10，但是超出的请求没有被拒绝，而是放入队列。因此<strong>响应时间</strong>（等待时间）会越来越长。</p><p>当队列满了以后，才会有部分请求失败：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458302.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-3-总结" tabindex="-1"><a class="header-anchor" href="#_3-3-总结" aria-hidden="true">#</a> 3.3.总结</h3><p>流控效果有哪些？</p><ul><li>快速失败：QPS超过阈值时，拒绝新的请求</li><li>warm up： QPS超过阈值时，拒绝新的请求；QPS阈值是逐渐提升的，可以避免冷启动时高并发导致服务宕机。</li><li>排队等待：请求会进入队列，按照阈值允许的时间间隔依次执行请求；如果请求预期等待时长大于超时时间，直接拒绝</li></ul><h2 id="_4-热点参数限流" tabindex="-1"><a class="header-anchor" href="#_4-热点参数限流" aria-hidden="true">#</a> 4.热点参数限流</h2><p>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是<strong>分别统计参数值相同的请求</strong>，判断是否超过QPS阈值。</p><h3 id="_4-1-全局参数限流" tabindex="-1"><a class="header-anchor" href="#_4-1-全局参数限流" aria-hidden="true">#</a> 4.1.全局参数限流</h3><p>例如，一个根据id查询商品的接口：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458413.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问/goods/{id}的请求中，id参数值会有变化，热点参数限流会根据参数值分别统计QPS，统计结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458235.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当id=1的请求触发阈值被限流时，id值不为1的请求不受影响。</p><p>配置示例：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458541.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代表的含义是：对hot这个资源的0号参数（第一个参数）做统计，每1秒<strong>相同参数值</strong>的请求数不能超过5</p><h3 id="_4-2-热点参数限流" tabindex="-1"><a class="header-anchor" href="#_4-2-热点参数限流" aria-hidden="true">#</a> 4.2.热点参数限流</h3><p>刚才的配置中，对查询商品这个接口的所有商品一视同仁，QPS都限定为5。</p><p>而在实际开发中，可能部分商品是热点商品，例如秒杀商品，我们希望这部分商品的QPS限制与其它商品不一样，高一些。那就需要配置热点参数限流的高级选项了：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458074.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>结合上一个配置，这里的含义是对0号的long类型参数限流，每1秒相同参数的QPS不能超过5，有两个例外：</p><ul><li><p>如果参数值是100，则每1秒允许的QPS为10</p></li><li><p>如果参数值是101，则每1秒允许的QPS为15</p></li></ul><h3 id="_4-4-案例" tabindex="-1"><a class="header-anchor" href="#_4-4-案例" aria-hidden="true">#</a> 4.4.案例</h3><p><strong>案例需求</strong>：给/order/{orderId}这个资源添加热点参数限流，规则如下：</p><ul><li><p>默认的热点参数规则是每1秒请求量不超过2</p></li><li><p>给102这个参数设置例外：每1秒请求量不超过4</p></li><li><p>给103这个参数设置例外：每1秒请求量不超过10</p></li></ul><p><strong>注意事项</strong>：热点参数限流对默认的SpringMVC资源无效，需要利用@SentinelResource注解标记资源</p><h4 id="_1-标记资源" tabindex="-1"><a class="header-anchor" href="#_1-标记资源" aria-hidden="true">#</a> 1）标记资源</h4><p>给order-service中的OrderController中的/order/{orderId}资源添加注解：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121459875.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-热点参数限流规则" tabindex="-1"><a class="header-anchor" href="#_2-热点参数限流规则" aria-hidden="true">#</a> 2）热点参数限流规则</h4><p>访问该接口，可以看到我们标记的hot资源出现了：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458182.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里不要点击hot后面的按钮，页面有BUG</p><p>点击左侧菜单中<strong>热点规则</strong>菜单：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458596.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击新增，填写表单：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121458156.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-jmeter测试" tabindex="-1"><a class="header-anchor" href="#_3-jmeter测试" aria-hidden="true">#</a> 3）Jmeter测试</h4><p>选择---热点参数限流 QPS1：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121540352.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里发起请求的QPS为5.</p><p>包含3个http请求：</p><p>普通参数，QPS阈值为2</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121548530.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>运行结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121548119.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>例外项，QPS阈值为4</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121548599.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>运行结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121548380.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>例外项，QPS阈值为10</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121548531.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>运行结果：</p><figure><img src="https://qtp-1324720525.cos.ap-shanghai.myqcloud.com/blog/202503121549352.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,215),d=[o,c,r,l,g];function u(h,m){return i(),p("div",null,d)}const b=s(e,[["render",u],["__file","2.Flow Control.html.vue"]]);export{b as default};
