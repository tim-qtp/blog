import{_ as e,W as o,X as t,a2 as r}from"./framework-6a3aa88c.js";const c={},s=r("<p>写时复制是一种保证数据一致性和线程安全的技术，核心思想是在进行写操作时，不直接修改原来的数据结构，而是先复制一份副本，在副本上进行修改，然后将修改后的副本替换原来的数据结构。</p><p>然后：</p><ul><li><strong>读操作不加锁</strong>：所有读操作（如 <code>get</code>、<code>iterator</code>）都是无锁的，直接访问当前数组。</li><li><strong>写操作加锁</strong>：每次写操作（如 <code>add</code>、<code>set</code>、<code>remove</code>）都会先加锁，再创建一个新的数组副本，修改在副本上进行，完成后再将副本替换为新的数组。</li></ul><p>由于写操作涉及复制整个数组，所以它的写操作开销较大，但读取操作则完全无锁。这使得 <code>CopyOnWriteArrayList</code> 适合于<strong>读多写少</strong>的场景。</p>",4),n=[s];function d(i,_){return o(),t("div",null,n)}const l=e(c,[["render",d],["__file","5.CopyOnWriteArrayList.html.vue"]]);export{l as default};
