import{_ as e,W as a,X as s,a2 as n}from"./framework-6a3aa88c.js";const t={},o=n('<h3 id="_1-索引优化" tabindex="-1"><a class="header-anchor" href="#_1-索引优化" aria-hidden="true">#</a> 1. 索引优化</h3><p>✅ <strong>经常查询的字段加索引</strong></p><p>✅ <strong>WHERE 条件中涉及的字段加索引</strong></p><p>✅ <strong>ORDER BY、GROUP BY 涉及的字段加索引</strong></p><p>✅ <strong>创建复合索引</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 在 `user_id` 和 `create_time` 上创建复合索引</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_user_create_time <span class="token keyword">ON</span> orders<span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> create_time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-分库分表-数据水平拆分" tabindex="-1"><a class="header-anchor" href="#_2-分库分表-数据水平拆分" aria-hidden="true">#</a> 2.分库分表（数据水平拆分）</h3><h3 id="🔹-为什么分库分表" tabindex="-1"><a class="header-anchor" href="#🔹-为什么分库分表" aria-hidden="true">#</a> 🔹 <strong>为什么分库分表？</strong></h3><ul><li>单表数据量太大，B+树结构深度增加，查询和更新会变慢。</li><li>将数据拆分到不同的表或库，降低单表负载。</li></ul><h3 id="🔹-分库分表策略" tabindex="-1"><a class="header-anchor" href="#🔹-分库分表策略" aria-hidden="true">#</a> 🔹 <strong>分库分表策略：</strong></h3><p>✅ <strong>按范围拆分</strong></p><ul><li>例如按照日期拆分：2023 年的数据存放在 <code>order_2023</code> 表中</li></ul><p>✅ <strong>按哈希取模拆分</strong></p><ul><li>例如对 <code>user_id % 16</code>或者 <code>user_name % 16</code>，将数据分配到 16 个库或表中</li></ul><p>✅ <strong>按地理或业务拆分</strong></p><ul><li>例如电商系统可按地区（华东、华北、华南）拆分</li></ul>',16),r=[o];function i(l,d){return a(),s("div",null,r)}const p=e(t,[["render",i],["__file","15.How to optimize a table with billions of data.html.vue"]]);export{p as default};
