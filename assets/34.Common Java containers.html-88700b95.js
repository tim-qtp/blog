import{_ as e,W as o,X as l,a2 as i}from"./framework-48328e23.js";const r={},t=i('<ol><li><strong>Collection（集合）</strong>：用于存储单个对象的集合。</li><li><strong>Map（映射）</strong>：用于存储键值对的集合。</li></ol><h3 id="_1-collection-集合" tabindex="-1"><a class="header-anchor" href="#_1-collection-集合" aria-hidden="true">#</a> <strong>1. Collection（集合）</strong></h3><p><code>Collection</code> 是存储单个对象的容器，分为以下几种主要类型：</p><h4 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表" aria-hidden="true">#</a> <strong>List（列表）</strong></h4><ul><li><strong>特点</strong>：有序、可重复。</li><li><strong>常见实现类</strong>： <ul><li><strong><code>ArrayList</code></strong>：基于动态数组实现，查询快，增删慢。</li><li><strong><code>LinkedList</code></strong>：基于双向链表实现，增删快，查询慢。</li><li><strong><code>Vector</code></strong>：线程安全的动态数组，性能较差，已逐渐被 <code>ArrayList</code> 取代。</li></ul></li></ul><h4 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合" aria-hidden="true">#</a> <strong>Set（集合）</strong></h4><ul><li><strong>特点</strong>：无序、不可重复。</li><li><strong>常见实现类</strong>： <ul><li><strong><code>HashSet</code></strong>：基于哈希表实现，查询速度快，元素无序。</li><li><strong><code>LinkedHashSet</code></strong>：基于哈希表和链表实现，元素按插入顺序排序。</li><li><strong><code>TreeSet</code></strong>：基于红黑树实现，元素按自然顺序或自定义顺序排序。</li></ul></li></ul><h4 id="queue-队列" tabindex="-1"><a class="header-anchor" href="#queue-队列" aria-hidden="true">#</a> <strong>Queue（队列）</strong></h4><ul><li><strong>特点</strong>：先进先出（FIFO）或优先级队列。</li><li><strong>常见实现类</strong>： <ul><li><strong><code>LinkedList</code></strong>：可以用作队列。</li><li><strong><code>PriorityQueue</code></strong>：基于堆实现，元素按优先级排序。</li><li><strong><code>ArrayDeque</code></strong>：基于数组实现的双端队列。</li></ul></li></ul><hr><h3 id="_2-map-映射" tabindex="-1"><a class="header-anchor" href="#_2-map-映射" aria-hidden="true">#</a> <strong>2. Map（映射）</strong></h3><p><code>Map</code> 是存储键值对的容器，键不可重复。</p><h4 id="常见实现类" tabindex="-1"><a class="header-anchor" href="#常见实现类" aria-hidden="true">#</a> <strong>常见实现类</strong></h4><ul><li><strong><code>HashMap</code></strong>： <ul><li>基于哈希表实现，键值对无序。</li><li>允许键和值为 <code>null</code>。</li><li>查询速度快。</li></ul></li><li><strong><code>LinkedHashMap</code></strong>： <ul><li>基于哈希表和链表实现，键值对按插入顺序或访问顺序排序。</li><li>适合需要保持插入顺序的场景。</li></ul></li><li><strong><code>TreeMap</code></strong>： <ul><li>基于红黑树实现，键值对按键的自然顺序或自定义顺序排序。</li><li>适合需要排序的场景。</li></ul></li><li><strong><code>Hashtable</code></strong>： <ul><li>线程安全的哈希表实现，性能较差，已逐渐被 <code>HashMap</code> 取代。</li><li>不允许键或值为 <code>null</code>。</li></ul></li><li><strong><code>ConcurrentHashMap</code></strong>： <ul><li>线程安全的哈希表实现，性能优于 <code>Hashtable</code>。</li><li>适合高并发场景。</li></ul></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h3><p>Java 中常见的容器可以分为两大类：</p><ol><li><strong>Collection</strong>： <ul><li><code>List</code>：<code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code>。</li><li><code>Set</code>：<code>HashSet</code>、<code>LinkedHashSet</code>、<code>TreeSet</code>。</li><li><code>Queue</code>：<code>LinkedList</code>、<code>PriorityQueue</code>、<code>ArrayDeque</code>。</li></ul></li><li><strong>Map</strong>： <ul><li><code>HashMap</code>、<code>LinkedHashMap</code>、<code>TreeMap</code>、<code>Hashtable</code>、<code>ConcurrentHashMap</code>。</li></ul></li></ol>',17),d=[t];function n(c,s){return o(),l("div",null,d)}const g=e(r,[["render",n],["__file","34.Common Java containers.html.vue"]]);export{g as default};
